<?xml version="1.0" encoding="UTF-8"?>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/modules/Common.mod#6 $
-->

<!--
    A few character entities the XML recommendation says should be defined
    "for interoperability" with existing SGML parsers.  By default, these
    are not included to avoid warnings (about entity redefinition) from
    many XML parsers.
-->
<!ENTITY % SGML-help "IGNORE">
<![%SGML-help;[
<!ENTITY lt     "&#38;#60;">
<!ENTITY gt     "&#62;">
<!ENTITY amp    "&#38;#38;">
<!ENTITY apos   "&#39;">
<!ENTITY quot   "&#34;">
]]>

<!--
    Common types used throughout the cXML definition.

    The types try to follow the XML DATA definition submitted to the W3C. See
    the following for more information,

        http://msdn.microsoft.com/xml/reference/schema/datatypes.asp
        http://www.w3c.org/TR/1998/NOTE-XML-data-0105/

-->

<!-- Atomic-level Types -->
<!ENTITY % bin.base64 "CDATA">
<!ENTITY % bin.hex "CDATA">
<!ENTITY % boolean "(0 | 1)">    <!-- 0 is false, 1 is true -->
<!ENTITY % char "CDATA">
<!ENTITY % date "CDATA">
<!ENTITY % datetime.tz "CDATA">  <!-- Time zone is required -->
<!ENTITY % fixed.14.4 "CDATA">
<!ENTITY % i8 "CDATA">
<!ENTITY % int "%i8;">
<!ENTITY % r8 "CDATA">
<!ENTITY % number "CDATA">       <!-- No limit on number of digits, unlike
                                      %r8; -->
<!ENTITY % string "CDATA">
<!ENTITY % time.tz "CDATA">      <!-- Time zone is required -->
<!ENTITY % duration "CDATA">      <!--ISO8601 duration http://www.w3.org/TR/xmlschema-2/#duration  -->
<!ENTITY % ui8 "CDATA">
<!ENTITY % uint "%ui8;">         <!-- Unique to this specification -->
<!ENTITY % uri "CDATA">
<!ENTITY % uuid "CDATA">

<!-- Higher-level Types -->
<!--
    NOTE: The following is a temporary *hack* to allow empty values for
    some attributes with these types.  The nmtoken entity should resolve to
    NMTOKEN.
-->
<!ENTITY % nmtoken "CDATA">      <!-- Any combination of XML name chars. -->
<!ENTITY % isoLangCode "%nmtoken;">         <!-- ISO 639 Language Code -->
<!ENTITY % isoCountryCode "%nmtoken;">      <!-- ISO 3166 Country Code -->
<!ENTITY % isoStateCode "%nmtoken;">      <!-- ISO 3166-2:2013 Country Subdivision (State) Code -->
<!ENTITY % isoCurrencyCode "%nmtoken;">     <!-- ISO 4217 Currency Code -->
<!ENTITY % xmlLangCode "%nmtoken;"> <!-- Language code as defined by XML
                                         recommendation: Language and
					 country. -->
<!ENTITY % URL "%uri;">
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Base.mod#5 $
-->

<!--
    This file defines the basic elements used to build higher level
    constructs in cXML.
-->

<!-- Basic Name/Data Elements -->
<!--
    Name is used to provide an identifier for other elements.

    xml:lang
        The language in which the name is written.
-->
<!ELEMENT Name (#PCDATA)> <!-- string -->
<!ATTLIST Name
    xml:lang  %xmlLangCode;  #REQUIRED
>

<!--
    An Extrinsic is an element which can be used to extend the data
    associated with known elements.

    Since this Element is of type ANY, it could contain any arbitrary XML
    document within itself, or a binary ![CDATA[]] document.

    name
        Name used to identify this extrinsic.
-->
<!ELEMENT Extrinsic ANY>
<!ATTLIST Extrinsic
    name  %string;  #REQUIRED
>

<!--
    Description is a string which describes something.
    Though text may be interspersed with ShortName elements in this content
    model, placing the ShortName at the beginning or end of the element is
    much preferred.  At most one ShortName element is allowed per
    Description.  The intended content model would be more like
    (( ShortName, #PCDATA ) | ( #PCDATA | ShortName? )) if DTD syntax
    supported it.

    xml:lang
        The language in which the description is written.
    type
        The qualifier of the description.
-->
<!ELEMENT Description ( #PCDATA | ShortName )* > <!-- mixed: string and
                                                      ShortName -->
<!ATTLIST Description
    xml:lang  %xmlLangCode;  #REQUIRED
    type  %string;   #IMPLIED
>

<!--
    A short string which describes something in fewer characters than the
    entire Description.  This should be used when limited space is available.
    For example, a table of elements might show the ShortName's of each.  A
    linked "details" view would show the entire Description (including the
    ShortName).  Without a ShortName, the user interface must default to a
    truncation of the Description.
    This element does not require an xml:lang attribute since it appears only
    within a Description element.  The language of the ShortName must match
    that of the surrounding Description.
-->
<!ELEMENT ShortName (#PCDATA)> <!-- string -->

<!-- Telephone Number Elements -->
<!--
    International ITU dial code for the country code in question.  This
    code would be entered after any escape code necessary to begin
    International dialing.  That is, the escape code does not appear in the
    content of this element.

    isoCountryCode
        The ISO 3166 2-letter country code for the dial code in question.
-->
<!ELEMENT CountryCode (#PCDATA)> <!-- uint -->
<!ATTLIST CountryCode
    isoCountryCode  %isoCountryCode;  #REQUIRED
>

<!--
    The areacode or city code within a CountryCode.
-->
<!ELEMENT AreaOrCityCode (#PCDATA)> <!-- uint -->

<!--
    The local number part of a telephone number.
-->
<!ELEMENT Number (#PCDATA)> <!-- string -->

<!--
    An extension within relative to the Number element. This element has no
    meaning without an associated Number element.
-->
<!ELEMENT Extension (#PCDATA)> <!-- uint -->

<!--
    TelephoneNumber represents international telephone numbers.
-->
<!ELEMENT TelephoneNumber (CountryCode, AreaOrCityCode, Number, Extension?)>

<!--
     Phone is a "named" TelephoneNumber.

     name
          specifies an identifier which indicates the type of phone number.
          US examples would include "work","home", etc.
-->
<!ELEMENT Phone (TelephoneNumber)>
<!ATTLIST Phone
    name  %string;  #IMPLIED
>

<!--
    Fax number.
-->
<!ELEMENT Fax (TelephoneNumber | URL | Email)>
<!ATTLIST Fax
    name  %string;  #IMPLIED
>

<!-- Addressing Elements -->
<!--
    URL. A string which represents a URL
-->
<!ELEMENT URL (#PCDATA)> <!-- URL -->
<!ATTLIST URL
    name  %string;  #IMPLIED
>

<!--
    An email address. Address must conform to RFC 821 (SMTP Standard).

    preferredLang
        optional language that the email owner prefers to receive
        emails in. Refer to the definition of xmlLangCode entity.

-->
<!ELEMENT Email (#PCDATA)> <!-- string -->
<!ATTLIST Email
    name          %string;       #IMPLIED
    preferredLang %xmlLangCode;  #IMPLIED
>

<!--
    Contact represents an entity at a location. The nature of this
    element is that it represents a communication "end point" for a
    location.


   IdReference
       ID reference is Within the application context (for example,
a certain pair of buyer and supplier),
       the (identifier, domain) pair
 should be unique.
    role
        Position this person or group plays in the procurement process.
        Likely values include endUser, administrator, purchasingAgent,
        technicalSupport, customerService, sales,
        supplierCorporate, supplierMasterAccount, supplierAccount,
        buyerCorporate, buyerMasterAccount, buyerAccount, buyer,
        subsequentBuyer. Other values may be allowed in some cases.

        from and to roles are reserved for future use.

    addressID
        An id for the address. Needed to support address codes for
        relationships that require id references. Example: plantID

     addressIDDomain
	It is the qualifier for the addressId to specify the agency or organization. Examples are DUNS, ILN and buyerLocationID.

-->
<!ELEMENT Contact (Name, PostalAddress*, Email*, Phone*, Fax*, URL*, IdReference*, Extrinsic*)>
<!ATTLIST Contact
    role             NMTOKEN           #IMPLIED
    addressID        %string;          #IMPLIED
    addressIDDomain   %string;   #IMPLIED
>

<!--
    The DeliverTo part of an Address. This would be internal to the actual
    address know to the outside world. Similar to what an extension is to a
    TelephoneNumber.
-->
<!ELEMENT DeliverTo (#PCDATA)> <!-- string -->

<!--
    Street is a single line of an Address' location.
-->
<!ELEMENT Street (#PCDATA)> <!-- string -->

<!--
    City is the name of the city in an Address' location.

    cityCode
        Optional code assigned by local/government agencies identifying a city region
-->
<!ELEMENT City (#PCDATA)> <!-- string -->
<!ATTLIST City
    cityCode  %string;  #IMPLIED
>

<!--
    State is an optional state identifier in an Address' location.

    isoStateCode
        The ISO 3166-2:2013 country subdivision (state) code for this country.
        Universally applicable code for the representation of the names of
        principal administrative divisions of countries and territories included
        in ISO 3166-1. It is intended to be used in conjunction with ISO 3166-1.
-->
<!ELEMENT State (#PCDATA)> <!-- string -->
<!ATTLIST State
    isoStateCode  %isoStateCode;  #IMPLIED
>

<!--
    PostalCode (I have no idea how to describe it)
-->
<!ELEMENT PostalCode (#PCDATA)> <!-- string -->

<!--
    Country is the name of the country in an Address' location.  The
    content of this element is a string which may (for example) be printed
    directly to a shipping label.  The content is the human-readable
    equivalent of the isoCountryCode used by applications.

    isoCountryCode
        The ISO 3166 2-letter country code for this country.
-->
<!ELEMENT Country (#PCDATA)> <!-- string -->
<!ATTLIST Country
    isoCountryCode  %isoCountryCode;  #REQUIRED
>

<!--
    Municipality specifies the name of the municipality in an Address’ location.

    municipalityCode
        Optional code assigned by local/government agencies identifying a municipality region
-->
<!ELEMENT Municipality (#PCDATA)> <!-- string -->
<!ATTLIST Municipality
    municipalityCode  %string;  #IMPLIED
>


<!--
    PostalAddress is a real-world location for a business or person.
-->
<!ELEMENT PostalAddress (DeliverTo*, Street+, City, Municipality?, State?,
                         PostalCode?, Country, Extrinsic*)>
<!ATTLIST PostalAddress
    name  %string;  #IMPLIED
>

<!--
    Address is the association of a Contact and an Location.

    isoCountryCode
        The ISO 3166 2-letter country code for the country containing this
        location.

    addressID
        An id for the address.  Needed to support address codes for
        relationships that require id references.  An example would be a
        shipping code.

     addressIDDomain
	It is the qualifier for the addressId to specify the agency or organization. Examples are DUNS and ILN.
-->
<!ELEMENT Address (Name, PostalAddress?, Email?, Phone?, Fax?, URL?)>
<!ATTLIST Address
    isoCountryCode  %isoCountryCode;  #IMPLIED
    addressID       %string;          #IMPLIED
    addressIDDomain   %string;   #IMPLIED
>

<!--
    Defines the parties involved in a document (e.g. service entry sheet),
    including fieldContractor, fieldEngineer and requester.

    Contact
        Contact information for the document (e.g. service entry sheet) partners.
        Allowed contact roles include fieldContractor, fieldEngineer and requester.

    IdReference
        Partner reference ID, including party ID, supplier tax ID, etc.
-->
<!ELEMENT PartnerContact (Contact, IdReference*)>

<!--
    Defines the information of the issuer who is associated to the customs info document.

    Address
        Defines the real world location of the issuer
-->
<!ELEMENT Issuer ( Address )>

<!-- Financial Elements -->
<!--
    Money is the representation of the object used to pay for items.

    currency
        specifies the currency in which amount is stated, must conform to ISO
        4217 currency codes.

    alternateAmount
        the amount of money in the alternateCurrency. Optional and used to
        support dual-currency requirements such as the Euro.

    alternateCurrency
        specifies the currency in which the alternateAmount is stated, must
        conform to ISO 4217 currency codes.
-->
<!ELEMENT Money (#PCDATA)> <!-- number -->
<!ATTLIST Money
    currency           %isoCurrencyCode;  #REQUIRED
    alternateAmount    %number;           #IMPLIED
    alternateCurrency  %isoCurrencyCode;  #IMPLIED
>

<!--
    Optional textual child for communicating arbitrary comments or
    description along with the parent.
    Though text may be interspersed with Attachment elements in this content
    model, grouping the Attachment list at the begging or end of the element
    is much preferred.  The intended content model would be more like
    (( Attachment+, #PCDATA ) | ( #PCDATA | Attachment* )) if the DTD syntax
    supported it.

    xml:lang
        The language in which the Comments are written.  This attribute
    will be required in a future version of cXML.  (Leaving it out is
    deprecated.)

    type
        An optional type of the comments. Type can be used to make the comments
        structured with respect to what they describe.
-->
<!ELEMENT Comments ( #PCDATA | Attachment )* > <!-- mixed: string and
                                                    opt. Attachment list -->
<!ATTLIST Comments
    xml:lang  %xmlLangCode;  #IMPLIED
    type      %string;       #IMPLIED
>

<!--
    Optional child of Comments element referencing a part in a multipart MIME
    transmission.

    The contained URL must use the scheme "cid:".  This is the identifier for
    the referenced attachment within the larger transmission.  Must match the
    Content-ID header of one (and only one) part of the MIME transmission
    containing this cXML document.  May also be used to retrieve the
    attachment file separately.
-->
<!ELEMENT Attachment (URL)>

<!---
    Reference to a remote attachment.

    AttachmentReference is used inside Extrinsic elements that have a
    predefined name of "Attachments".

    In the context of AttachmentReference, the domain attribute of
    InternalID is currently optional. However, as a way to prevent
    circular request paths, the sending application may use a
    predefined value of "local" to indicate that the attachment
    requested is local to the other application.

    length
        length of the attachment in bytes.
-->
<!ELEMENT AttachmentReference (Name, Description, InternalID)>
<!ATTLIST AttachmentReference
    length  %uint;  #IMPLIED
>

<!--
    Price per unit of item.  Optional Modifications
    (changes due to discounts or fixed amount) may be provided.
    The Money element indicates the final amount after applying the
    Modifications.
-->
<!ELEMENT UnitPrice (Money, Modifications?)>

<!--
    Reference to an earlier document (for example, OrderRequest).  In a
    StatusUpdateRequest, this element identifies the purchase order to be
    updated.

    payloadID
        A unique identifier for the document.  Copied directly from the
        cXML element of the original document.
-->
<!ELEMENT DocumentReference EMPTY>
<!ATTLIST DocumentReference
    payloadID       %string;      #REQUIRED
>

<!ELEMENT InternalID (#PCDATA)> <!-- string -->
<!ATTLIST InternalID
    domain   %string;  #IMPLIED
>

<!-- ====
    Common to most variants of the PunchOut transaction set.  Defined here
    to be easily shared between multiple DTD files without requiring
    inclusion of Transaction.mod in all of them.

    All of the PunchOut transaction sets include an originating Request
    (ProviderSetupRequest for example), relatively simple Response
    (PunchOutSetupResponse for example) and final Message
    (ProviderDoneMessage or PunchOutOrderMessage).  The Request and
    Response comprise a back-end transaction between two cooperating
    applications that wish to extend an interactive session from one to the
    other.  The Request provides the destination application with
    authentication, identification and other setup information.  The
    Response provides the originating application with a unique starting
    location for the interactive (HTML) session at the destination system.

    After receiving a Response of this type, the originating application
    redirects the user's browser to the provided location.  (For some
    non-HTML applications, opening a new browser window at that location
    may be more appropriate.)  The destination system eventually provides
    an HTML form to the user's browser.  This form submits the final
    Message to close the remote session, return that user to the
    originating application and carry any required information back to the
    originating application.
==== -->

<!--
    OriginatorCookie - Identification of a specific PunchOut session.  Used
    in both originating Request and later Message that returns user to
    originating application.

    Note: The BuyerCookie element used in a 'regular' PunchOut transaction
    (defined in Transaction.mod) is of type ANY.  That does not seem
    useful.  The string required below better matches the needs for this
    element.  Future transactions similar to the PunchOut transaction will
    use this element.
-->
<!ELEMENT OriginatorCookie (#PCDATA)>

<!--
    BrowserFormPost - Location to which the user's browser must submit the
    final Message.  This location (carried in the originating Request) does
    not need to be specific to a PunchOut session since the
    OriginatorCookie is returned in the Message.
-->
<!ELEMENT BrowserFormPost (URL)>

<!--
    SelectedService - Identification of a service offered by this provider
    and requested in this transaction.  Used only in the originating
    Request.
-->
<!ELEMENT SelectedService (#PCDATA)>

<!--
    StartPage - Location to which the user's browser must be redirected to
    begin the interactive portion of the session at the remote site.  The
    destination system returns this information in the Response document.
    This location must be specific to a particular session.  It is
    effectively a one time key, providing authenticated entry into the
    destination system.
-->
<!ELEMENT StartPage (URL)>

<!--
    ReturnData - Any information the originator must know about the
    completed operation at the provider site.  The ReturnValue is for
    applications; the Name is for human consumption (direct presentation in
    the User Interface of the application).  Where appropriate for the
    possible services, this element may appear in the final Message for a
    PunchOut session.

    name
        An identifier for the data returned.  Provides a meaning for the
        contents of a ReturnData element.
-->
<!ELEMENT ReturnData (ReturnValue, Name)>
<!ATTLIST ReturnData
    name  %string;  #IMPLIED
>

<!ELEMENT ReturnValue (#PCDATA)>

<!--
    Defines a time range. The start and end can be unbounded
    startDate
        The starting date of the time range
    endDate
        The ending date of the range
-->
<!ELEMENT TimeRange EMPTY>
<!ATTLIST TimeRange
    startDate      %datetime.tz;         #IMPLIED
    endDate        %datetime.tz;         #IMPLIED
>

<!--
    Defines a period in time.

    startDate
        The starting date of the period

    endDate
        The ending date of the period
-->
<!ELEMENT Period EMPTY>
<!ATTLIST Period
    startDate      %datetime.tz;         #REQUIRED
    endDate        %datetime.tz;         #REQUIRED
>

<!--
    Must be a UN/CEFACT (Recommendation 20) unit of measure code.
-->
<!ELEMENT UnitOfMeasure (#PCDATA)> <!-- nmtoken -->


<!--
    Define the quantity as quoted in the UnitPrice

    UnitOfMeasure
	The unit of measure for the quote
    Description
	The textual description of the quote
    quantity
	the quantity basis for the quote
    conversionFactor
	the conversion ratio from the unit of measure of the order to the unit of measure of the PriceBasisQuantity
-->
<!ELEMENT PriceBasisQuantity (UnitOfMeasure, Description?)>
<!ATTLIST PriceBasisQuantity
    quantity         %r8;    #REQUIRED
    conversionFactor %r8;    #REQUIRED
>



<!--
    Defines a reference to a term which is defined
    in another document.

    termName
        The name of the ID attribute containing the term.

    term
        The value of that attribute (i.e., the term itself).

-->
<!ELEMENT TermReference EMPTY>
<!ATTLIST TermReference
	termName %string; #REQUIRED
	term %string; #REQUIRED
>

<!--
    Defines an optionally named monetary rate at which goods or services are
    charged or paid.

    Money
        The amount of Money per UnitOfMeasure to be charged or paid.

    UnitOfMeasure
        Unit of measure.

    PriceBasisQuantity
	the quantity the price is quoted on

    TermReference
        Identifies the definition of this UnitRate
        (found, for example,  in contracts, master agreements, and other documents
        which may or may not be cXML documents).
-->
<!ELEMENT UnitRate (
    Money,
    UnitOfMeasure,
    PriceBasisQuantity?,
    TermReference?
)>

<!--
    The rate information used to define the rate of a purchase.  For
    example, this could be the total room rate for 4 nights of stay
    at a hotel.

    Total
        The total amount for the rate.  The total amount must equal
        to quantity x UnitRate.

    UnitRate
        The single unit rate.

    Description
        Textual description for the rate.  For example, hotel nightly rate.

    Quantity
        The quantity.  For example, a 4 nights stay at a hotel will
        have quantity set to 4 with UnitofMesure in UnitRate set to Day.
-->
<!ELEMENT Rate (Total, UnitRate, Description?)>
<!ATTLIST Rate
    quantity    %r8;    #REQUIRED
>

<!--
    The total for something.
-->
<!ELEMENT Total (Money, Modifications?)>

<!--
    Tolerances for price, quantity, delivery date.
-->
<!ELEMENT Tolerances (QuantityTolerance?, PriceTolerance?, TimeTolerance?)>

<!ELEMENT QuantityTolerance (Percentage | Value)>

<!ELEMENT PriceTolerance (Percentage | Money)>

<!--
    Defines a certain amount of days which is used to check if a concrete
    delivery date is within the tolerance regarding the requested
    delivery date.

    limit
        Amount of time in 'type' relative to the requested delivery date is it allowed to deliver?
    type
        Specifies how the limit should be interpreted.
-->
<!ELEMENT TimeTolerance EMPTY>
<!ATTLIST TimeTolerance
    limit %int; #REQUIRED
    type  (minutes | hours | days | weeks) "days"
>

<!-- Upper tolerances defines an upper limit -->
<!ELEMENT Upper (Tolerances)>
<!-- Lower tolerances defines a lower limit -->
<!ELEMENT Lower (Tolerances)>

<!ELEMENT TaxAmount (Money)>

<!ELEMENT TaxableAmount (Money)>

<!--
    One language-specific string for the location of tax,
    e.g. London, Canada, California, etc.

    xml:lang
        The language or locale in which the location of tax is written.
-->
<!ELEMENT TaxLocation (#PCDATA)>              <!-- string -->
<!ATTLIST TaxLocation
   xml:lang              %xmlLangCode;         #REQUIRED
>

<!--

    TriangularTransactionLawReference indicates the relevant law as
    titled for the local jurisdiction in the scenario of a triangular
    transaction.  ex: Triangulation, article 28c,E paragraph 3 of the
    6th EU VAT Directive

    xml:lang
        the language in which the law reference is written.
-->
<!ELEMENT TriangularTransactionLawReference (#PCDATA)>
<!ATTLIST TriangularTransactionLawReference
    xml:lang   %xmlLangCode;    #REQUIRED
>

<!--
    Defines details of one type of tax.

    TaxableAmount
       The taxable amount.

    TaxAmount
       The tax amount.

    TaxLocation
       The tax location.

    Description
       The textual description of the current type of tax.

    TriangularTransactionLawReference
       The law reference for transactions where isTriangularTransaction is True

    purpose
       The purpose of the tax, e.g., tax (tax), custom duty, shippingTax,
       specialHandlingTax, etc.

    category
       The tax category, Sales tax (sales), Use tax (usage), VAT (vat),
       GST (gst) are defined categories. Other values are permitted.

    percentageRate
       The tax rate in number of percentage.

    isVatRecoverable
       True if the VAT is recoverable.  Default is false.

    taxPointDate
       refers to the date on which VAT becomes due.

    paymentDate
       indicate the date when payment must be made.

    isTriangularTransaction
       True if the transaction is triangular.  Default is false.

    exemptDetail
       If the TaxAmount is zero, VAT or other regulations may require
       a reason why.  zeroRated means the tax rate is zero.  exempt
       means the item or items are exempt from taxation.

-->
<!ELEMENT TaxDetail (TaxableAmount?, TaxAmount, TaxLocation?, Description?,
                     TriangularTransactionLawReference?, TaxRegime?, Extrinsic*)>
<!ATTLIST TaxDetail
    taxedElement            IDREF          #IMPLIED
	purpose                 %string;       #IMPLIED
    category                %string;       #REQUIRED
    percentageRate          %r8;           #IMPLIED
    isVatRecoverable        (yes)          #IMPLIED
    taxPointDate            %datetime.tz;  #IMPLIED
    paymentDate             %datetime.tz;  #IMPLIED
    isTriangularTransaction (yes)          #IMPLIED
    exemptDetail            (zeroRated | exempt)  #IMPLIED
>

<!--   TaxRegime is related to the type of supplier activities and the
	commodities in the invoice. Companies pay taxes based on the tax regime
	they are enrolled.   Sample tax regimes: Assimilated Regime wages, Regime
	of Small Taxpayers (REPECO), Regimen of business and professional activities,
	etc. Multiple tax regimes can be associated with a single invoice.
-->

<!ELEMENT TaxRegime (#PCDATA)>


<!--
    Definition of a cXML Tax item. This represents what a Tax element should
    be in the classic notion of a line on a PO or Invoice. It can also
    represent a per-lineitem tax element depending on where it appears
    (inside of a item ELEMENT or inside of a something like a supplierOrder
    ELEMENT).

    Represents a tax item in the shopping basket. There could be one of these
    for the entire order, or one per lineitem.

    The total amount of taxes for the line item or order should be reflected
    in the Money element. The breakdown of taxes, for example, tax on shipping
    or tax on goods should be represented in separate TaxDetail elements.
-->
<!ELEMENT Tax (Money, Description, TaxDetail*, Extrinsic*)>

<!--
    Defines a Modifications element which provides the original unit
    price or shipping price and then describes a set of 1 or more
    modifications to that price.  There can one per Shipping element.
    The optional method attribute defines how multiple Modification elements
    are combined.
-->
<!ELEMENT Modifications (Modification+)>

<!--
    Defines the original price or shipping price and optionally provides a type.
    Example type values might be MSRP, ListPrice, Actual, AverageSellingPrice,
    CalculationGross, BaseCharge, AverageWholesalePrice, ExportPrice, AlternatePrice,
    ContractPrice, etc.
-->
<!ELEMENT OriginalPrice (Money)>
<!ATTLIST OriginalPrice
    type            %string;  #IMPLIED
>

<!--
    Defines a Modification element and optionally provide a level: AdditionalDeduction: used only when allownces are involved
     AdditionalCost: used when additional charges are involved
     OriginalPrice represents the price on which the discount or charges apply.
     Tax represents the Tax on the Modification

	 Optional attribute level represent level of modification(using in cascading modifications).
	 Example:
	 Charge 1 (Level 1): Original Price 10$ Charge: 1$
	 Charge 2 (Level 1): Original Price 10$ Charge: 1$
	 Charge 3 (Level 2): Original Price 8$ Charge: 1$
	 Charge 4 (Level 3): Original Price 7$ Charge: 1$ ...
-->
<!ELEMENT Modification (OriginalPrice?, (AdditionalDeduction | AdditionalCost), Tax?, ModificationDetail?)>

<!ATTLIST Modification
level            %uint;  #IMPLIED
>

<!--
The type attribute can specify the type of deduction.
Eg. discount -->
<!ELEMENT AdditionalDeduction (DeductionAmount | DeductionPercent | DeductedPrice)>
<!ATTLIST AdditionalDeduction
    type            %string;  #IMPLIED
>

<!ELEMENT ModificationDetail (Description?, Extrinsic*)>
<!ATTLIST ModificationDetail
    name             %string;  #REQUIRED
	code             %string;  #IMPLIED
    startDate        %datetime.tz;  #IMPLIED
    endDate          %datetime.tz;  #IMPLIED
 >

 <!ELEMENT Value EMPTY>
 <!ATTLIST Value
	value            %number;       #REQUIRED
 >

 <!ELEMENT Percentage EMPTY>
 <!ATTLIST Percentage
 	percent          %r8;           #REQUIRED
 >

 <!--
	The Money element is the final cost amount for this Additional Cost or Charge
 	DO NOT USE THIS ELEMENT FOR SHIPPING, SPECIAL HANDLING, FREIGHT, etc
 -->
 <!ELEMENT AdditionalCost (Money|Percentage)>

<!--
    Defines discount applied.

    DiscountAmount
        	The discount expressed as a flat amount with currency.

    DiscountPercent
        	The discount rate expressed as a percentage.
-->
<!ELEMENT Discount (DiscountPercent | DiscountAmount)>

<!--
    Defines the discount rate

    percent
        The discount rate expressed as a percentage.  A negative discount percent
        represents a penalty.
-->
<!ELEMENT DiscountPercent EMPTY>
<!ATTLIST DiscountPercent
	percent          %r8;           #REQUIRED
>

<!--
    Defines the deduction rate

    percent
        The deduction rate expressed as a percentage.
-->
<!ELEMENT DeductionPercent EMPTY>
<!ATTLIST DeductionPercent
	percent          %r8;           #REQUIRED
>

<!--
    The ProductMovementItemIDInfo element provides a clear reference to the line item
    in a Consignment Movement.

    movementLineNumber
        The line number of current line item, copied from movement document.

    movementID
       The id of a consignment movement entry known to the buyer system.

    movementDate
        The date and time the product was moved from consignment inventory to the buyer inventory.
-->
<!ELEMENT ProductMovementItemIDInfo (IdReference*)>
<!ATTLIST ProductMovementItemIDInfo
    movementLineNumber        %uint;              #REQUIRED
    movementID                %string;            #REQUIRED
    movementDate              %datetime.tz;       #REQUIRED
>


<!-- The InvoiceItemIDInfo element provides a clear reference to the line item  in a InvoiceDetailRequest document.

    invoiceLineNumber
        The line number of a line item, copied from InvoiceDetailRequest.

    invoiceID
        The id of an invoice known to the supplier system.

    invoiceDate
        The invoice date.
-->
<!ELEMENT InvoiceItemIDInfo (IdReference*)>
<!ATTLIST InvoiceItemIDInfo
    invoiceLineNumber        %uint;              #REQUIRED
    invoiceID                %string;            #REQUIRED
    invoiceDate              %datetime.tz;       #IMPLIED
><!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/modules/Version.mod#4 $
-->

<!--
     Another top-level entity used in Transport.mod.  Defined here to allow
     easy updates to the release version of cXML without opening
     Transport.mod.  This should also provide an easy file to search for
     the current release version string.
-->

<!-- cxml.version
    Current default string for the cXML@version attribute.  Corresponds to
    the final directory of the SYSTEM identifier used in all up-to-date
    cXML documents.
    For easy parsing of this file, do not remove whitespace surrounding the
    actual version string.
-->
<!ENTITY cxml.version "1.2.029" >
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

	$Id: //ariba/cxml/schema/Modules/Industry.mod#1$
-->

<!-- ====
    Allow this module to be built separately from any other DTD file.
==== -->

<!--
    Characteristic contains detailed information about an item that can be used across different industries. 

	Domain - Type of Characteristic
		Examples: size, sizeCode, color, colorCode , quality, qualityCode, grade, gradeCode 
	Value  - Value for the domain.
	code - For information such as currency code and unit of measure
-->
<!ELEMENT Characteristic EMPTY>
<!ATTLIST Characteristic
	domain	%string;   #REQUIRED
	value  	%string;   #REQUIRED
	code 	%string;   #IMPLIED >
	
<!-- Usage of EANID is deprecated! Use IdReference and proper domain within ItemID instead.

    Number assigned to a manufacturer's product according to the International Article Numbering Association or UPC(Universal Product Code) for an article.-->
<!ELEMENT EANID (#PCDATA)> <!-- string -->

<!-- European Waste Catalogue is a unique ID for articles listed in the EU Waste Catalogue (EWC). It requires special handling -->
<!ELEMENT EuropeanWasteCatalogID (#PCDATA)>

<!-- Number assigned by a supplier to a special promotion activity. Promotions affect the forward planning/ordering process (and the related pricing) -->
<!ELEMENT PromotionDealID (#PCDATA)> <!-- string -->

<!-- The item number is a promotional variant number. Used when only one or some variants of an article are promoted-->
<!ELEMENT PromotionVariantID (#PCDATA)> <!-- string -->


<!-- Total retail value of all products -->
<!ELEMENT TotalRetailAmount (Money)>

<!-- Information price, excluding allowances or charges, and taxes. The price stated is for information purposes only -->
<!ELEMENT InformationalAmount (Money)>

<!-- Gross monetary amount paid or to be paid at intervals -->
<!ELEMENT GrossProgressPaymentAmount (Money)>

<!-- Deposit amount charged for returnable items (boxes, containers, pallets…)-->
<!ELEMENT TotalReturnableItemsDepositAmount (Money)>

<!-- Total amount of goods and services excluding deposits for returnable goods -->
<!ELEMENT GoodsAndServiceAmount (Money)>

<!-- Specific exact amount -->
<!ELEMENT ExactAmount (Money)>

<!-- Groups all the additional amounts -->
<!ELEMENT AdditionalAmounts (TotalRetailAmount?, InformationalAmount?, GrossProgressPaymentAmount?, 
					TotalReturnableItemsDepositAmount?, GoodsAndServiceAmount?,  ExactAmount? )>

<!--Price value per unit (gross price) -->
<!ELEMENT UnitGrossPrice (Money, PriceBasisQuantity?)>

<!--Information price, excluding allowances or charges, and taxes. The price stated is for information purposes only -->
<!ELEMENT InformationalPrice (Money, PriceBasisQuantity?)>

<!-- Information price, excluding  only taxes. The price stated is for information purposes only -->
<!ELEMENT InformationalPriceExclTax (Money, PriceBasisQuantity?)>

<!-- the Net value of a single unit that has to be corrected (new price). -->
<!ELEMENT UnitNetPriceCorrection (Money, PriceBasisQuantity?)>


<!-- Defines all the item related additional prices -->
<!ELEMENT AdditionalPrices (UnitGrossPrice?, InformationalPrice?,  InformationalPriceExclTax?, UnitNetPriceCorrection?)>


<!-- Defines product/item related indicators 
	domain
		Specifies the type of the Indicator. Suggested values are:       
		InvoiceUnitIndicator - Indicator specifies the unit as basis for invoicing ("price per unit")
		ConsumerUnitIndicator - Indicator will be set if the specified unit is used from the consumer/consumption process (for instance "gallons" or "liters")
		ReturnableContainerIndicator - Indicator will be set if the packaging/container shall be returned to the sender and will be re-used.
		TradeUnitIndicator - Indicator will be set if the specified unit is used to describe the trading unit (for instance "barrel" for oil)
		DutyIndicator - specifies that the current line item has a special fee
		CommisionIndicator - Marks the actual position/line item has a provision
	value
		Value of the Indicator
-->
<!ELEMENT ItemIndicator EMPTY>
<!ATTLIST ItemIndicator
    domain  %string;   #REQUIRED
    value  %string;    #REQUIRED
>


<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Supplier.mod#1 $
-->

<!--
    Supplier of goods and services. Includes a list of SupplierIDs which
    identify the Supplier.

    corporateURL
        URL to web site about the supplier

    storeFrontURL
        URL to web site where a user can shop or browse
-->
<!ELEMENT Supplier (Name, Comments?, SupplierID+, SupplierLocation*)>
<!ATTLIST Supplier
    corporateURL   %URL;  #IMPLIED
    storeFrontURL  %URL;  #IMPLIED
>

<!--
    One of the locations for a supplier. Supplier location is
    generally a physical location.
-->
<!ELEMENT SupplierLocation (Address, OrderMethods)>

<!--
    OrderMethods is the list of methods by which one can order
    from a supplier. The contact element is the technical contact
    who should be able to assist with order processing issues.
    The list is to be ordered by supplier preference, the first
    element having the highest degree of preference.
-->
<!ELEMENT OrderMethods (OrderMethod+, Contact?)>

<!--
    OrderMethod is a method for ordering. It is comprised of a
    target address for the order and the protocol expected by
    the address.
-->
<!ELEMENT OrderMethod (OrderTarget, OrderProtocol?)>

<!--
    OrderTarget represents an address to which orders can be
    sent.
-->
<!ELEMENT OrderTarget (Phone | Email | Fax | URL | OtherOrderTarget)>

<!--
    OrderProtocol is the communication method to be used when
    communicating an order to a supplier. An example would be "cXML".
-->
<!ELEMENT OrderProtocol (#PCDATA)> <!-- string -->

<!--
    OtherOrderTarget represents an address which is not enumerated by
    default in the OrderTarget Element. This may contain address targets
    beyond the ability of this document to describe.

    name
        Optional name for target.
-->
<!ELEMENT OtherOrderTarget ANY>
<!ATTLIST OtherOrderTarget
    name  %string;  #IMPLIED
>

<!--
    Definition of a supplier id.  A supplier id is a (domain, value)
    pair so that suppliers have the flexibility to define their id's
    according to an arbitrary convention (e.g., (DUNS, 12345),
    (TaxID, 88888888)).

    domain
        the domain of the id
-->

<!ELEMENT SupplierID (#PCDATA)> <!-- string -->
<!ATTLIST SupplierID
    domain  %string;  #REQUIRED
>
<!--
   Defines a List of Suppliers that might be associated with a quote Item. Used in
   ItemOut. 
-->
<!ELEMENT SupplierList (Supplier+)>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/modules/Item.mod#19 $
-->

<!--
    Type of a line item. 
-->
<!ENTITY % lineItemType '(composite | item)'>

<!--
    Type of a coposite line item. 
-->
<!ENTITY % compositeItemType '(groupLevel | itemLevel)'>

<!--
    Type of a service line item.
-->
<!ENTITY % serviceItemType '(material | service)'>

<!--
    ID with which the item's manufacturer identifies the item.
-->
<!ELEMENT ManufacturerPartID (#PCDATA)> <!-- string -->

<!--
    Name of the item's manufacturer.

    xml:lang
        The language in which the ManufacturerName is written.  This
    attribute will be required in a future version of cXML.  (Leaving it
    out is deprecated.)
-->
<!ELEMENT ManufacturerName (#PCDATA)> <!-- string -->
<!ATTLIST ManufacturerName
    xml:lang %xmlLangCode; #IMPLIED
>

<!--
    Classification is used to group items into similar categories.

    domain
        "name" of classification, ie., SPSC
		Domain can be "MaterialGroup" and "MaterialGroup" refers to a grouping of materials and services according to their characteristics in SAP.
				
	code
        identification for a classification

-->
<!ELEMENT Classification (#PCDATA)> <!-- string -->
<!ATTLIST Classification
    domain  %string;  #REQUIRED
	code 	%string;  #IMPLIED
>

<!--
     LeadTime specifies, in days, the amount of time required to
     receive the item.
-->
<!ELEMENT LeadTime (#PCDATA)>   <!-- uint -->

<!--
    SupplierBatch is the batch ID provided by the supplier at the line item quantity level
    to identify  the batch in which the item or the product was produced. The batch id is helpful in tracebility.

    Batch numbers (also call "lot number", "variant") are used in several industries to uniquely identify  items produced together.
-->
<!ELEMENT SupplierBatchID (#PCDATA)>


<!--
    How the supplier identifies an item they sell.

    If SupplierPartID does not provide a unique key to identify the item,
    then the supplier should generate a key which identifies the part
    uniquely when combined with the SupplierID and SupplierPartID. The
    key is called SupplierPartAuxiliaryID.


    An example is where a Supplier would use the same PartID for an
    item but have a different price for units of "EA" versus "BOX".
    In this case, the ItemIDs should be:
    <ItemID>
        <SupplierPartID>pn12345</SupplierPartID>
        <SupplierPartAuxiliaryID>EA</SupplierPartAuxiliaryID>
    </ItemID>
    <ItemID>
        <SupplierPartID>pn12345</SupplierPartID>
        <SupplierPartAuxiliaryID>
           <foo>well formed XML here</foo>
        </SupplierPartAuxiliaryID>
    </ItemID>
    In this case, the "foo" element must be defined in an internal subset
    sent with the cXML document.  Otherwise, parsers will not be able to
    validate that document.

    In a preferred approach, the sending application may escape the contained
    XML using CDATA sections.  This would appear as:
       ...
       <SupplierPartAuxiliaryID>
           <![CDATA[<foo>well formed XML here</foo>]]>
       </SupplierPartAuxiliaryID>
       ...

    Finally, the angle brackets could be escaped using XML character
    entities.  This might be a bit harder for humans to read.  For example:
       ...
       <SupplierPartAuxiliaryID>
           &lt;foo&gt;well formed XML here&lt;/foo&gt;
       </SupplierPartAuxiliaryID>
       ...

    revisionID     
       Also known as Material Revision Level. "Revision" is the most widely-used
       term for referring to that attribute which distinguishes one closely-
       related design iteration from another. A revision represents a change to
       an object, or a modification to a part such that the part remains
       interchangeable with its previous iteration.
       As part of engineering change management the supplier uses the revision
       level to uniquely identify the version of a product, of an article or of
       a part.
     
-->
<!ELEMENT SupplierPartID (#PCDATA)> <!-- string -->
<!ATTLIST SupplierPartID
	revisionID	%string;	#IMPLIED
>
<!ELEMENT SupplierPartAuxiliaryID ANY>

<!--
   BuyerPartID represents an item in buyer system. This identifier is specified by the buyer
-->
<!ELEMENT BuyerPartID (#PCDATA)>


<!--
    A unique identification of an item. SupplierID is not required since
    ItemIDs never travel alone.

    ItemIDs used to define a Supplier/Commodity level Blanket Order Item should
    use Empty SupplierPartID tag. These type of items do not have specific part numbers
    at the time of placing the Blanket Order. There will be subsequent release orders
    or invoices that will define the SupplierID.

    IdReference
    Defines an ID reference.  Within the application context (for example,
    certain pair of buyer and supplier), the (identifier, domain) pair should be unique.
-->
<!ELEMENT ItemID (SupplierPartID, SupplierPartAuxiliaryID?, BuyerPartID?, IdReference*)>

<!--
    ItemDetail contains detailed information about an item. All the data that
    a user would want to see about an item instead of the bare essentials
    that are represented in the ItemID.
  
    LeadTime
        time in days to receive the item
.
    
Dimension
    
	Item dimensions.
    
  
ItemDetailIndustry
    
	Industry  specfic item detail information.
-->
<!ELEMENT ItemDetail (UnitPrice, Description+, UnitOfMeasure, PriceBasisQuantity?, Classification+, ManufacturerPartID?,ManufacturerName?, URL?, LeadTime?, Dimension*, ItemDetailIndustry?, Extrinsic*)>
<!--
	Item details specific for items that describe blanket purchase order items. 
	This element should only be used for items in a purchase order of 
	type "blanket"	or "regular".
-->
<!ELEMENT BlanketItemDetail (Description+, MaxAmount?, MinAmount?, 
                             MaxQuantity?, MinQuantity?,
			     UnitPrice?, UnitOfMeasure?, PriceBasisQuantity?,
			     Classification*, Extrinsic*)>

<!--
    ItemDetailIndustry contains detailed information about an item for a specific industry. 
-->
<!ELEMENT ItemDetailIndustry (ItemDetailRetail? )>

<!--
    ItemDetailIndustry contains detailed information about an item for a retail industry. 
    
    EANID
        Deprecated, use '<IdReference domain="EAN-13">' within 'ItemID' instead.
-->
<!ELEMENT ItemDetailRetail (EANID?, EuropeanWasteCatalogID?, Characteristic* )>

<!--
    An identifier for a subcontracting component within the procurement process.
-->
<!ELEMENT ComponentID (#PCDATA)>

<!--
    An element contains product information of subcontracting component (such as buyer product id, supplier product id, standard product id, internal product idetc.).

    SupplierPartID
        It represents a product in supplier system. This identifier is specified by the supplier.

    SupplierPartAuxiliaryID
        If SupplierPartID does not provide a unique key to identify the item, then the supplier should generate a key which identifies the product uniquely when combined with the SupplierID and SupplierPartID. The key is called SupplierPartAuxiliaryID.

    BuyerPartID
        It represents a product in buyer system. This identifier is specified by the buyer.

    IdReference
        ID reference is within the application context (for example, standard id for a product), the (identifier, domain) pair should be unique.
-->
<!ELEMENT Product (SupplierPartID?, SupplierPartAuxiliaryID?, BuyerPartID?, IdReference*)>

<!--
    A sequential number that is assigned when changes are made to component.
-->
<!ELEMENT ProductRevisionID (#PCDATA)>

<!--
    An element carrying batch information for material or goods  produced in a single manufacturing run.

    BuyerBatchID
        An identifier from buyer to identify the material/goods produced in a single manufacturing run

    SupplierBatchID
        An identifier from supplier to identify the material/goods produced in a single manufacturing run

    PropertyValuation
        It consists of the property to be valuated and the associated values

    productionDate
        Date on which when a batch of material or goods is produced

    expirationDate
        Date on which when a batch of material/goods becomes expired

    originCountryCode
        Country of origin for a batch of material or goods
-->
<!ELEMENT Batch (BuyerBatchID?, SupplierBatchID?, PropertyValuation*)>
<!ATTLIST Batch
productionDate      %datetime.tz;    	#IMPLIED
expirationDate   	%datetime.tz;      	#IMPLIED
originCountryCode 	%isoCountryCode; 	#IMPLIED
>

<!--
    An identifier from buyer to identify the material/goods produced in a single manufacturing run.
-->
<!ELEMENT BuyerBatchID (#PCDATA)>

<!--
    PropertyValuation consists of the property to be valuated and the associated values

    PropertyReference:
        The property being valuated

    ValueGroup:
        Contains a group of values pertaining to a property
-->
<!ELEMENT PropertyValuation (PropertyReference?, ValueGroup*)>

<!--
    PropertyReference is a reference to the property being valuated

    IdReference
        ID reference is within the application context (for example, id for a property), the (identifier, domain) pair should be unique.
-->
<!ELEMENT PropertyReference (IdReference*)>

<!--
    ValueGroup contains a group of values pertaining to a property.

    IdReference
        ID reference is within the application context (for example, id of value group), the (identifier, domain) pair should be unique.

    ParentID
        For Structured property, ParentID is an identifier of its parent

    PropertyValue
        Values for valuating property
-->
<!ELEMENT ValueGroup (IdReference?,  ParentID?, PropertyValue*)>

<!--
For Structured property, ParentID is an identifier of its parent
-->
<!ELEMENT ParentID (#PCDATA)>

<!--
    PropertyValue consists of values for valuating a property.
        Example: 	QuantitySpecification: valuating properties whose data types are in units, for example, 5 pieces, 7 kg
        IntegerSpecification: valuating non-dimensional, integer properties, for example, codes, indexes, and sequential numbers
        DateTimeSpecification: valuating date time properties, for example requirement date, production date, and expiration date

    PropertyCharacteristic
        It has the detailed information about a value that can be used for valuation of property

    Name
        Name of PropertyValue
-->
<!ELEMENT PropertyValue (Characteristic*)>
<!ATTLIST PropertyValue
name          %string;       #IMPLIED>

<!--
	ControlKeys
		Are used to override default business rules as configured in Ariba Network.
-->
<!ELEMENT ControlKeys (OCInstruction?, ASNInstruction?, InvoiceInstruction?)>

<!--
	May be used to specify more precisly how to deal with OrderConfirmation creation.

	value works as follows:
		allowed            - allows to send OrderConfirmation for this line item, regardless of current rule settings.
		notAllowed         - does not allow to send OrderConfirmation for this line item.
		requiredBeforeASN  - requires OrderConfirmation before ASN could be created.
-->
<!ELEMENT OCInstruction (Lower?, Upper?)>
<!ATTLIST OCInstruction
    value       (allowed | notAllowed | requiredBeforeASN)  #REQUIRED>


<!ELEMENT ASNInstruction (Lower?, Upper?)>
<!ATTLIST ASNInstruction
    value       (allowed | notAllowed)  #REQUIRED>

<!ELEMENT InvoiceInstruction EMPTY>
<!ATTLIST InvoiceInstruction
    value       (isERS | isNotERS)  #REQUIRED>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    This element captures travel information.  It could be one of four
    types: air, car rental, hotel or rail.

    AirDetail
        Air travel detail.

    CarRentalDetail
        Car rental detail.

    HotelDetail
        Hotel detail.

    RailDetail
        Rail detail.

    PolicyViolation
        List of policy violations (if any) associated with this
        travel line item.

    Comments
        Top level comments for this travel line item (if any).  This
        is not the policy violation comment but a top level comment
        given by the user for this travel line item while in Travel
        Booking Provider's web site.

    TermsAndConditions
        List of Terms and conditions (if any) associated with this
        travel line item.

    confirmationNumber
        A unique confirmation number that is useful to both the
        traveler and the vendor who is providing the service for this
        travel line item.  For example, hotel reservation number or
        e-ticket number from the airline.

    pnrLocator
        Passenger Name Record (PNR) Locator that is useful to the
        Travel Booking Provider.

    quoteExpirationTime
        Date and time that this quote will expire.  This value is
        normally supplied in the PunchoutOrderMessage.  If no value is
        supplied, it is assumed that there is no expiration time or
        date for this quote.
-->
<!ELEMENT  TravelDetail ((AirDetail | CarRentalDetail | HotelDetail | RailDetail),
                          PolicyViolation*,
                          Comments?,
                          TermsAndConditions?)>
<!ATTLIST TravelDetail
    confirmationNumber  %string;        #REQUIRED
    pnrLocator          %string;        #IMPLIED
    quoteExpirationTime %datetime.tz;   #IMPLIED
>

<!-- Air -->

<!--
    Air detail information for the air trip.

    TripType
        Round Trip, One Way, or Multi Leg

    AirLeg
        Different air leg that makes up this air detail.
        For example a round trip from SFO -> TPE with no stops
        will have two air legs.  One air leg from SFO -> TPE
        and another from TPE -> SFO.

    AvailablePrice
        Other available airfare prices that the user did not pick.

    Penalty
        Penalty amount (if any).  This is normally due to changes or
        cancelation of the ticket.
-->
<!ELEMENT AirDetail (TripType,
                     AirLeg+,
                     AvailablePrice*,
                     Penalty?)>

<!--
    Define a single leg in the air travel.

    Vendor
        Airline vendor name and information.

    AirLegOrigin
        Originating airport for this air leg.

    AirLegDestination
        Destination airport for this air leg.

    BookingClassCode
        Airline booking class code.  This is the de-facto
        airline standard.  For example,

        F, FN, P, R, A      - first class
        C, CN, D, J, I, Z   - business class.
        Y, YN, B, BN, M, H, V, VN, O, Q, QN, S, 
            K, KN, L, U, T, W - coach class.

    Rate
        Rate for this particular air leg.  If specify, the total
        of all the rate for the different air legs must add up
        to the total the line item level.

    Meal
        Meal information for this air leg (if any)

    travelSegment
        Textual information to identify this travel segment.
        This information is specific to the Travel Booking Provider.

    departureTime
        Departure date and time for this air leg

    arrivalTime
        Arrival date and time for this air leg

    flightNumber
        Flight number for this air leg

    seatNumber
        Seat number for this air leg

    seatType
	    Seat type
	        aisle       - Aisle
	        window      - Window
	        middle      - Middle

    upgrade
        Is this ticket an upgrade?

    stops
        The number of stop for this air leg.
        0 if it is a direct flight.  If no information is supplied
        it is defaulted to 0.

    equipment
        The plane equipment information for this air leg
-->
<!ELEMENT AirLeg (Vendor,
                  AirLegOrigin,
                  AirLegDestination,
                  BookingClassCode?,
                  Rate?,
                  Meal*)>
<!ATTLIST AirLeg
    travelSegment   %string;        #REQUIRED
    departureTime   %datetime.tz;   #REQUIRED
    arrivalTime     %datetime.tz;   #REQUIRED
    flightNumber    %string;        #REQUIRED
    seatNumber      %string;        #IMPLIED
    seatType        (window | aisle | middle) #IMPLIED
    upgrade         (yes)           #IMPLIED
    stops           %r8;            #IMPLIED
    equipment       %string;        #IMPLIED
>

<!--
    Originating airport for this Air Leg.

    Airport
        Originating airport
-->
<!ELEMENT AirLegOrigin (Airport)>

<!--
    Destination airport for this Air Leg.

    Airport
        Destination airport
-->
<!ELEMENT AirLegDestination (Airport)>

<!--
    Airport information that includes the iso airport code

    Address
        Physical adress of the airport.

    airportCode
        The 3 letter IATA airport code.
-->
<!ELEMENT Airport (Address?)>
<!ATTLIST Airport airportCode %string; #REQUIRED>

<!---
    Meal information used by air, hotel and rail.

    BookingClassCode
        Code for the meal.  For example, airlines use
		B     - Breakfast
            C     - Complimentary liquor
            D     - Dinner
            F     - Food for purchase
            G     - Food and beverage for purchase
            H     - Hot meal
            K     - Continental breakfast
            L     - Lunch
            M     - Meal
            N     - No meal service 
            O     - Cold meal
            P     - Liquor for purchase
            R     - Refreshments
            S     - Snack or brunch
            V     - Refreshments for purchase

    Description
        Textual description of the meal, including any special needs
        such as vegetarian or dairy-free.
-->
<!ELEMENT Meal (BookingClassCode?, Description?)>

<!-- Car Rental -->

<!--
    Car rental information.

    Vendor
        Car rental vendor information.

    CarRentalPickup
        Pickup location for the rental car.

    CarRentalDropoff
        Drop off location for the rental car.

    BookingClassCode
        4 letter code for car.

        1st Letter - M (Mini), E (Economy), C (Compact), S (Standard),
                     I (Intermediate), F (Full size), P (Premium), L (Luxury)
                     V (MiniVan), X (Special)
        2nd Letter - B (2 door), C (2/4 door), D (4 door), T (Convertible),
                     F (Four wheel drive), V (Van), W (Wagon), S (Sport)
                     X (Special)
        3rd Letter - A (Automatic), M (Manual)
        4th Letter - R (A/c), N (No A/C)

    CarRentalFee
        Mutliple car rental fee can be specified to capture the
        break down of different fees.  The total of these fees must
        add up to the total at the line item level.

    LimitedMileage
        Mileage limit information

    AvailablePrice
        Other available prices for car rental that the user did not pick.

    travelSegment
        Textual information to identify this travel segment.
        This information is specific to the Travel Booking Provider.

    pickupTime
        The intended pickup date and time

    dropoffTime
        The intended dropoff date and time
-->
<!ELEMENT CarRentalDetail (Vendor,
                           CarRentalPickup,
                           CarRentalDropoff,
                           BookingClassCode?,
                           CarRentalFee+,
                           LimitedMileage?,
                           AvailablePrice*)>
<!ATTLIST CarRentalDetail
    travelSegment %string;          #REQUIRED
    pickupTime    %datetime.tz; 	#REQUIRED
    dropoffTime   %datetime.tz; 	#REQUIRED
>

<!--
    Physical location where the rental car should be picked up.  This
    is either an Airport or off airport car rental location.

    Airport
        An airport location.

    Address
        Physical address of the car rental location
-->
<!ELEMENT CarRentalPickup (Airport | Address)>

<!--
    Physical location where the rental car should be dropped off.
    This is either an Airport or off-airport car rental location.

    Airport
        An airport location.

    Address
        Physical address of the car rental location
-->
<!ELEMENT CarRentalDropoff (Airport | Address)>

<!--
    This specifies the quantity and the unit of measure of the mileage
    limit.

    UnitOfMeasure
        Unit of measure either miles or kilometers.

    quantity
        The mileage limit amount.
-->
<!ELEMENT LimitedMileage (UnitOfMeasure)>
<!ATTLIST LimitedMileage
    quantity   %r8;      #REQUIRED
>

<!--
    Car rental fee information.  CarRentalFee captures the actual
    charges and fee that applies to this rental.  Conditional charges
    such as extra mileages that are over the mileage limit should not
    be specified here but rather in the TermsAndConditions text.

    Total
        Total amount for this car rental fee.  All the total for the rates
        must add up to this amount.

    Rate
        The individual broken-down fee information.

    type
        Type of rate
            baseRate            - Base rental rate
            additionalDriver    - Additional driver fee
            airportAccessFee    - Airport Access fee
            dropOffCharge       - Drop off charge
            vehicleLicensingFee - Vehicle lincensing fee
            touristTax          - Tourist tax
            prepaidGasoline     - Prepaid gasoline charge
            navigationSystem    - Navigation system
            childSeat           - Child seat charge
            luggageRack         - Luggage rack charge
            collisionDamageInsurance    - Collision damage insurance
            liabilityInsurance          - Liability insurance
            mobilePhone         - Mobile phone base charge
            other               - Other charges.
-->
<!ELEMENT CarRentalFee (Total, Rate*)>
<!ATTLIST CarRentalFee
    type (baseRate | additionalDriver | airportAccessFee | dropOffCharge |
          vehicleLicensingFee | touristTax | prepaidGasoline |
          navigationSystem | childSeat | luggageRack | collisionDamageInsurance |
          liabilityInsurance | mobilePhone | other) "baseRate"
>

<!-- Hotel -->

<!--
    Hotel detail information.

    Vendor
        Hotel vendor information.

    Address
        Physical address of the hotel.  This is might be different
        from the address specified in the Vendor field as the vendor
        address might be the head quarter address.

    RoomType
        The type of room reserved.

    BookingClassCode
        Hotel booking class code.

    Meal
        Any complementary meals that are included with the room.  For
        example, complementary continental breakfast.

    Rate
        Hotel rate information.  Multiple rates can be specified.  For
        example, the night rate, valet parking rate, and other rates.

    AvailablePrice
        Other available prices that user did not pick.  Available
        prices can be from the same vendor or different vendor.

    travelSegment
        Textual information to identify this travel segment.  This
        information is specific to the Travel Booking Provider.

    arrivalTime
        Date and time of arrival at the hotel.  This is used as an
        advisory to the hotel vendor for the arrival time.

    departureTime
        Date and time of departure from the hotel.  This is used as an
        advisory to the hotel vendor for the departure time.

    checkinTime
        The official checkin time.  For example, most hotel checkin
        time is 3:00 PM.

    checkoutTime
        The official checkout time.  For example, most hotel checkout
        time is 12:00 PM (noon).

    earlyCheckinAllowed
        Does the hotel allow early checkin?

    lateCheckoutAllowed
        Does the hotel allow late checkout?
-->
<!ELEMENT HotelDetail (Vendor,
                       Address,
                       RoomType,
                       BookingClassCode?,
                       Meal*,
                       Rate*,
                       AvailablePrice*)>
<!ATTLIST HotelDetail
    travelSegment   %string;         #REQUIRED
    arrivalTime     %datetime.tz;    #REQUIRED
    departureTime   %datetime.tz;    #REQUIRED
    checkinTime     %time.tz;        #REQUIRED
    checkoutTime    %time.tz;        #REQUIRED
    earlyCheckinAllowed (yes)        #IMPLIED
    lateCheckoutAllowed (yes)        #IMPLIED
>

<!--
    Information about a hotel room.

    Description
        Textual description of the hotel room.

    Amenities
        List of amenities for this hotel room.

    smoking
        Is the room a smoking or non-smoking room

    numberOfBed
        The number of beds in this room

    bedType
        The bed type in this room.
-->
<!ELEMENT RoomType (Description?, Amenities*)>
<!ATTLIST RoomType
    smoking        (yes | no)   #REQUIRED
    numberOfBed    %r8;         #IMPLIED
    bedType        (king | queen | full | double | single | other)    #IMPLIED
>

<!--
    Textual description of the amenities for the hotel room.

    Description
        Text description of this amenities.  For example,
        DSL connection, two telephone lines, and other information
        about a hotel room.
-->
<!ELEMENT Amenities (Description)>

<!-- Rail -->

<!--
    Rail detail information.  A rail detail can have multiple legs.

    TripType
        Trip type for this rail.

    Rail leg
        The different rail legs that make up this rail detail.

    AvailablePrice
        Other available prices that the user did not pick for for this
        rail trip.

    Penalty
        Penalty (if any) associated with this rail trip.
-->
<!ELEMENT RailDetail (TripType,
                      RailLeg+,
                      AvailablePrice*,
                      Penalty?)>

<!--
    Rail leg is used to express information regarding a single leg for
    a rail travel.

    Vendor
        Rail vendor information.

    RailLegOrigin
        Rail originating location.

    RailLegDestination
        Rail Destination location.

    BookingClassCode
        Rail booking class code.

    Rate
        Rate information (if any) for this rail leg.  If specified,
        all the rates in all rail legs must add up to the total at the
        travel line item level.

    Meal
        Meal served for this leg (if any).

    travelSegment
        Textual information to identify this travel segment.  This
        information is specific to the Travel Booking Provider.

    departureTime
        Date and time of departure at the originating location.

    arrivalTime
         Date and time of arrival at the destination location.

    trainNumber
        Train number for this rail leg.

    seatNumber
        Seat number.

    carType
        Type of the rail car.
-->
<!ELEMENT RailLeg (Vendor,
                   RailLegOrigin,
                   RailLegDestination,
                   BookingClassCode?,
                   Rate?,
                   Meal*)>
<!ATTLIST RailLeg
    travelSegment   %string;        #REQUIRED
    departureTime   %datetime.tz;   #REQUIRED
    arrivalTime     %datetime.tz;   #REQUIRED
    trainNumber     %string;        #REQUIRED
    seatNumber      %string;        #IMPLIED
    carType        (sleeper | seat) #IMPLIED
>

<!--
    The origin of a particular rail leg.  This can be an airport or a
    physical address of a rail station.

    Airport
        An airport location

    Address
        A physical address of a rail station
-->
<!ELEMENT RailLegOrigin (Airport | Address)>

<!--
    The destination of a particular rail leg.  This can be an airport
    or a physical address of a rail station.

    Airport
        An airport location

    Address
        A physical address of a rail station
-->
<!ELEMENT RailLegDestination (Airport | Address)>

<!-- Travel/Expense common definitions -->

<!--
    The type of the trip. This is used by Air and Rail to indicate
    round trip, one way or multi-leg trip.

    type
        Type of the trip
	    round       - a round trip
	    oneWay      - a one way trip
	    multiLeg    - a multi leg or open jaw trip
-->
<!ELEMENT TripType EMPTY>
<!ATTLIST TripType
    type    (round | oneWay | multiLeg) #REQUIRED
>

<!--
    Information about a vendor that is providing this service.

    Address
        The physical address of the vendor.  This address normally is
        the business or head quarter address of the vendor.

    SupplierID
        Supplier id for this vendor.  This is just a (domain, value)
        pair so that Travel Booking Providers have the flexibility to
        define their id's according to an arbitrary convention (e.g.,
        (DUNS, 12345), (TaxID, 88888888)).

        Note that multiple supplier id can be specified.  This is so
        that Travel Booking Provider can have a single implementation
        that works with different Buyer implementations that use
        different supplier id domain.

    preferred
        Is this vendor a preferred vendor?
-->
<!ELEMENT Vendor (Address, SupplierID*)>
<!ATTLIST Vendor
    preferred (yes | no) #REQUIRED
>

<!--
    Textual terms and conditions associated with an air fare, car
    rental, hotel, or rail.  For example, a car rental terms and
    conditions normally include boundary limit, additional mileage
    charges, gasoline charge and other restriction information.

    Multiple terms and conditions can be attached to a single travel
    line item.

    Description
        Textual terms and conditions.
-->
<!ELEMENT TermsAndConditions (Description+)>

<!--
    Policy violation (if any) that results from the user picking this
    particular travel.  Policy violations are associated with an
    individual line item of travel and not associated at the header
    level.  This allows for clear identification of the violation with
    the individual line item.

    Description
        Textual description of this violation.

    PolicyViolationJustification
        Justification for this violation given by user normally picked
	from a standard list of justifications at the Travel Booking
	Provider web site.

    Comments
        Additional comments to further clarify the justification given
        by user.

    level
        Violation level.
            warning     - a non serious violation.
            violation   - a serious violation of company policy.
-->
<!ELEMENT PolicyViolation (Description,
                           PolicyViolationJustification,
                           Comments?)>
<!ATTLIST PolicyViolation
	level (warning | violation) #REQUIRED
>

<!--
    Justification given by the user why they violate the company
    travel policy.  This justification value is normally picked from a
    pick list at the Travel Booking Provider web site.

    Description
        The justification of the violation picked from a standard list
        at the Travel Booking Provider web site.
-->
<!ELEMENT PolicyViolationJustification (Description)>

<!--
    Penalty (if any) for this travel segment

    Money
        The penalty amount

    Description
        Textual description of the cause of the penalty.  For example,
        change fee associated with air ticket.
-->
<!ELEMENT Penalty (Money, Description)>

<!--
    Other avaible price.  AvailablePrice is used to express what other
    prices are available that the traveler did not pick.
    AvailablePrice is can be used to capture the lowest price, the
    highest price, the lowest compliant price, and the hight compliant
    price.

    Money
        The amount of the other available price.

    Description
        Textual description of the available price.  It explain
        how this price was derived at.  For example, a non direct flight
        exists with the flight number can be put here.

    Type
        Type of available price.  Currently we capture four
        different type.
            lowest              - The lowest price possible regardless of the
                                  traveling policies
            lowestCompliant     - The lowest price that still complies with
                                  the travel policies
            highestCompliant    - The highest price that still complies with
                                  the travel policies
            highest             - The highest price possible regardless of the travel
                                  policies
            other               - Other, specify in the description
-->
<!ELEMENT AvailablePrice (Money, Description?)>
<!ATTLIST AvailablePrice
    type (lowest | lowestCompliant | highestCompliant | highest | other) #REQUIRED
>

<!--
    Booking class code used by airfare, car rental, hotel, and rail to
    indicate the class.

    Description
        Textual description of the code

    code
        code
-->
<!ELEMENT BookingClassCode (Description?)>
<!ATTLIST BookingClassCode
    domain  %string;    #REQUIRED
    code    %string;    #REQUIRED
>

<!--
    Define a physical location and its address.  This can be used to 
    describe places such as airport, bus station, ferry dock, railway
    station and so on.

    Address
        Indicates the address of the place

    code
        Indicates the code the may represent the place.  For example,
        airport can have an airport code.

    domain
        Qualifier or domain for the code.  For example, airport code
        is IATA standard, the domain value would be "IATA"; however
        bus station code may be local specific.
-->
<!ELEMENT Place (Address?)>
<!ATTLIST Place
    code           %string;     #IMPLIED
    domain         %string;     #IMPLIED
>

<!--
    Defines places such as city, airport or railway where trip or leg originated.
-->
<!ELEMENT LegOrigin (Place)>

<!--
    Defines places such as city, airport or railway code where trip or leg ended.
-->
<!ELEMENT LegDestination (Place)>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Transaction.mod#8 $
-->

<!--
    For better definitions of these Elements/Entities, refer to the cXML
    Transaction Specification documents.
-->
<!-- 
     Detailed per-unit asset information for a line item.

     Extrinsic
         Additional per-unit asset information

     serialNumber
         Manufacturer's serial number for the unit

     tagNumber
         Asset tag number for the unit

     location
         location of the unit
-->
<!ELEMENT AssetInfo (Extrinsic*)>
<!ATTLIST AssetInfo
	tagNumber %string; #IMPLIED
	serialNumber %string; #IMPLIED
	location %string; #IMPLIED
>

<!-- Basic transactional elements used throughout -->

<!--
    Defines gross amount in posted currency.
-->
<!ELEMENT TotalAmountInPostedCurrency (Money)>

<!--
    Defines gross amount in billing currency. If specified, customer
    needs to pay this amount.
-->
<!ELEMENT TotalAmountInBillingCurrency (Money)>

<!--
    The bill to for an item.

   IdReference
       ID reference is Within the application context (for example, a certain pair of buyer and supplier), the (identifier, domain) pair should be unique.
-->
<!ELEMENT BillTo (Address, IdReference*)>

<!--
    The ship to for a item.

   IdReference
       ID reference is Within the application context (for example, a certain pair of buyer and supplier), the (identifier, domain) pair should be unique.
   
   Address
       To provide a plant location description, the domain attribute of the element IdReference should be set to "buyerLocationID", the identifier to the plantID.
       The addressIDDomain should be set to "buyerLocationID" and the addressID to the plantID. Use the name for the description.

-->
<!ELEMENT ShipTo (Address, CarrierIdentifier*, TransportInformation*, IdReference*)>

<!--
    Definition of a cXML Shipping item. Represents a shipping cost in the
    shopping basket (PunchOutOrderMessage) or an order to the supplier
    (OrderRequest). There could be one of these for the entire order, or one
    per lineitem.
    The Modifications element (if present) represents any changes to
    the shipping cost.

    trackingDomain
        represents the logistics supplier, I.E., "FedEx", "UPS", etc.

    trackingId
        an optional element value that represents the logistics supplier
        tracking number

    tracking
        Deprecated - Do Not Use
-->
<!ELEMENT Shipping (Money, Description, Modifications?)>
<!ATTLIST Shipping
    trackingDomain  %string;  #IMPLIED
    trackingId      %string;  #IMPLIED
    tracking        %string;  #IMPLIED
>

<!--
    Defines a payment term in an invoice or order.  This deprecates the
		InvoiceDetailPaymentTerm previously defined.  Payment term can be the 
		net term (without discount) or discount term (with discount).

    payInNumberOfDays
        The number of days after invoice effective date for the invoice to be paid.

    Discount
	 	The percentage or amount of the discount term.  This element should be omitted
	 	if the payment term is a net term.
    Extrinsic
	Additional information related to this payment term.
-->
<!ELEMENT PaymentTerm (Discount?, Extrinsic*)>
<!ATTLIST PaymentTerm
    payInNumberOfDays        %uint;         #REQUIRED
>

<!--
    The list of valid payment types.
-->
<!ENTITY % cxml.payment  "PCard">
<!ELEMENT Payment (%cxml.payment;)>

<!--
    Defines an accounting segment.  Segment is an older, deprecated way to
    transport this information.

    type
        The accounting type of this segment.

    id
        The unique key of this Segment against the type.

    description
        Textual description of the Segment. For human readability.
-->
<!ELEMENT Segment EMPTY>
<!ATTLIST Segment
    type         %string;  #REQUIRED
    id           %string;  #REQUIRED
    description  %string;  #REQUIRED
>

<!--
    Defines an accounting segment.  AccountingSegment is the newer, better
    way to transport this information.  Name corresponds to the type
    attribute of Segment; Description corresponds to description.  Both add
    required locale attributes to the strings.

    id
        The unique key of this Segment against the type.
-->
<!ELEMENT AccountingSegment ( Name, Description )>
<!ATTLIST AccountingSegment
    id           %string;  #REQUIRED
>

<!--
    An accounting object.  Use of the Segment element here is deprecated.

    name
        The name of the object containing the specified accounting segments.
-->
<!ENTITY % cxml.accounting  "( Segment+ | AccountingSegment+ )">
<!ELEMENT Accounting (%cxml.accounting;)>
<!ATTLIST Accounting
    name  %string;  #REQUIRED
>

<!--
    A charge against an Accounting element.
-->
<!ELEMENT Charge (Money)>

<!--
    The combination of a Charge against an Accounting Element. A distribution
    represents the breakdown of one overall amount into sub-amounts.
-->
<!ELEMENT Distribution (Accounting, Charge)>



<!-- Item Elements -->
<!--
    The representation of a line item as it needs to be for sending to a
    supplier. The item can refer to a MasterAgreement in itself.


    quantity
        How many items are desired. Supplier and Commodity level items in an order of type
	"blanket" will use a default value of "1". The quantity in this case will not be
	used to compute the sub total. The MaxAmount in the BlanketItemDetail will be 
	used to indicate any line level amounts.
    lineNumber
        Position (counting from 1) of this item in an order.  Used to
        maintain a reference between items in create and update OrderRequest
        documents.
    requisitionID
        The buyers system requisition id for this line item. It might be the
        same as orderID, and it might not be included at all.  Must not be
        included if requisitionID is specified in the OrderRequestHeader.
    requestedDeliveryDate
        The date this item was requested for delivery.
    agreementItemNumber 
        The corresponding Item Number of the Item in the Master Agreement if this is 
	a 'release' order item.
    parentLineNumber
	    lineNumber of the parent line item in the order.
    itemType 
	    specify whether the line item contains child line items or acts as a child item
   requiresServiceEntry
		This is a flag to indicate if a service entry request is required
		for this item
  confirmationDueDate
    specifies the date by which the supplier has to respond with a Confirmation to the Purchase Order

    ScheduleLine
	Schedule Line(s) listed for the specific line item.
    
    ItemOutIndustry
	Industry specific item information
	
    Packaging
	Specify the packaging information for a line item. 
	
	compositeItemType
	specify type of parent line item(lot/box)

    Batch
    Batch information of goods or material produced in a single manufacturing run. The information includes id, characteristic, date…ect.

    itemCategory
    It is for defining how a component or material is procured.  Item category, subcontract or consignment,� is supported.
        subcontract refers to process of procuring a material by providing component information that makes the finished product
        consignment refers to process of managing a material through a special process where the payment to supplier is withheld until the materail or service is consumed by the buyer.
		thirdParty refers to vendor from which a material is ordered.
		
	requestedShipmentDate
		The ship date requested by the buyer for the item

-->
<!ELEMENT ItemOut (ItemID, Path?, (ItemDetail|BlanketItemDetail)?, (SupplierID | SupplierList)?, ShipTo?, Shipping?,
                   Tax?, SpendDetail?, Distribution*, Contact*, TermsOfDelivery?, Comments?, Tolerances?, ControlKeys?,
				   ScheduleLine*,(MasterAgreementReference | MasterAgreementIDInfo)?,  ItemOutIndustry?, Packaging*, ReleaseInfo?,  Batch?)>
<!ATTLIST ItemOut
    quantity               %r8;           #REQUIRED
    lineNumber             %uint;         #IMPLIED
    requisitionID          %string;       #IMPLIED
    agreementItemNumber	   %string;       #IMPLIED
    requestedDeliveryDate  %date;         #IMPLIED
    isAdHoc                (yes)          #IMPLIED
    parentLineNumber       %uint;         #IMPLIED
    itemType               %lineItemType; #IMPLIED
    requiresServiceEntry    (yes)          #IMPLIED
    confirmationDueDate    %date;         #IMPLIED
    compositeItemType      %compositeItemType;	#IMPLIED
    itemCategory           (subcontract | consignment | thirdParty)       #IMPLIED
	requestedShipmentDate  %datetime.tz;  #IMPLIED
>


<!--
    The representation of the release information of a line item

    releaseType
        a string value to identify the type of release.  The value will be either jit or forecast
    cumulativeReceivedQuantity
        a number value to identify the cumulative quantity of all goods receipts against the scheduling agreement over a period up to a certain date
    materialGoAheadEndDate
        Date denoting the end of the material go-ahead period (go-ahead for purchase of input materials)
    productionGoAheadEndDate
        Date denoting the end of the production go-ahead period
-->
<!ELEMENT ReleaseInfo (UnitOfMeasure, ShipNoticeReleaseInfo?, Extrinsic*)>
<!ATTLIST ReleaseInfo
    releaseType                 (forecast | jit)  #REQUIRED
    cumulativeReceivedQuantity  %r8;              #REQUIRED
    productionGoAheadEndDate    %datetime.tz;     #IMPLIED
    materialGoAheadEndDate      %datetime.tz;     #IMPLIED
>

<!--
    The ShipNoticeReleaseInfo will be used to reference a ship notice created from a scheduling agreement release. 

    receivedQuantity 
        Quantity received by the buyer for the referenced ship notice
-->
<!ELEMENT ShipNoticeReleaseInfo ((ShipNoticeReference|ShipNoticeIDInfo), UnitOfMeasure)>
<!ATTLIST ShipNoticeReleaseInfo
    receivedQuantity            %r8;              #REQUIRED
>


<!--
    The representation of a line item as it needs to be for sending to a
    buyer.

    quantity
        How many items are desired.
    lineNumber
        Position (counting from 1) of this item in an order.  Used to
        maintain a reference between items in create and update OrderRequest
        documents.
    parentLineNumber
	    Position of the parent line item. Used to create a nesting structure for line items.
    itemType 
    	specify whether the line item contains child line items or acts as a child item
	compositeItemType
		specify type of parent line item(lot/box)
	itemClassification
        Specifies whether the current line item is material or service.
	    Valid values are material and service.
-->
<!ELEMENT ItemIn (ItemID, Path?, ItemDetail, (SupplierID | SupplierList)?, ShipTo?, Shipping?, Tax?, SpendDetail?,
                   Distribution*, Contact*, Comments?, BillTo?)>
<!ATTLIST ItemIn
    quantity         %r8;           #REQUIRED
    lineNumber       %uint;         #IMPLIED
    parentLineNumber %uint;         #IMPLIED
    itemType         %lineItemType; #IMPLIED
    compositeItemType      %compositeItemType;	#IMPLIED
    itemClassification     %serviceItemType;	#IMPLIED
>

<!--
Defines SubcontractingComponent  information.

ComponentID
An identifier for a subcontracting component within the procurement process

Description
Description of subcontracting component

Product
It contains product information of subcontracting component (such as buyer product id, supplier product id, standard product id, internal product id…etc.)

ProductRevisionID
An identifier that is assigned when changes are made to component

Batch
An element carrying a batch information for material or goods  produced in a single manufacturing run (such as buyer/supplier batch id, production date, property valuation…etc.)

UnitOfMeasure
Unit of measure code

quantity
Quantity of the subcontracting component required to produce the finished goods in a unit of measurement

requirementDate
Specifies the date on which the requested quantity of subcontracting component is required
-->
<!ELEMENT SubcontractingComponent (ComponentID, UnitOfMeasure, Description?, Product?, ProductRevisionID?, Batch?)>
<!ATTLIST SubcontractingComponent
quantity          	%r8;           		#REQUIRED
requirementDate  	%datetime.tz;  		#IMPLIED
>

<!--
    Defines Schedule Line information.

    quantity
        Quantity of items to be shipped for this schedule line.         

    requestedDeliveryDate
        Date that the specified quantity is expected to be delivered. 
		
	lineNumber
        Line identifier for a specific schedule line.

    UnitOfMeasure
        Unit of Measure for specified quantity.
		
	deliveryWindow
		Duration of time in which the quantity is expected to be delivered.

    SubcontractingComponent
        Contains detailed information about a subcontracting component which is used to manufacture the finished goods

	requestedShipmentDate
		The ship date requested by the buyer for the schedule line
-->
<!ELEMENT ScheduleLine (UnitOfMeasure, ScheduleLineReleaseInfo?, SubcontractingComponent*, Extrinsic*)>
<!ATTLIST ScheduleLine
    quantity               %r8;           #REQUIRED
    requestedDeliveryDate  %datetime.tz;  #REQUIRED
	lineNumber  		   %uint;  		  #IMPLIED
	deliveryWindow         %duration;     #IMPLIED
	requestedShipmentDate  %datetime.tz;  #IMPLIED
>

<!--
    Defines release information on schedule line.

    commitmentCode
        String value to identify the type of the delivery. The value will be
	firm – go ahead for production. Vendor can ship against the schedule line and customer is 
		responsible for cost of production as well as cost of material procurement 
	tradeoff – go ahead for material procurement. Vendor can ship against the schedule 
		line if rule is enabled. Buyer is responsible for cost of material procurement
	forecast – informational. Customer can change the schedule line without incurring any
		liabilities  with the vendor

    cumulativeScheduledQuantity
        Total quantity to be shipped for a particular line item up through the schedule line
-->

<!ELEMENT ScheduleLineReleaseInfo (UnitOfMeasure)>
<!ATTLIST ScheduleLineReleaseInfo
    commitmentCode              (firm | tradeoff | forecast)  #REQUIRED
    cumulativeScheduledQuantity %r8;                          #REQUIRED
>




<!--
    StatusUpdate for Confirmation (type=RequestToPay) request.

    transactionTimestamp
        time when the XMLPay transaction was submitted

    transactionID
        an identifier assisgned to the transaction by the payment processing gateway

    authorizationID
        the authorization code for the transaction provided by the bank

    isFailed
        should have a status code greater than zero.  Zero implies a successful transaction.
-->
<!ELEMENT PaymentStatus (PCard, Total, Shipping?, Tax?, Extrinsic*)>
<!ATTLIST PaymentStatus
    orderID    %string;    #REQUIRED
    transactionTimestamp    %datetime.tz;    #REQUIRED
    type    (Authorization| Settlement| Sale| Credit)    #REQUIRED
    isFailed   (yes)    #IMPLIED
    transactionID    %string;    #IMPLIED
    authorizationID    %string;    #IMPLIED
>

<!--
	Partial amount paid against an InvoiceDetail request. Used in InvoiceStatus.
	If this element exists in an InvoiceStatus element, it should mean that the buyer
	does not pay the full amount as the InvoiceDetail request specified. 
-->
<!ELEMENT PartialAmount (Money)>

<!--
	StatusUpdate for InvoiceDetail request.

        InvoiceIDInfo
        	ID of an invoice known to the supplier system. This attribute is used to reference an invoice in StatusUpdateRequest when DocumentReference is omitted.

	PartialAmount
		The partial amount paid against the InvoiceDetail document.  This attribute is
		only relevant when the status type is "paid".

	Comments
		Comments associated with the status update.

	type
		Type of the invoice status. 
                    processing - The invoice is received and being processed.
                    canceled - The invoice has been canceled.
                    reconciled - The invoice is reconciled. 
                    rejected - The invoice is rejected.
                    paying - The invoice is being paid. 
                    paid - The InvoiceDetail request is paid.  
-->

<!ELEMENT InvoiceStatus (InvoiceIDInfo?, PartialAmount?, Comments*)>
<!ATTLIST InvoiceStatus
	type	(processing | canceled | reconciled | rejected | paying | paid) #REQUIRED
>
	
<!-- OrderRequest* Elements -->
<!--  
  Specifies the earliest date when either the supplier can deliver the goods or when the receiver is able to handle incoming shipments, 
  and  the latest date when either the supplier can deliver the goods OR until the receiver is able to handle incoming shipments. 
-->
<!ELEMENT DeliveryPeriod (Period)>

<!--
    Definition of an order.  This is the data that is sent to the supplier
    to have them place an order in their order management system. The new
    world order equivalent of a PO.
-->
<!ELEMENT OrderRequest (OrderRequestHeader, ItemOut+)>

<!--
    Header of an order.  This is the data that is sent to the supplier
    to have them place an order in their order management system. Money
    represents the total amount of this order.

    orderID
        The buyer system orderID for this request.  This is an internal
        Buyer unique number.

    orderVersion
        The buyer system order version number for this request. Relevant when
        the OrderRequest represents a change order request. The version number
        for the original document should be 1 and should be incremented by 1 for
        each subsequent version (2,3,4...).

    isInternalVersion
        A value of yes indicates that this OrderRequest is a version whose changes from
        the previous version are deemed internal to the buyer system. Relevant when the
        version being sent to the supplier is not the first version.

    orderDate
        The date and time the order request was created.

    type
        The type of the order request. Defaults to "new".

    requisitionID
        The buyers system requisition id for this entire order. It might be
        the same as orderID, and it might not be included at all.  Must not
        be included if requisitionID is specified in any ItemOut elements.

    shipComplete
        Optional preference for "hold until complete" processing.  Defaults
        to shipping when available if not specified.  Future versions of the
        protocol may extend the datatype of this attribute to include
        additional possible values (such as "unlessGreatlyBackOrdered"?).

    orderType
        "release", indicates that this is a Release Order from an existing
	Master Agreement/ Contract. Default is regular. Type "blanket" indicates
	that this order is a Blanket Order.
    releaseRequired
	"yes" if the blanket order allows released. Currently used only if 
	orderType is "blanket".
    effectiveDate
	Date the order is available for ordering. If orderType is "blanket", 
	effectiveDate is required. Otherwise it is optional. Currently only
	used with blanket orders.
    expirationDate
	Date the order is no longer available. If not defined, end date is open
	ended. Currently only used with blanket orders.
    agreementID
        Identifies associated agreement corresponding to the Release Order.
	At an implementation level it has to be validated that if the orderType
	is 'release' then the appropriate agreementID is also provided.
    agreementPayloadID
        Optional PayloadID for the corresponding Master Agreement.

    parentAgreementID
	Used only in the context of a Order of type "blanket". This identifies the
	parent blanket order if the current order is part of an hierarchy.

    parentAgreementPayloadID
        Optional PayloadID for the corresponding Master Agreement.
        
    pickUpDate
  	Specifies the date when the goods can be/will be provided for picking up and delivery

    requestedDeliveryDate
	The requested delivery date reflects the time when the buyer is willing to receive the goods.

    Total 
	If the Order is of type "blanket", the Total element is not used to compute
	the sum of the item level subtotals. The total is used to indicate the maximum
	commitment with the supplier. The total will not add upto the individual item
	level sub total or MaxAmounts. The item level MaxAmounts should not exceed the
	header level total. If the item level MaxAmount is not specified it is assumed
	that the Item level maximum amount is the same as the Total.
    
     DeliveryPeriod
     	Start and end date for the delivery.
     	
     IdReference
       ID reference is Within the application context (for example,
a certain pair of buyer and supplier), 
       the (identifier, domain) pair
 should be unique.
 
	OrderRequestHeaderIndustry
	Industry specific header information  

    The contained DocumentReference element would appear in a document only
    when the type is "update" or "delete".  In that case, the
    DocumentReference would reference the most recent OrderRequest document
    for the order.  For example when an order is created, updated and then
    deleted, the final document should contain a DocumentReference
    referring to the OrderRequest with type="update".  That document would,
    in turn, refer to the original (type="new") OrderRequest document.
-->
<!ELEMENT OrderRequestHeader (Total, ShipTo?, BillTo, Shipping?, Tax?,
                              Payment?, PaymentTerm*, Contact*, Comments?, Followup?, ControlKeys?,
                              DocumentReference?, SupplierOrderInfo?,  TermsOfDelivery?, DeliveryPeriod?, IdReference*, OrderRequestHeaderIndustry?, Extrinsic*)>
<!ATTLIST OrderRequestHeader
    orderID    %string;        #REQUIRED
    orderDate  %datetime.tz;   #REQUIRED
    orderType  (release| regular | blanket) "regular"
    releaseRequired (yes) #IMPLIED
    type       (new | update | delete)  "new"
    orderVersion %number;      #IMPLIED
    isInternalVersion  (yes)   #IMPLIED
    parentAgreementID %string;       #IMPLIED
    parentAgreementPayloadID %string; #IMPLIED
    effectiveDate  %datetime.tz;     #IMPLIED
    expirationDate %datetime.tz;    #IMPLIED
    agreementID %string;       #IMPLIED
    agreementPayloadID %string; #IMPLIED
    requisitionID   %string;   #IMPLIED
    shipComplete    (yes)      #IMPLIED
    pickUpDate    %datetime.tz;   #IMPLIED
    requestedDeliveryDate     %datetime.tz;   #IMPLIED
>
<!--
    Definition of a Master Agreement.  This is the electronic document representing the 
    Master Agreement that was created and agreed upon in the Buying organizations.
-->
<!ELEMENT MasterAgreementRequest (MasterAgreementRequestHeader, AgreementItemOut*)>

<!--
   Header of an Agreement.  This is the header level information in the Agreement.
   agreementID
	 The buyer system agreementID for this request.  the Master Agreement Number in Buyer.
   agreementDate
	 The date and time the agreement request was created. 
	 This is different from the effective and expiry date of the agreement.
   agreementType
	 Identifies if this is a Value based agreement or quantity based Agreement.
   requestType
	 The type of the agreement request. Defaults to "new".
   effectiveDate
         Date the Master Agreement is available for ordering/releases.
   expirationDate
         Date the Master Agreement is no longer available.
   parentAgreementPayloadID
	 PayloadID for the corresponding parent document that this agreement is derived from.
   operation: 
	"delete" operation will be used to cancel an existing Master Agreement, the
	 assumption here is that the delete request will be an exact replica of the 
	 original request.
	 "new" operation identifies a new MasterAgreement transaction.
	 "update" operation identified an update to an existing transaction. 
	 the DocumentReference attribute should be used to indicate the Orignal
	 Document information.
   Note: 
	 Use "Contact" element to supply any additional Address or Location information.
-->

<!ELEMENT  MasterAgreementRequestHeader (MaxAmount?, MinAmount?, 
					 MaxReleaseAmount?, MinReleaseAmount?, 
					 Contact*,Comments?, DocumentReference?,  Extrinsic*)> 
<!ATTLIST MasterAgreementRequestHeader
    agreementID    %string;		   #REQUIRED
    agreementDate  %datetime.tz;	   #REQUIRED
    type	   (value | quantity)	   "value"
    effectiveDate  %datetime.tz;	   #REQUIRED
    expirationDate %datetime.tz;	   #REQUIRED
    parentAgreementPayloadID %string;      #IMPLIED
    operation      (new | update | delete) "new"
>

<!--
    The representation of a  agreement line item as it needs to be for sending to a
    supplier.
    maxQuantity 
          maximum quantity for this particular lineItem
    minQuantity 
          minimum quantity for this particular lineItem
    maxReleaseQuantity 
          maximum quantity per release for this particular lineItem
    minReleaseQuantity 
          minimum quantity per release for this particular lineItem

    Note :
	  The #lineNumber attribute in the <ItemOut> will be used to specify the corresponding 
	  lineNumber on the Master Agreement in the Procurement Application.
	  At an implementation, level checks should be made to validate this.
    Note :
	  The quantity attribute in the ItemOut tag should be set to one and ignored at 
	  the Mater Agreement implementation processing stage. 
    Note :
	  The MaxReleaseAmount/Quantity and MinReleaseAmount/Quantity at an item level i
	  indicate the ItemLevel amounts and quantities per release.
-->
<!ELEMENT AgreementItemOut (MaxAmount?, MinAmount?, MaxReleaseAmount?, MinReleaseAmount?, ItemOut)>
<!ATTLIST AgreementItemOut
   maxQuantity		%r8;      #IMPLIED
   minQuantity		%r8;      #IMPLIED
   maxReleaseQuantity	%r8;      #IMPLIED
   minReleaseQuantity	%r8;      #IMPLIED
>

<!--
    The maximum amount  for something.
-->
<!ELEMENT MaxAmount (Money)>

<!--
    The minimum amount  for something.
-->
<!ELEMENT MinAmount (Money)>

<!--
    The contractual maximum amount per Release of this Master Agreement.
-->
<!ELEMENT MaxReleaseAmount (Money)>

<!--
 The contractual minimum amount per Release of this Master Agreement
-->
<!ELEMENT MinReleaseAmount (Money)>


<!--
    The maximum quantity  for something.
-->
<!ELEMENT MaxQuantity (#PCDATA)> <!-- number -->

<!--
    The minimum quantity  for something.
-->
<!ELEMENT MinQuantity (#PCDATA)> <!-- number -->

<!--
    The contractual maximum quantity per Release of a contract.
-->
<!ELEMENT MaxReleaseQuantity (#PCDATA)> <!-- number -->

<!--
    The contractual minimum quantity per Release of a contract.
-->
<!ELEMENT MinReleaseQuantity (#PCDATA)> <!-- number -->


<!-- Followup

     Location to which future StatusUpdateRequest documents should be
     posted.  In general, this is the input location for any later
     documents which reference the current OrderRequest document.
-->
<!ELEMENT Followup (URL)>

<!-- PunchOut* Elements -->
<!--
    Definition of a PunchOut Setup Request.  This is the data that is sent
    to the external system that the procurement application is going to
    extract catalog data from.

    The BrowserFormPost element contains the URL we would like the browser
    re-directed to when the PunchOut shopping experience is finished (where
    the PunchOutOrder message should be returned).
-->
<!-- PurchaseRequisitionRequest* Elements -->
<!--
    Definition of Purchase Requisition.  This is the data that is sent from the Buyer
    to another buyer system.
-->
<!ELEMENT PurchaseRequisitionRequest (PurchaseRequisition)>

<!ELEMENT PurchaseRequisition (PurchaseRequisitionHeader, ItemIn*)>

<!--
    Header of an Purchase Requisition.  

    requisitionID
        The buyer system requisitionID  for this request.  This is an internal
        Buyer unique number.

    requisitionVersion
        The buyer system requisition version number for this request. Relevant when
        the PurchaseRequisitionRequest represents a change Requisition request. The version 
        number for the original document should be 1 and should be incremented by 1 for
        each subsequent version (2,3,4...).

    requisitionDate
        The date and time the Requisition request was created.

    type
        The type of the Requisition request. Defaults to "new".

       
    The contained DocumentReference element would appear in a document only
    when the type is "update" or "delete".  In that case, the
    DocumentReference would reference the most recent PurchaseRequisitionRequest document
    for the order.  For example when an requisition is created, updated and then
    deleted, the final document should contain a DocumentReference
    referring to the PurchaseRequisitionRequest with type="update".  That document would,
    in turn, refer to the original (type="new") PurchaseRequisitionRequest document.
-->

<!ELEMENT PurchaseRequisitionHeader (Shipping?, Tax?, Total?, ShipTo?, BillTo?, Contact*, Comments?,
                                     DocumentReference?, Extrinsic*)>
<!ATTLIST PurchaseRequisitionHeader
   requisitionID %string;        #IMPLIED
   requisitionDate %datetime.tz;   #IMPLIED
   type       (new | update | delete)  "new"
   requisitionVersion %number;      #IMPLIED
>

<!ELEMENT PunchOutSetupRequest (BuyerCookie, Extrinsic*, BrowserFormPost?,
                                Contact*, SupplierSetup?, ShipTo?,
                                SelectedItem?, ItemOut*)>
<!ATTLIST PunchOutSetupRequest
    operation  (create | inspect | edit | source)  #REQUIRED
>

<!ELEMENT BuyerCookie ANY> <!-- any valid XML data -->

<!ELEMENT SelectedItem (ItemID)>
<!ELEMENT SupplierSetup (URL)>

<!ELEMENT PunchOutSetupResponse (StartPage)>

<!--
    Definition of a PunchOut Order Message.  This is the data that is sent
    back to the procurement application from the external system that the
    PunchOut Request was targeted at.
-->
<!ELEMENT PunchOutOrderMessage (BuyerCookie, PunchOutOrderMessageHeader,
                                ItemIn*)>

<!--
     Header of a PunchOut Order Request.  This is the data that is sent from
     the supplier to transfer the supplier acquired shopping basket back to
     the buyer system.

     operationAllowed
          Highest operation allowed on the PunchOut shopping basket.
          "create" allows only later OrderRequest operations on these items.
          "inspect" adds a PunchOutSetupRequest with operation="inspect".
          And, "edit" allows operation="edit" in that later Setup request.

     quoteStatus 
          "pending"  - Identifies that the transaction is still pending
	  "final" - Identifies that the transaction is complete
-->
<!ELEMENT PunchOutOrderMessageHeader (SourcingStatus?, Total, ShipTo?, Shipping?, Tax?, SupplierOrderInfo?)>
<!ATTLIST PunchOutOrderMessageHeader
    operationAllowed  (create | inspect | edit)  #REQUIRED
    quoteStatus (pending|final) "final"
>

<!-- ====
    Other small Request elements.
==== -->

<!--
    Request to update the status of an earlier transaction.

    DocumentReference 
        A reference by payloadID to a cXML document to be updated.  This 
        element can be omitted only when InvoiceStatus is specified and
        the InvoiceStatus contains InvoiceIDInfo.

-->
<!ENTITY % cxml.statuses  "(PaymentStatus |
			    SourcingStatus | InvoiceStatus | DocumentStatus)">
<!ELEMENT StatusUpdateRequest  (DocumentReference?, Status, (%cxml.statuses;)?, Extrinsic*)>

<!--
    Status Update for Document Status

        DocumentInfo
            ID of a document entry known to the system. This attribute is used to reference a document in StatusUpdateRequest when DocumentReference is omitted.

    Comments
        Comments associated with the status update.

    type
        Type of the document status.
-->

<!ELEMENT DocumentStatus (DocumentInfo?, ItemStatus*, Comments*)>
<!ATTLIST DocumentStatus
        type              %string;               #REQUIRED
        >

<!--
  When a StatusUpdateRequest is send with a DocumentStatus, then you could send more detailed information about the original item.

  type
        Specifies which kind of status that item should have. Possible values are:
        	rejected - that item was not accepted
        	accepted - original ConfirmationItem is accepted as it was send

  code
        optional code from the backend ERP system

  ReferenceDocumentInfo
        contains details of referenced document
		
  Comments
        may be used to have a more user readable description of the code
-->
<!ELEMENT ItemStatus (ReferenceDocumentInfo, Comments*)>
<!ATTLIST ItemStatus
	type        %string;  #REQUIRED
	code        %string;  #IMPLIED
>

<!--
    Defines the ID of a document known to the system.

    DocumentID
        The id of a document known to the system.

    DocumentType
        The document type.

    DocumentDate
        The document date.
-->
<!ELEMENT DocumentInfo EMPTY>
<!ATTLIST DocumentInfo
        documentID              %string;               #REQUIRED
        documentType            %string;               #REQUIRED
        documentDate            %datetime.tz;          #IMPLIED
        >

<!--
    A reference to an attachment containing cXML document. 

    Attachment
        A reference to the attachment containing a cXML document.  The 
        attachment must be either a single, complete cXML document or another 
        MIME envelope containing a single, complete cXML document with 
        attachments.
-->
<!ELEMENT cXMLAttachment (Attachment)>

<!--
    Request to forward a cXML document to another party.  This Request
    occurs in multiple DTD files and is used depending on where (in which
    DTD) the forwarded message resides.

    cXMLAttachment
        A reference to the attachment containing the cXML document being 
        forwarded.  Refer to cXMLAttachment for more details.

    cXML
        Deprecated - Do Not Use.
-->
<!ELEMENT CopyRequest (cXMLAttachment | cXML)>

<!--
    Attribute processingMode of CopyRequest element specifies whether the
    cXML document is meant for processing, information only or copy.

    info : The cxml document is for information only
    process : The recipient of the cxml document should process the document.
    copy : the cxml document is a copy as a result of Path element with copy type in the source document.
-->
<!ATTLIST CopyRequest
    processingMode (info | process | copy)  #IMPLIED>

<!--
    Status for a pre-existing sourcing transaction. The textual content indicates
    the display information. "action" attribute defines the context of this message
    based on the value.

    approve : Approve the pending transaction
    deny : deny pending transaction
    cancel : cancel any preexisting transaction.

-->
<!ELEMENT SourcingStatus (#PCDATA)>
<!ATTLIST SourcingStatus
action    (approve | cancel | deny )  #IMPLIED
xml:lang %xmlLangCode; #REQUIRED>

<!--
    How the shipment will travel on this segment.  Each carrier within a
    segment controlled by a third party logistics provider provides
    tracking information to that provider externally.  The
    ShipNoticeRequest includes tracking information at the ShipControl
    level only.

    One Route element may describe only a single mode of travel.  If
    described at all, each mode of a multi-modal route must be described by
    a separate Route element.  It is not necessary to describe every leg of
    the journey to the buyer's ShipTo location.

    The only Contact roles likely to be sensible in this element are
    "carrierCorporate" (details the contact information the supplier has
    about the carrier organization), "shipFrom" and "shipTo".  The
    "carrierCorporate" role would be relevant at this level only when a
    third party is providing tracking information across multiple carriers.
    A Contact element with role "shipFrom" must appear in all Route
    elements after the first.  Route elements are not required to describe
    the entire travel under a specific carrier's control.  They may
    describe a discontinuous stream of events, starting and ending at
    different times and locations.

    Elements in the Contact list may appear in any order.  A contact role
    (Contact@role attribute value) must not appear more than once within a
    Route element.

    method
        Qualifier identifying the transportation type code:
        air - transportation by flight
        motor - transportation by land motor craft (common carrier)
        rail - transportation by rail
        ship - transportation by boat (ocean)
    startDate
        The date and time this shipment started this part of the trip.
        Required in all Route elements after the first.
    endDate
        The date and time this shipment ended this part of the trip.  Must
        be after startDate.  If any Route elements follow, the startDate of
        that element must not precede this value.
-->
<!ELEMENT Route (Contact*)>
<!ATTLIST Route
    method         (air | motor | rail | ship) #REQUIRED
    startDate            %datetime.tz;         #IMPLIED
    endDate              %datetime.tz;         #IMPLIED
>

<!--
    Additional information for transportation of the shipment.
    
    Description
        Free text description of shipment instructions.
-->
<!ELEMENT ShippingInstructions (Description?)>

<!--
    The shipping contract number specified for the transportation of the shipment.
    
    #PCDATA
        The contract number specified by the buyer or seller for the transport. 
-->
<!ELEMENT ShippingContractNumber (#PCDATA)>

<!--
    The terms for transportation of the shipment. This specifies that to whom amongst the buyer and seller
    the title, risk and insurance cost will pass to.
    
    value
        The terms of transportation.
        Typically this may be Free-Carrier, CostAndFreight, DeliveredAtFrontier etc. or an option to specify a free text.
        If the value of this attribute is specified as other, specifying
        a description is mandatory.
    #PCDATA
        Free text description of means of transportation. The text desription must be
        provided if the value "Other" is specified.

-->
<!ELEMENT TransportTerms (#PCDATA)>
<!ATTLIST TransportTerms
    value %string; #REQUIRED
>

<!--
    The transport information for the shipment described by the order 
    and ship notice. This information comes from the order 
    specified by the buyer and have to be presented in the ship notice
    so that these can be edited by supplier, if required. This information
    and possible changes have to be carried back to the buyer.

    Route
        The method or type of transportation of the shipment.
    ShippingContractNumber
        Contract number for the transport specified by the buyer or seller.
    ShippingInstructions
        Optional instructions for the shipment.
-->
<!ELEMENT TransportInformation (Route?, ShippingContractNumber?, ShippingInstructions?)>

<!--
    The mode of payment for order items shipped. This element is mandatory for 
    specifying terms of delivery.

    value
        The shipping payment method used for the order. Possible values include the following -
        Account, AdvanceCollect, AdvancePrepaid, Other etc.
    #PCDATA
        Free text description of shipping payment method. The text desription must be
        provided if the value "Other" is specified.
-->
<!ELEMENT ShippingPaymentMethod (#PCDATA)>
<!ATTLIST ShippingPaymentMethod
    value %string; #REQUIRED
>

<!--
    This element specifies the terms of delivery code. The free text description is optional
    for an order or a ship notice except for the case when "Other" is specified for value.
    
    value
        The value of the code that specifies terms of delivery. 
        Indicates whether the terms relate to price conditions, delivery conditions, 
        transport conditions, or a combination of these, or any other.
        If the value of this attribute is specified as other, specifying
        a description is mandatory. Possible values include the following -
        PriceCondition, DespatchCondition, PriceandDespatchCondition, CollectedByCustomer, 
        TransportCondition, DeliveryCondition, Other etc.
    #PCDATA
        Free text description of terms of delivery code. The text desription must be
        provided if the value "Other" is specified.

-->
<!ELEMENT TermsOfDeliveryCode (#PCDATA)>
<!ATTLIST TermsOfDeliveryCode
    value %string; #REQUIRED
>
 
<!--
    The terms of delivery for the shipment described by the order 
    and ship notice. These terms come from the Purchase Order 
    specified by the buyer and have to be presented in the ship notice
    so that these can be edited by supplier, if required. These terms
    and possible changes have to be carried back to the buyer.

    TermsOfDeliveryCode
        The code that specifies terms of delivery. Indicates whether the terms relate to price conditions, 
        delivery conditions, transport conditions, or a combination of these, or any other.
        One must specify description for this if "Other" is specified as the value.
    ShippingPaymentMethod
        The mode of payment for order items shipped. Specifying a mode of payment is a must. Examples include:
        Account, AdvanceCollect, AdvancePrepaid etc.
    TransportTerms
        This specifies that to whom amongst the buyer and seller the title, risk and insurance cost will pass to.
    Address
        Location and city specified with the terms.
    Comments
        Optional structured comments can be specified here for multiple types:
        Type "Transport"
            Additonal description of the transport. Examples include:
            "Delivered To Site / Stores", "OVERNIGHT FIRST CLASS", "To Be Collected by Courier" etc.
        Type "TermsOfDelivery"
            Additonal delivery instructions can be provided along with
            the other terms.
-->
<!ELEMENT TermsOfDelivery (TermsOfDeliveryCode, ShippingPaymentMethod, TransportTerms?, Address?, Comments*)>

<!--
	SealID
		A seal is used to preserve integrity of a transport or cargo shipment. Seals come in different versions and technical approaches with one common characteristic: a unique ID given by the owner or the responsible party. The SealID is used to internationally track a container, truck, vessel or other cargo property along the route.
-->
<!ELEMENT SealID (#PCDATA)>
<!--
	SealingPartyCode
		Is the company code for the party that has given the seal in its ID (usually the owner of the goods or the freight forwarder that loaded the cargo.
-->
<!ELEMENT SealingPartyCode (#PCDATA)>
<!--
	EquipmentIdentificationCode
		Mainly for internal transport and storage purposes the packing equipment is or will be marked with unique codes in order to monitor and manage movement and storage location. Coding can be temporarily or permantent (with GUID-like codes or RFID coding, but unique within the local addressing scheme.
-->
<!ELEMENT EquipmentIdentificationCode (#PCDATA)>
<!--
    The terms for transportation of the shipment. 

	SealID
		A seal is used to preserve integrity of a transport or cargo shipment. Seals come in different versions and technical approaches with one common characteristic: a unique ID given by the owner or the responsible party. The SealID is used to internationally track a container, truck, vessel or other cargo property along the route.
	
	SealingPartyCode
		Is the company code for the party that has given the seal in its ID (usually the owner of the goods or the freight forwarder that loaded the cargo.
	
	EquipmentIdentificationCode
		Mainly for internal transport and storage purposes the packing equipment is or will be marked with unique codes in order to monitor and manage movement and storage location. Coding can be temporarily or permantent (with GUID-like codes or RFID coding, but unique within the local addressing scheme.
-->
<!ELEMENT TermsOfTransport (SealID?, SealingPartyCode?, EquipmentIdentificationCode?, TransportTerms?, Dimension*, Extrinsic*)>

<!--
	For information of referenced document.

	DocumentInfo
	The element provides info (such id, type and date) about a document. 
	Following are the possible document types:
	salesOrder refers to sales order triggering the PO.
	customerOrder refers to  the customer order maintained in sales order.
	freightOrder refers to order for transportation.
	productionOrder refers to order that specifies  which material is to be produced, where it is to be produced, which operations are 
					required to do this  and on which date production is to take place. It also defines how the order costs are to be settled.

	DocumentReference
	Reference to an earlier document (for example, OrderRequest).  

	DateInfo
	Information of date associated with the document/item.  Following are the possible dates:
	expectecDeliveryDate refers to the expected delivery date for the material to be received at the partner location
	expectedShipmentDate refers to the expected ship date for the material is used to determine when the supplier is expected to ship the material from their location.
	productionStartDate refers to the production start date
	productionFinishDate refers to the production finish date

	Contact
	It is used for contact information for the referenced document

	lineNumber
	Line number of an item in the referenced document

	status
	status used to refer to the referenced document.  Following are the possible values.
	created
	released
	open
	completed
	closed
	cancelled
-->
<!ELEMENT ReferenceDocumentInfo ((DocumentInfo | DocumentReference)?, DateInfo*, Contact*, Extrinsic*)>
<!ATTLIST ReferenceDocumentInfo
	lineNumber  %uint;                   #IMPLIED      
	status (created | released | open | completed | closed | cancelled )     #IMPLIED                       
>

<!--
	For information of date.

	type 
	Date type
	expectecDeliveryDate refers to the expected delivery date for the material to be received at the partner location
	expectedShipmentDate refers to the expected ship date for the material is used to determine when the supplier is expected to ship the material from their location.
	productionStartDate refers to the production start date
	productionFinishDate refers to the production finish date

	date
	Date value
-->
<!ELEMENT DateInfo (Extrinsic*)>
<!ATTLIST DateInfo
	type	(expectedDeliveryDate | expectedShipmentDate | productionStartDate | productionFinishDate )	#REQUIRED
	date	%datetime.tz;				#REQUIRED
>

<!--
	Priority
	Priority indicator, used to drive the priority of the orders for the suppliers.
	Example:
	Level 1 is Very High Priority
	Level 2 is High Priority 
	Level 3 is Medium Priority
	Level 4 is Medium Low Priority
	Level 5 is Low Priority

	Description
	Description for priority (such as very high, high, medium, medium low, low).

	level
	There are 5 levels (1, 2, 3, 4, 5).  Level 1 has the highest priority.  Level 5 has the lowest priority.
-->
<!ELEMENT Priority (Description?)>
<!ATTLIST Priority
	level     ( 1 | 2 | 3 | 4 | 5  )  #REQUIRED
>

<!--
	Industry specific header information  

	ReferenceDocumentInfo 
	Details of referenced document 

	Priority
	Priority indicator, it is used to drive the priority of the orders for the suppliers
-->
<!ELEMENT OrderRequestHeaderIndustry (ReferenceDocumentInfo*, Priority?)>

<!--   Industry specific item information 
	ReferenceDocumentInfo 
	It contains the details of referenced document

	Priority
	Priority Indicator used to drive the priority of the item ordered by the buyer.

	planningType
	To specify different production planning strategies. Following are possible strategies:
	MTO: Make to Order
	MTS: Make to Stock
-->
<!ELEMENT ItemOutIndustry (ItemOutRetail?, ReferenceDocumentInfo*, Priority?)>
<!ATTLIST ItemOutIndustry
    planningType	 ( MTO | MTS  )	#IMPLIED
>

<!--    Retails industry item information 
	PromotionVariantID
	Used when only one or some variants of an article are promoted

	PromotionDealID 
	Number assigned by a supplier to a special promotion activity. Promotions affect the forward planning/ordering process (and the related pricing)
-->
<!ELEMENT ItemOutRetail (PromotionVariantID?, PromotionDealID?)> 

<!--
    Details about the packaging of this line item.

    Zero or more PackagingCode elements may appear in the Packaging
    element.  Each PackagingCode must contain a single string corresponding
    to the packaging for this item.  When multiple PackagingCode elements
    appear, all must describe the same packaging in different languages or
    locales.  (No two PackagingCode elements may have the same xml:lang
    attribute.)  Elements in such a list may appear in any order.

    The dimensions mentioned in the Dimension element list may appear in
    any order.  A particular dimension (Dimension@type attribute value)
    must not appear more than once in a Packaging element.
    
    	Description
        	The Package description.

	PackagingLevelCode
	Describes the level (inner, outer, intermediate) for packages.
	
	PackageTypeCodeIdentifierCode 
	Unique ID of packaging material. This helps receiving side for unloading and storage.
	
	ShippingContainerSerialCode
	Serial number of a package that helps to identify package during transportation and inventory.
    
    ShippingContainerSerialCodeReference
    Reference from a package with shipping code to the shipping code of the next higher package level. It references the parent ShippingContainerSerialCode.
	
	PackageID
	Package related IDs.
	
	ShippingMark
	Information about packaging proposals and packaging hierarchy.
	
	OrderedQuantity
	The quantity ordered in purchase order.
	
	DispatchQuantity
	The dispatch quantity in package.
	
	FreeGoodsQuantity
	Quantities delivered but not charged. 
	
	QuantityVarianceNote
	Quantity Variance Note gives detailed information about partial delivery.
	
	BestBeforeDate
	Gives the best before date for all goods related to food, drugs, chemicals and others.

-->
<!ELEMENT Packaging (((PackagingCode+, Dimension*) | Dimension+), Description?, 
				PackagingLevelCode?, PackageTypeCodeIdentifierCode?, ShippingContainerSerialCode?, 
                ShippingContainerSerialCodeReference?,
				PackageID?, ShippingMark*, OrderedQuantity?, DispatchQuantity?, 
				FreeGoodsQuantity?, QuantityVarianceNote?, BestBeforeDate?, Extrinsic*)>

<!--
    One language-specific code for the packaging of this item.  Values such
    as "pallet", "skid" and "truck load" may be appropriate (for an
    English-based locale).

    xml:lang
        The language or locale in which the PackagingCode content (the
        value of the code) is written.
-->
<!ELEMENT PackagingCode (#PCDATA)>             <!-- string -->
<!ATTLIST PackagingCode
    xml:lang             %xmlLangCode;         #REQUIRED
>

<!--
    A single dimension for the packaging. It also can be used to define item dimensions.
    quantity
        Size in this dimension.  Expressed in the units given in the UnitOfMeasure element.
    type
        Type of dimension.  Supported values include:
        length - The length of the packaging or item.
        width - The width of the packaging or item.
        height - The height of the packaging or item.
        weight - The weight  or net weight of the packaging or item.
        volume - The volume or net volume of the packaging or item.
        stackHeight -The stack height of packaging. This indicates total height of the stacked packages. 
        grossWeight - The gross weight is the total weight including packaging.
        grossVolume -The gross volume is the total volume including packaging. 
        unitGrossWeight  - The unit gross weight of the item.
        unitNetWeight  -The unit net weight of the item.
-->
<!ELEMENT Dimension (UnitOfMeasure)>
<!ATTLIST Dimension
    quantity             %r8;                        #REQUIRED
    type (length | width | height | weight | volume | stackHeight | grossWeight | grossVolume | unitGrossWeight | unitNetWeight ) #REQUIRED
>


<!-- Describes the level (inner, outer, intermediate) for packages. It is used in logistics for loading and unloading information. This information qualifies the 
packing level within the packing hierarchy. -->

<!ELEMENT PackagingLevelCode (#PCDATA)>

<!-- This is a unique ID of packaging materials like box, container, pallet and rack. This helps receiving side for unloading and storage. This also defines the 
maximum load or weight of articles -->

<!ELEMENT PackageTypeCodeIdentifierCode (#PCDATA)>

<!--This identifies a package during transport and in inventory. Serial number of a packaging unit like container, box and rack -->
<!ELEMENT ShippingContainerSerialCode (#PCDATA)>

<!--
Reference from a package with shipping code to the shipping code of the next higher package level. It references the parent ShippingContainerSerialCode.
-->
<!ELEMENT ShippingContainerSerialCodeReference (#PCDATA)>


<!-- Unique ID for a package.  GIAI, numbering scheme of GS1 specifying the ownership of an asset.-->
<!ELEMENT GlobalIndividualAssetID (#PCDATA)>


<!-- The ID that helps supplier with handling of any returned package.-->
<!ELEMENT ReturnablePackageID (#PCDATA)>

<!-- The information to track packages based on an internal numbering scheme of the supplier. -->
<!ELEMENT PackageTrackingID (#PCDATA)>

<!-- Packaging related IDs.-->
<!ELEMENT PackageID (GlobalIndividualAssetID?,ReturnablePackageID?,PackageTrackingID?)>

<!-- This contains codes for packaging proposals and packaging hierarchy. Also can contain marking for containers/packages that need special signing or handling 
(hazardous goods, explosives and maximum stack size)-->

<!ELEMENT ShippingMark (#PCDATA)>


<!--This is the ordered quantity from purchase order. -->
<!ELEMENT OrderedQuantity (UnitOfMeasure?) >
<!ATTLIST OrderedQuantity
    quantity	%r8;	#IMPLIED>

<!-- The dispatch quantity in package.-->
<!ELEMENT DispatchQuantity (UnitOfMeasure?)  >
<!ATTLIST DispatchQuantity
    quantity        %r8;       #IMPLIED>

<!--  Quantities delivered but not charged. These can be samples or promotions or just "fill up" articles. These will not be on the commercial invoice (or marked with value 0.00)  -->
<!ELEMENT FreeGoodsQuantity (UnitOfMeasure?)  >
<!ATTLIST FreeGoodsQuantity
    quantity        %r8;       #IMPLIED>


<!-- Detailed information about partial delivery. Used for different measurements (1 lot = 500 pieces) -->
<!ELEMENT QuantityVarianceNote (#PCDATA)>

<!-- The best before date helps with in FDA-related deliveries for go/no-go criteria. This can be used to indicate best before date for all goods related to food, drugs, chemicals etc. -->
<!ELEMENT BestBeforeDate EMPTY>
<!ATTLIST BestBeforeDate
      date         %datetime.tz;    #REQUIRED>
      
<!-- The expiry date  can be used to indicate expiry date for all goods related to food, drugs, chemicals etc. -->
<!ELEMENT ExpiryDate EMPTY>
<!ATTLIST ExpiryDate
      date         %datetime.tz;    #REQUIRED>

    
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    For better definitions of these Elements/Entities, refer to the cXML
    Transaction Specification documents.
-->

<!-- Basic financial elements used throughout -->

<!--
    The following defines a list of money amounts.

    DepositAmount
        The amount of deposit or prepayment.

    SubtotalAmount
        The subtotal amount.
        
    DiscountAmount
	Defines the discount amount

    FixedAmount
    Defines a new amount

    SpecialHandlingAmount
        The special handling amount.

    ShippingAmount
        The shipping amount.

    GrossAmount
        The gross amount.

    NetAmount
        The net amount.

    DueAmount
        The due amount.

    FeeAmount
        Defines gross amount of the fee associated with a purchase
        in original currency.
-->
<!ELEMENT DepositAmount (Money)>

<!ELEMENT SubtotalAmount (Money)>

<!ELEMENT SpecialHandlingAmount (Money, Description?)>

<!ELEMENT ShippingAmount (Money)>

<!ELEMENT GrossAmount (Money)>

<!ELEMENT NetAmount (Money)>

<!ELEMENT DueAmount (Money)>

<!ELEMENT DiscountAmount (Money)>

<!ELEMENT FixedAmount (Money)>

<!-- 
    Defines gross amount of the fee associated with a purchase in original currency.
    Money - the fee amount
    Fee
        different types of individual fees, for example, service provider fee 
-->
<!ELEMENT FeeAmount (Money, Fee*)>

<!-- 
    Different types of individual fees
    type - the type of fee
-->
<!ELEMENT Fee (Money)>
<!ATTLIST Fee
    type     %string;  #IMPLIED
>

<!ELEMENT DeductionAmount (Money)>

<!ELEMENT DeductedPrice (Money)>

<!--
    Defines a Purchasing Card element used for payment
-->
<!ELEMENT PCard (PostalAddress?)>
<!ATTLIST PCard
    number      %number;  #REQUIRED
    expiration  %date;    #REQUIRED
    name        %string;  #IMPLIED
>

<!--
    TotalCharges represents the total sum of all the charges  applied on the goods and 
    services. This can appear at the  line item and summary in an invoice.
-->
<!ELEMENT TotalCharges (Money)>

<!--
    TotalAllowances represents the total sum of all the allowances applied on the goods and 
    services. This can appear at the  line item and summary in an invoice.
-->
<!ELEMENT TotalAllowances (Money)>

<!--
    TotalAmountWithoutTax represents the sum of the SubTotal, Charges (including special handling 
    charges and shipping charges), Allowances (including discounts). This does not include taxes.
    This can appear at the  line item and summary in an invoice.
-->
<!ELEMENT TotalAmountWithoutTax (Money)>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    This element captures spend detail information.  SpendDetail can
    be used in the ItemIn and ItemOut and for the following types of
    messages:

        PunchOutSetupRequest
        PunchOutOrderMessage
        OrderRequest
        ConfirmationRequest

    But not for:

        MasterAgreementRequest

    TravelDetail
        Travel details for the current travel line item.

    LaborDetail
        Labor details for the current temporary labor line item.

    FeeDetail
        Fee details for the current fee line item.
        
    Extrinsic
    	Detail information for the any undefined spend category.  The name
    	attribute of the Extrinsic element should specify the type of the
    	spend category (e.g., (PrintDetail, ProjectLaborDetail))

-->
<!ELEMENT SpendDetail (TravelDetail | FeeDetail | LaborDetail | Extrinsic)>

<!--
    FeeDetail contains additional information about a line item for a fee, 
    which may or may not be recurring.

    UnitRate
        The amount(s) to be paid per unit (of time or other measure).
        In the case of multiple UnitRates (i.e., a "rate schedule"), it is
        customary and expected that each UnitRate will include a
        TermReference to distinguish them.

    Period
        The Period of time over which the fee is charged, if applicable.

    isRecurring 
        Indicates that the fee is recurring (charged more than once).
  -->
<!ELEMENT FeeDetail (UnitRate+, Period?) >
<!ATTLIST FeeDetail
	isRecurring (yes) #IMPLIED
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: $
-->

<!--
    LaborDetail contains information about an item for a temporary
    labor engagement. 

    UnitRate
        The amount(s) to be paid per unit (of time or other measure).
        In the case of multiple UnitRates (i.e., a "rate schedule"), it is
        customary and expected that each UnitRate will include a
        TermReference to distinguish them.

    Period
        The Period of time over which the service occurs.

    Contractor
        Identifies the contractor being engaged

    JobDescription
        Description of the job or work to be performed.

    Supervisor
        The person who is expected to supervise the contractor.

    WorkLocation
         Place where the work is expected to be performed.

    supplierReferenceCode
        The supplier's quote or proposal id, for cross-reference.
-->
<!ELEMENT LaborDetail (UnitRate+, Period, Contractor?, JobDescription?, Supervisor?, WorkLocation?, Extrinsic*)>
<!ATTLIST LaborDetail
	supplierReferenceCode %string; #IMPLIED
>
<!--    Text description of a job (service)-->
<!ELEMENT JobDescription (Description)>
<!--    Contact information for the person supervising a job (service)-->
<!ELEMENT Supervisor (Contact)>
<!--    Address of the location where a service is to be performed-->
<!ELEMENT WorkLocation (Address)>
<!--
    	Definition of a Contractor used in the context of temp labor. 
	The contractor is uniquely identified by a contractor identifier. 
	The piece of identification for a contractor is exchanged between 
	the buyer and the supplier prior to sending out order/timecards.
-->
<!--
    	Definition of a Contractor used in the context of temp labor. 
	The contractor is uniquely identified by a contractor identifier. 
	The piece of identification for a contractor is exchanged between 
	the buyer and the supplier prior to sending out order/timecards.
-->
<!ELEMENT Contractor (ContractorIdentifier, Contact)>

<!--
    	Definition of a ContractorIdentifier. uniquely identifies a contractor.
    
	domain
        	in what domain the identity is represented. This is for the
		end systems to know who assigned the id. buyerReferenceID 
		implies that it is something generated by the buyer system 
		and supplierReferenceID implies that it is something generated 
		by the supplier system/entered by the supplier.
-->
<!ELEMENT ContractorIdentifier (#PCDATA)>
<!ATTLIST ContractorIdentifier
        domain     	(supplierReferenceID|buyerReferenceID) #REQUIRED
>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Reference.mod#4 $
-->

<!--
    For better definitions of these Elements/Entities, refer to the cXML
    User's Guide and related documents.
-->

<!--
    The OrderReference element provides a clear reference to a prior
    OrderRequest document.  While the contained DocumentReference provides
    an unambiguous reference, the additional attributes of the
    OrderReference may allow the ConfirmationRequest and ShipNoticeRequest
    to be viewed independently.

    orderID
        The buyer system orderID for this request. Basically, what the PO
        number is today.  If present, must be copied directly from the
        referenced OrderRequest document's OrderRequestHeader.
    orderDate
        The date and time the order request was created.  If present, must
        be copied directly from the referenced OrderRequest document's
        OrderRequestHeader.
-->
<!ELEMENT OrderReference (DocumentReference)>
<!ATTLIST OrderReference
    orderID              %string;              #IMPLIED
    orderDate            %datetime.tz;         #IMPLIED
>

<!--
    Defines the ID of an order known to the buyer system.

    orderID
        The id of an order known to the buyer system.  Basically,
        what the PO number is today.

    orderDate
        The date and time the order was created.
-->
<!ELEMENT OrderIDInfo (IdReference*)>
<!ATTLIST OrderIDInfo
    orderID              %string;               #REQUIRED
    orderDate            %datetime.tz;          #IMPLIED
>

<!--
    Defines information related to an order.

        OrderReference
        The reference to the order being paid.

        OrderIDInfo
        The buyer system order id of the order.
-->
<!ELEMENT OrderInfo (OrderReference | OrderIDInfo)>


<!--
    The InvoiceReference element provides a clear reference to a prior
    InvoiceDetailRequest document.

    invoiceID
        The suplier system invoiceID for this request. Basically, what
        the Invoice number is today.  If present, must be copied
        directly from the referenced InvoiceDetailRequest document's
        InvoiceDetailRequestHeader.

    invoiceDate
        The invoice date.
-->
<!ELEMENT InvoiceReference (DocumentReference)>
<!ATTLIST InvoiceReference
    invoiceID              %string;               #IMPLIED
    invoiceDate            %datetime.tz;          #IMPLIED
>

<!--
    Defines the ID of an invoice known to the supplier system.

    invoiceID
        The id of an invoice known to the supplier system.

    invoiceDate
        The invoice date.
-->
<!ELEMENT InvoiceIDInfo EMPTY>
<!ATTLIST InvoiceIDInfo
    invoiceID              %string;               #REQUIRED
    invoiceDate            %datetime.tz;          #IMPLIED
>

<!--
    Defines the ID of a master agreement known to the buyer system.
    In InvoiceDetailRequest, this element identifies the master agreement
    of the release order to be invoiced.


    IdReference
         Additional reference ID for MasterAgreement.

    agreementID
        The id of a master agreement known to the buyer system.  Basically,
        what the master agreement number is today.

    agreementDate
        The date and time the master agreement request was created.

    agreementType
        The type of the master agreement being referenced, for example: Scheduling Agreement

-->
<!ELEMENT MasterAgreementIDInfo (IdReference*)>
<!ATTLIST MasterAgreementIDInfo
    agreementID              %string;               #REQUIRED
    agreementDate            %datetime.tz;          #IMPLIED
    agreementType            (scheduling_agreement) #IMPLIED

>

<!--
    Defines a reference to an earlier MasterAgreementRequest document.
    In InvoiceDetailRequest, this element identifies the master agreement
    of the release order to be invoiced.

    DocumentReference
        The reference to an earlier MasterAgreementRequest document.

    agreementID
        The id of a master agreement known to the buyer system.  Basically,
        what the master agreement number is today.

    agreementDate
        The date and time the master agreement request was created.

    agreementType
	The type of the master agreement being referenced, for example: Scheduling Agreement
-->
<!ELEMENT MasterAgreementReference (DocumentReference)>
<!ATTLIST MasterAgreementReference
    agreementID              %string;               #IMPLIED
    agreementDate            %datetime.tz;          #IMPLIED
    agreementType            (scheduling_agreement) #IMPLIED
>

<!--
    Identifies the carrier who will transport a shipment.

    domain
        Domain in which this value has meaning.  Recognized domains
        include:
        companyName - The legal name for this company.  In some cases, this
            could also be provided in a Contact element with role
            "carrierCorporate".  That option should be reserved for cases
            in which additional detail about the carrier appears in this
            element.
        SCAC - Standard Carrier Alpha Code (see
            http://users.erols.com/nmfta/Codes.htm)
        IATA - International Air Transport Association (see
            http://www.iata.org)
        AAR  - Association of American Railroads (see http://www.aar.org/)
        UIC  - International Union of Railways (see
            http://www.uic.asso.fr/)
        EAN  - European Article Numbering (see http://www.ean-ucc.org/)
        DUNS - D&B's Data Universal Numbering System (see
            http://www.dnb.com/dnbhome.htm)
-->
<!ELEMENT CarrierIdentifier (#PCDATA)>         <!-- string -->
<!ATTLIST CarrierIdentifier
    domain               %string;              #REQUIRED
>

<!--
    Identifier that appears on a shipment and through which additional
    detail about the shipment may be retrieved.  Defined by the carrier.
    Has meaning in the domain described by the CarrierIdentifier values.
    Therefore, CarrierIdentifier and ShipmentIdentifier should normally
    be used together.

    Conceptually, this is a tracking number.  Different carriers have
    different names for shipment identifiers.  Some call it a way bill
    number, others call it a pro number, and still others call it a bill of
    lading.  They all represent tracking numbers.
    
    domain
        Specifies more precisely what kind of identifier this is.
        Likely values include trackingNumber, billOfLading. 
        
    trackingNumberDate
        The date when the logistics provider intimates the tracking number 
        for this shipment. This date is used to find out the efficiency of the
        supply chain process.

    trackingURL
        carrier URL that can be used to track the shipment in conjunction with the tracking number
-->
<!ELEMENT ShipmentIdentifier (#PCDATA)>        <!-- string -->
<!ATTLIST ShipmentIdentifier
    domain                %string;              #IMPLIED
    trackingNumberDate    %datetime.tz;         #IMPLIED
    trackingURL           %URL;                 #IMPLIED>


<!--
    One language-specific string for the creator of an IdReference,
    e.g. IRS, BofA, UPS, Cisco, etc.

    xml:lang
        The language or locale in which the name of the creator is written.
-->
<!ELEMENT Creator (#PCDATA)>              <!-- string -->
<!ATTLIST Creator
   xml:lang              %xmlLangCode;         #REQUIRED
>

<!--
    Defines an ID reference.  Within the application context (for example,
    a certain pair of buyer and supplier), the (identifier, domain) pair
    should be unique.

    Creator
        The creator of this IdReference, e.g. BofA, UPS, Cisco, etc.

    Description
        Textual description of the IdReference. For human readability.

    identifier
        The unique identifier of the IdReference within the domain.

    domain
        The domain of the IdReference.  It should be one of the
        following:
        accountID, bankRoutingID, accountPayableID,
        accountReceivableID, bankAccountID, ibanID, abaRoutingNumber,
        bankNationalID, isoBicID, swiftID, bankBranchID, federalTaxID,
        stateTaxID, provincialTaxID, vatID, gstID, and taxExemptionID.
        supplierTaxID is deprecated and will be treated as federalTaxID.
        Other possible values could be 1099ID, courtRegisterID, 
        supplierReference, governmentNumber, documentName, etc.
-->
<!ELEMENT IdReference (Creator?, Description?)>
<!ATTLIST IdReference
    identifier      %string;                         #REQUIRED
    domain          %string;                         #REQUIRED
>

<!--
    Defines supplier sales order information related to an order.

    This is also used in PunchOutOrderMessage to indicate that the 
    supplier has created an order associated with the punchout order message.  
    The buyer can later cancel the sales order by sending an OrderRequest 
    of type "delete" that refers to the sales order by including the 
    SupplierOrderInfo element in the OrderRequestHeader

    orderID
        Supplier sales order id of this order.
        
    orderDate
        The date and time the sales order was created.
-->
<!ELEMENT SupplierOrderInfo EMPTY>
<!ATTLIST SupplierOrderInfo
    orderID              %string;               #REQUIRED
    orderDate          %datetime.tz;      #IMPLIED
>


<!-- 
    The ShipNoticeReference element provides a clear reference to a prior
    ShipNoticeRequest document.  While the contained DocumentReference provides
    an unambiguous reference, the additional attributes of the
    ShipNoticeReference may allow the ReceiptRequest to be viewed independently.

    DocumentReference
        The reference to an earlier ShipNoticeRequest.
        	
    shipNoticeID
        Unique identifier of the referenced ShipNoticeRequest.

    shipNoticeDate
        Date and time of the referenced ShipNoticeRequest.
-->
<!ELEMENT ShipNoticeReference (DocumentReference)>
<!ATTLIST ShipNoticeReference
	shipNoticeID %string; #IMPLIED
	shipNoticeDate %datetime.tz; #IMPLIED
>

<!-- 
    Defines ID of a Ship Notice known to the Buyer system.
 
 
    IdReference
	Additional reference ID for shipment related IDs e.g. DispatchAdviceID, ReceivingAdviceID, DeliveryNoteId, ProofOfDeliveryID.

    shipNoticeID
        Unique identifier of the referenced ShipNoticeRequest.

    shipNoticeDate
        Date and time of the referenced ShipNoticeRequest.
-->
<!ELEMENT ShipNoticeIDInfo (IdReference*)>
<!ATTLIST ShipNoticeIDInfo
    shipNoticeID              %string;               #REQUIRED
    shipNoticeDate            %datetime.tz;          #IMPLIED
>

<!--
    The OrderStatusRequestReference element provides a clear reference to a prior
    OrderStatusRequest document.

    orderStatusRequestID
        The buyer system orderStatusRequestID for this request. If present, must be copied
        directly from the referenced OrderStatusRequest document's
        OrderStatusRequestHeader.

    orderStatusRequestDate
        The order status request date.
-->
<!ELEMENT OrderStatusRequestReference (DocumentReference)>
<!ATTLIST OrderStatusRequestReference
    orderStatusRequestID              %string;               #IMPLIED
    orderStatusRequestDate            %datetime.tz;          #IMPLIED
>

<!--
    Defines the ID of an order status request known to the buyer system.

    orderStatusRequestID
        The id of an order status request known to the buyer system.

    orderStatusRequestDate
        The order status request date.
-->
<!ELEMENT OrderStatusRequestIDInfo EMPTY>
<!ATTLIST OrderStatusRequestIDInfo
    orderStatusRequestID              %string;               #REQUIRED
    orderStatusRequestDate            %datetime.tz;          #IMPLIED
>

<!--
    The ReceiptReference element provides a clear reference to a prior
    ReceiptRequest document.

    receiptID
        The buyer system receiptID for this request.
        If present, must be copied directly from the
        referenced ReceiptRequest document's ReceiptRequestHeader.

    receiptDate
        The date and time the receipt request was created. If present, must
        be copied directly from the referenced ReceiptRequest document's
        RequestRequestHeader.
-->
<!ELEMENT ReceiptReference (DocumentReference) >
<!ATTLIST ReceiptReference
    receiptID              %string;              #IMPLIED
    receiptDate            %datetime.tz;         #IMPLIED
>

<!--
    Defines the ID of a receipt known to the buyer system.

    receiptID
        The id of an receipt known to the buyer system.

    receiptDate
        The date and time the order was created.
-->
<!ELEMENT ReceiptIDInfo (IdReference*)>
<!ATTLIST ReceiptIDInfo
    receiptID              %string;               #REQUIRED
    receiptDate            %datetime.tz;          #IMPLIED
>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/OrderStatusData.mod#1 $
-->

<!--
    Request to notify change in the status of an order. Might be expanded
    in the future for other uses.
-->
<!ELEMENT OrderStatusDataRequest ( DocumentReference, OrderStatusData )>
<!ATTLIST OrderStatusDataRequest
    operation (notifyUpdate) #REQUIRED
>

<!--
    Data about a single PO.

    orderStatus
        Information about overall status of the entire order.  Please note,
        this value is locale-independent.  Valid values include:
            "Unconfirmed", "Confirmed", "Shipped", "Rejected", "Backordered",
            "Partially Confirmed", "Partially Shipped", "Partially Rejected",
            "Partially Backordered", "Partially Received", "Received".
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
        ignored by most XML parsers (used for documentation purposes).
-->
<!ELEMENT OrderStatusData
    ( OrderStatusDataShipment*, OrderStatusDataLineItem+ )>
<!ATTLIST OrderStatusData
    orderStatus  %string;    #REQUIRED
    a-dtype      NMTOKENS    #FIXED 'orderStatus string'
>

<!--
    Information about a single line item from the original order.
    Portions of this item (separate subquantities) may have different
    status conditions.

    lineNumber
        The line item number (generated by procurement application) of
        this line item.
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
        ignored by most XML parsers (used for documentation purposes).
-->
<!ELEMENT OrderStatusDataLineItem ( OrderStatusDataSubquantity+ )>
<!ATTLIST OrderStatusDataLineItem
    lineNumber         %uint;      #REQUIRED
    a-dtype            NMTOKENS    #FIXED 'lineNumber ui4'
>

<!--
    Information about a portion (subquantity) of a line item from the
    original order.

    status
        The current status of this subquantity.  Please note, this value is
        locale-independent.  Valid values include:
            "Unconfirmed", "Confirmed", "Shipped", "Rejected", "Backordered".
    reason
        The reason associated with the current status.  Please note, this
        value is also locale-independent.  Valid values include:
            For "Unconfirmed" status, it will be blank or optional;
            For "Confirmed" status,
                it can be "As Is", "With Changes", "With Comments";
            For "Shipped" status,
                it can be "As Is", "With Changes", "With Comments";
            For "Rejected" status,
                it can be "As Is", "With Comments";
            For "Backordered" status, it will be "With Changes".
    quantity
        The quantity of this portion of the line item.
    estimatedDeliveryDate
        The estimated date for delivery provided by supplier.
    shipmentID
        The identification number referring to a child OrderStatusDataShipment
        element defined in the current OrderStatusDataResponse element.
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
        ignored by most XML parsers (used for documentation purposes).

    ItemID
        The part number specified by supplier in place of the part number
        requested by the orinigal order.
    UnitPrice
        The unit price specified by supplier in place of the unit price
        specified in the original order.
    Comments
        The comments from supplier regarding this subquantity.
-->
<!ELEMENT OrderStatusDataSubquantity ( ItemID?,
                                       UnitPrice?,
                                       Comments? )>
<!ATTLIST OrderStatusDataSubquantity
    quantity                  %r8;        #REQUIRED
    status                    %string;    #REQUIRED
    reason                    %string;    #IMPLIED
    estimatedDeliveryDate     %date;      #IMPLIED
    shipmentID                IDREF       #IMPLIED
    a-dtype                   NMTOKENS    #FIXED 'status string
                                                  reason string
                                                  quantity r8
                                                  estimatedDeliveryDate date'
>

<!--
    Information about a shipment of a complete order, line item(s), or
    portion(s) of a line item.

    shipmentID
        The identification number of this shipment (unique and valid only
        within the current CXML document).
    carrierName
        The name of carrier for shipping.
    trackingNumber
        The tracking number for shipping.
    shippingDate
        The date of actual shipping.
    a-dtype
        Datatype enumeration for the attributes of this element.  May be
        ignored by most XML parsers (used for documentation purposes).

    OrderStatusDataShippingCost
        The cost associated with this shipment.
-->
<!ELEMENT OrderStatusDataShipment ( Money? )>
<!ATTLIST OrderStatusDataShipment
    shipmentID                ID          #REQUIRED
    carrierName               %string;    #IMPLIED
    trackingNumber            %string;    #IMPLIED
    shippingDate              %date;      #IMPLIED
    a-dtype                   NMTOKENS    #FIXED 'carrierName string
                                                  trackingNumber string
                                                  shippingDate date'
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/DataRequest.mod#1 $
-->


<!--
    Definition of a DataRequest.
-->
<!ELEMENT DataRequest (InternalID)>

<!--
    DataResponse. Contains the attachments if any for this response.
    Only a successful response to a download attempt would include this element
-->

<!ELEMENT DataResponse (Attachment+)>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Content.mod#1 $
-->

<!--
    Definition of Content transaction
-->
<!ELEMENT ContentRequest (SelectedService, Comments*, Extrinsic*, Contact*,
                          ItemOut+)>

<!ELEMENT ContentResponse (ContentResponseHeader, ItemIn*)>

<!--
    ContentResponseHeader

    operationAllowed - has the same semantics as the operationAllowed
        attribute of the PunchOutOrderMessageHeader

    This attribute is only used where a user may later want to PunchOut
    based on the service provided.  This can also be used to provide a UI
    if there are any errors on the ContentResponse requiring user
    interaction.
-->
<!ELEMENT ContentResponseHeader (Total, Shipping?, Tax?, Contact*, Comments*)>
<!ATTLIST ContentResponseHeader
    operationAllowed  (create | inspect | edit)  #IMPLIED
>













<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/schema/Modules/Payment.mod#1 $
-->

<!--
    This file contains all the payment related elements
-->

<!--
    Defines different payment methods
-->
<!ENTITY % cxml.paymentMethod  "(ach | cash | check |
                                creditCard | debitCard |
                                draft | wire |
                                other)">

<!--
    Defines a payment method

    Description
        The description of the payment method. Description is
        mandatory if the type is set to "other". The <ShortName>
	element in Description must indicate the name of the payment
	method.

    type
        the payment method type
-->
<!ELEMENT PaymentMethod (Description?)>
<!ATTLIST PaymentMethod
    type %cxml.paymentMethod; #REQUIRED
>

<!--
    Defines payable information related to a invoice.

    InvoiceReference
        The reference to invoice being paid. Copied from the InvoiceDetailRequest message.

    InvoiceIDInfo
        The reference to invoice in the Supplier system being paid.

    PayableOrderInfo
        Supplementary information related to the invoice. For example,
        if you are making a payment against a consolidated invoice,
        you may also include associated order information.

    PayableMasterAgreementInfo
        Supplementary information related to the invoice. For example,
        if you are making a payment against a Consolidated Invoice,
        you may also include associated master agreement information.
-->
<!ELEMENT PayableInvoiceInfo ((InvoiceReference | InvoiceIDInfo),
                              (PayableOrderInfo | PayableMasterAgreementInfo)?)>

<!--
    Defines payable information related to an order.

    OrderReference
        The reference to the order being paid.

    OrderIDInfo
        The buyer system order id of the order.
-->
<!ELEMENT PayableOrderInfo (OrderReference | OrderIDInfo)>

<!--
    Defines payable information related to a master agreement.

    MasterAgreementReference
        The reference to master agreement in the Buyer system being paid.
        Copied from the InvoiceDetailRequest message.

    MasterAgreementIDInfo
        The reference to master agreement in the Buyer system being paid.
-->
<!ELEMENT PayableMasterAgreementInfo (MasterAgreementReference | MasterAgreementIDInfo)>

<!--
    Defines information related to a payable such as an invoice,
    order, masteragreement, receipt, etc. More than one payable
    information can be included.

    PayableInvoiceInfo
        The info about the invoice being paid.

    PayableOrderInfo
        The info about the order being paid.

    PayableMasterAgreeementInfo
        The info about the master agreement being paid.

-->
<!ELEMENT PayableInfo ( PayableInvoiceInfo | PayableOrderInfo |
                        PayableMasterAgreementInfo)>



<!--
    Defines the party involved in the payment, including Payer of this
    payment (payer), Payee of this payment (payee),
    Payer's bank (originatingBank), Payee's bank (receivingBank),
    Payer's Correspondent Bank, Payee's Correspondent Bank, Intermediary Bank, etc

    Contact
        Contact information of the payment partner.  Allowed contact
        roles include payer, payee, originatingBank, receivingBank,
        originatingCorrespondentBank, receivingCorrespondent, 
        receivingCorrespondentBank, intermediaryBank, and remitTo.

        Contact elements with role 'payer' and 'payee' are always
        required. If the payment method indicates a bank transfer,
        then Contact elements with role 'originatingBank' and
        'receivingBank' are required.

        If the contact role is 'remitTo', it would contain contact
        information of the remittance address. For this role, the
        IdReference and PCard elements may be absent.

    IdReference
        Partner reference ID, including bank account identification,
        bank identification, and optionally bank branch identification.

        IdReference is mandatory for all transactions that involve
        electronic payments. It is optional only for non-electronic
        forms of payments, such as, 'check', 'draft' etc.

        The bank account identification is specified as follows:
            bankAccountID   : Domestic account number
            ibanID          : IBAN ID (International Bank Account Number) as
                              specified in ISO 13616.

        The bank identification is specified as follows:
            abaRoutingNumber: ABA (American Banking Association)
                              Routing Number)
            swiftID         : SWIFT ID (Society for Worldwide Interbank Financial
                              Telecommunications)
            chipsID         : CHIPS ID (Clearing House Interbank Payment System)
            isoBicID        : ISO BIC ID (Bank Identifier Code) as specified
                              in ISO 9362.
                              The Bank Identifier Code (BIC) is a
                              universal method of identifying
                              financial institutions. The BIC consists
                              of 8 or 11 characters, comprising a bank
                              code (4 characters), a country code (2
                              characters), a location code (2
                              characters) and an optional branch code
                              (3 characters).

            bankNationalID : If none of the above bank identification
                             methods are applicable, then use this to
                             specify national clearing codes that are
                             specific to a country. This identification
                             if used, should uniquely identify
                             the bank within the country specified in the
                             Contact.
	
	    
        The bank branch identification, if necessary, is specified as follows:
            bankBranchID    : The bank branch ID

        The following table illustrates some valid combinations of
        Contact and IdReference domains:
        +..............................+.....................................+
        | Contact@role                 | IdReference@domain                  |
        +..............................+.....................................+
        | payer                        | bankAccountID, ibanID               |
        |                              |                                     |
        | payee                        | bankAccountID, ibanID               |
        | receivingCorrespondent       | bankAccountId, swiftID              |        
        |                              |                                     |
        | originatingBank              | abaRoutingNumber, bankNationalID,   |
        |                              | isoBicID, swiftID,                  |
        |                              | bankBranchID (optional)             |
        |                              |                                     |
        | receivingBank                | abaRoutingNumber, bankNationalID,   |
        |                              | isoBicID, swiftID,                  |
        |                              | bankBranchID (optional)             |
        |                              |                                     |
        | originatingCorrespondentBank | abaRoutingNumber, isoBicID, swiftID |
        |                              |                                     |
        | receivingCorrespondentBank   | abaRoutingNumber, isoBicID, swiftID |
        |                              |                                     |
        | intermediaryBank             | abaRoutingNumber, isoBicID, swiftID |
        +..............................+.....................................+

    PCard
        PCard information including pcard number, pcard expiration date,
        pcard name.IdReference

        This can only appear for the Contact with payer role. This is used
        when the payment is done through a pcard.
-->
<!ELEMENT PaymentPartner (Contact, IdReference*, PCard?)>
<!--
    PaymentProposalRequest

    Specifies payment proposal information of a payable.

    PayableInfo
        The reference information of the invoice, order, or master agreement 
        to be paid.

    PaymentMethod
        The method of payment.  Must be provided if isNetworkPayment is true.

    PaymentPartner
        All partners involved in payment, including payer, payee,
        originating bank, receiving bank, remitTo, etc.  The number of payment
        partners required depends on the payment method used. The remitTo
        element must be provided if isNetworkPayment is true.

    GrossAmount
        Sum of subtotal, taxes, special handling
        charges, and shipping charges, before discounts.

    DiscountAmount
        The discount applied in this PaymentProposalRequest.

    AdjustAmount
        The total of various adjustment amounts for the payable.
        The adjustment amount can be positive indicating a decrease
        in payment amount, or negative indicating an increase in
        payment amount (for late charges, penalties etc).

    NetAmount
        The net amount for the payable.  If GrossAmount is provided, then
        NetAmount = GrossAmount - DiscountAmount - AdjustmentAmount.
        If NetAmount is negative, then it indicates a credit to the buyer.
        In this case, except for paymentProposalID, operation, and 
        PayableInfo, NetAmount, all other attributes and sub-elements
        of PaymentProposalRequest will be ignored.

    Comments
        This field contains user comments when the status is changed. For
        example, if the status is changed to hold, the user can enter
        a reason which would be included in this field. Only update, hold,
        and delete operations can have comments.

    paymentProposalID
        A buyer-generated identifier for this payment proposal. For any update
        to an existing payment proposal, the same paymentProposalID is used.

    operation
        Defines the operation to be performed:
            new - Creates a new payment proposal.
            update - Updates an existing payment proposal identified by 
                paymentProposalID.
            delete - Cancels an existing payment proposal identified by 
                paymentProposalID.  All optional attributes and sub-elements 
                of PaymentProposalRequest will be ignored.
            hold - Puts on hold an existing payment proposal identified by 
                paymentProposalID.  All optional attributes and sub-elements 
                of PaymentProposalRequest will be ignored.

    isNetworkPayment
        True if this payment proposal is paid via a network commerce hub.
        By default it is false.
-->
<!ELEMENT PaymentProposalRequest (PayableInfo?,
                                  PaymentMethod?,
                                  PaymentPartner*,
                                  GrossAmount?,
                                  DiscountAmount?,
                                  AdjustmentAmount?,
                                  NetAmount?,
                                  Comments?,
                                  Extrinsic*
                                  )>
<!ATTLIST PaymentProposalRequest
    paymentProposalID  %string;                         #REQUIRED
    operation          (new | update | delete | hold)   #REQUIRED
    isNetworkPayment   (yes)                            #IMPLIED
    paymentDate        %datetime.tz;                    #IMPLIED
>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->


<!--
    Defines adjustment applied.

    Money
        The adjustment in dollar (or other currency) amount. When there are multiple Modification elements inside the Modifications element, 
        Money is:
           Money = sum of all AdditionalDeduction - sum of all AdditionalCost
    
    Description
        Textual explanation of the reason for adjustment.

    Modifications
        Details of AdjustmentAmount. There can be multiple "Modification" elements inside. 
-->
<!ELEMENT AdjustmentAmount (Money, Description?, Modifications?)>

<!--
    Defines remittance detail of a specific payable that is paid.

    PayableInfo
        The reference information of the payable.

    NetAmount
        The net amount for this payable. It should be equal to
        GrossAmount minus DiscountAmount, and every AdjustmentAmount.
        NetAmount = GrossAmount - DiscountAmount - AdjustmentAmount

    GrossAmount
        The gross payment amount for this payable.

    DiscountAmount
        The discount info for this payable.

    AdjustmentAmount
        The total of various adjustment amounts for this payable, if any.
        The adjustment amount can be positive indicating an decrease
        in payment amount, or negative indicating an increase in
        payment amount (for late charges, penalties etc).

    lineNumber
        The line number.
-->
<!ELEMENT RemittanceDetail (PayableInfo,
                            NetAmount,
                            GrossAmount, DiscountAmount?,
                            AdjustmentAmount?,
                            Comments?, Extrinsic*)>
<!ATTLIST RemittanceDetail
    lineNumber             %uint;    #REQUIRED
>

<!--
    The PaymentReference element provides a clear reference to a prior
    PaymentRemittanceRequest document.

    paymentRemittanceID
        The paymentRemittanceID of the request. Do not use the
    transaction identification number such as check number etc.

    paymentDate
        The payment date.
-->
<!ELEMENT PaymentReference (DocumentReference)>
<!ATTLIST PaymentReference
    paymentRemittanceID              %string;               #IMPLIED
    paymentDate                      %datetime.tz;          #IMPLIED
>

<!--
    Defines the ID of a payment made by buyer. This ID should uniquely
    identify the payment made in the buyer system.

    paymentRemittanceID
        The id of the payment. Do not use the transaction
        identification number such as check number etc.

    paymentDate
        The payment date.
-->
<!ELEMENT PaymentIDInfo EMPTY>
<!ATTLIST PaymentIDInfo
    paymentRemittanceID    %string;               #REQUIRED
    paymentDate            %datetime.tz;          #IMPLIED
>


<!--
    Defines information related to an earlier payment made by the
    buyer.

    PaymentReference
        Reference to earlier PaymentRemittanceRequest. If the earlier
        payment was made via cxml, this element is required.

    PaymentIDInfo
        The reference to the payment id (in the Buyer system).
-->
<!ELEMENT PaymentReferenceInfo (PaymentReference | PaymentIDInfo)>


<!--
    Defines the summary information of a PaymentRemittanceRequest.

    NetAmount
        The total net payment amount. It should satisfy the following
    equation:
        NetAmount = GrossAmount - DiscountAmount - AdjustmentAmount.

    GrossAmount
        The total gross amount.

    DiscountAmount
        The total discount amount.

    AdjustmentAmount
        The total adjustment amount.

-->
<!ELEMENT PaymentRemittanceSummary (NetAmount,
                                    GrossAmount,
                                    DiscountAmount?,
                                    AdjustmentAmount?)>

<!--
    Defines the header information of a PaymentRemittanceRequest.

    PaymentMethod
        The method of payment.

    PaymentPartner
        All partners involved in payment, including payer, payee,
        originating bank, receiving bank, etc.  The number of payment
        partners required depends on the payment method used.  Almost
        all of the forms of electronic payment (ACH, SWIFT, etc)
        requires all the four parties - "payer", "payee",
        "originatingBank", and "receivingBank".

    PaymentReferenceInfo
        Reference to an earlier payment.

    Comments
        Textual comments for this document.

    Extrinsic
        Additional information related to this payment.  Should not
        duplicate anything in PaymentRemittanceRequest.

    paymentRemittanceID
        A buyer-generated identifier for this PaymentRemittance.

    paymentDate
        Date and time this Payment or Remittance transaction was
        created (should be earlier than the document's timestamp).

    isPayment
        Indicates whether this request is intended for making payment
        or remittance advice only.

        If the attribute is set to 'yes', then this request is for
        payment purposes, and it may include remittance advice
        information.  If it is not specified, then it is assumed to be
        for remittance purposes only.

    paymentReferenceNumber
        Indicates a payment transaction reference or payment identification
        number. For example, it is the check number for check payments,
        or an electronic reference or confirmation number for
        electronic payments.

-->
<!ELEMENT PaymentRemittanceRequestHeader (PaymentMethod,
                                          PaymentPartner+,
                                          PaymentReferenceInfo?,
                                          Comments?,
                                          Extrinsic*)>
<!ATTLIST PaymentRemittanceRequestHeader
    paymentRemittanceID     %string;        #REQUIRED
    paymentDate             %datetime.tz;   #REQUIRED
    isPayment               (yes)           #IMPLIED
    paymentReferenceNumber  %string;        #IMPLIED
>

<!--
    PaymentRemittanceRequest

    Specifies payment and/or remittance details.

    PaymentRemittanceRequestHeader
        The header information of this request.

    PaymentRemittanceSummary
        The summary information of this request.

    RemittanceDetail
        The line level information with details. If present, it sum of
        payment amounts specified in RemittanceDetail should be equal
        to that specified in PaymentRemittanceSummary.

-->
<!ELEMENT PaymentRemittanceRequest (PaymentRemittanceRequestHeader,
                                    PaymentRemittanceSummary,
                                    RemittanceDetail*)>


<!--
    Status details of a payment transaction specified by an existing
    PaymentRemittanceStatusDetail.  If present, the element content 
    describes specifics of a problem.

    code
        Payment transaction status code provided by the payment provider.

    description
        Textual description of the status code (not specific issue).

    xml:lang
        The language in which the text attribute and element content are
        written.  
-->
<!ELEMENT PaymentRemittanceStatusDetail (#PCDATA)>
<!ATTLIST PaymentRemittanceStatusDetail
    code                 %string;                    #REQUIRED
    description          %string;                    #REQUIRED
    xml:lang             %xmlLangCode;               #REQUIRED
>

<!--
    Status for a payment transaction specified by an existing 
    PaymentRemittanceRequest.

    PaymentRemittanceStatusDetail
        The status details of the payment transaction.

    type
        The status type of the payment transaction.
            failed - The payment transaction failed.
            paid - The payment transaction completed successfully.
            paying - The payment transaction is in progress.

    paymentReferenceNumber
        Indicates check number for check payment, or a unique number
        for electronic payments.
-->
<!ELEMENT PaymentRemittanceStatus (PaymentRemittanceStatusDetail?,
				   Extrinsic*)>
<!ATTLIST PaymentRemittanceStatus
    type                    (paid | paying | failed | canceled)  #REQUIRED
    paymentReferenceNumber  %string;                    #IMPLIED
>

<!--
    PaymentRemittanceStatusUpdateRequest

    A request to update the status of an existing PaymentRemittanceRequest.

    DocumentReference
        Reference to the existing PaymentRemittanceRequest.

    PaymentRemittanceStatus
        The updated status of the existing PaymentRemittanceRequest.
-->
<!ELEMENT PaymentRemittanceStatusUpdateRequest (DocumentReference,
                                                PaymentRemittanceStatus)>


<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Private.mod#2 $
-->

<!-- ====
    Not yet public Requests, Responses and Messages.
==== -->

<!ENTITY % cxml.requests "(SessionStatusRequest |
                           OrderStatusSetupRequest |
                           InvoiceRequest |
                           NotificationRequest |
                           PrivateOrganizationRequest |
                           CatalogChangeRequest |
                           CopyRequest |
                           OrderStatusDataRequest |
                           SourcingUpdateRequest |
                           DataRequest |
                           AuthRequest |
                           ContentRequest |
                           RelationshipRequest |
                           RFxEventRequest |
                           ProviderDataRequest |
                           SearchRequest |
                           MapSyncRequest |
                           CollaborationRequest |
                           RFxPublishRequest |
                           PaymentProposalRequest |
                           PaymentRemittanceStatusUpdateRequest |
                           ReceiptRequest |
                           L3ChargeFileRequest |
                           BlanketOrderStatusUpdateRequest |
                           SalesOrderRequest |
                           PriceAvailabilityRequest |
                           DataSyncChangeListRequest |
                           DataSyncDataRequest |
                           S4DataPushRequest |
                           UpdateMigratedSupplierRequest)" >

<!ENTITY % cxml.responses ",(SessionStatusResponse |
                            OrderStatusSetupResponse |
                            PrivateOrganizationResponse |
                            DataResponse |
                            AuthResponse |
                            ContentResponse |
                            RelationshipResponse |
                            ProviderDataResponse |
                            SearchResponse |
                            PriceAvailabilityResponse |
                            DataSyncChangeListResponse |
                            DataSyncDataResponse |
                            OrganizationDataResponse |
                            S4DataPushResponse)?" >

<!ENTITY % cxml.messages ",(OrderStatusDoneMessage | 
                                                    QuoteDataMessage)" >

<!-- ====
    SessionStatus* transaction allows two cooperating visually integrated
    applications to link their user sessions (timeouts in particular)
    together.
==== -->

<!--
    SessionStatusRequest

    Used to exchange session status information between two cooperating
    visually integrated applications.  The cookie used matches the one sent
    in the original *SetupRequest.  When used to check on the status of a
    session initiated using a PunchOutSetupRequest, the OriginatorCookie
    contains the BuyerCookie from that document.

    payloadID
        The unique identifier for the document which initiated this
        session.  Copied directly from the cXML element of the original
        document.  Presently, that document must have contained an
        OrderStatusSetupRequest, ProviderSetupRequest or
        PunchOutSetupRequest element.

        Associates this check or update with the original document and
        allows an intermediate hub to route the SessionStatusRequest
        identically to the original Request document.  This covers the case
        in which a one provider provides a service on behalf of another.
        (A SessionStatusRequest must go to the location specified in the
        ProfileResponse of the correct provider.)

    operation
        The information requested or transmitted by the originator:
        ping - Asks "Is the session at the remote site still active?"
           Response Status codes include:
              200, the given cookie identifies a user session known to the
                remote server.  The SessionStatusResponse contains the
                interval since last activity.
              401, the remote session has expired or cannot be found
        cancel - Informs the remote site the user has returned to the
                originating application.  Remote site can close its
                session.
        timeout - Informs the remote site the user's session in the
                originating application has expired.  The remote site
                should not attempt to return a completion message.
        complete - Informs the remote site the user has returned via a
                successfully received ProviderDoneMessage or
                PunchOutOrderMessage, completing the session.  Remote site
                should already have closed its session.

    Profile note: If the requestName of a Transaction in a ProfileResponse
    is "SessionStatusRequest", an Option element with name="requestNames"
    is required inside that Transaction element.  The content of that
    Option element must be a space-separated list of tag names chosen from
    the set "OrderStatusSetupRequest", "ProviderSetupRequest" and
    "PunchOutSetupRequest".  This Option element informs the client that
    the server supports session checks and updates while performing a
    listed interactive service.  Transaction elements for each of the
    listed requests must also be included in the profile.
-->

<!ELEMENT SessionStatusRequest (OriginatorCookie)>
<!ATTLIST SessionStatusRequest
    payloadID %string;                             #REQUIRED
    operation (ping | cancel | timeout | complete) #REQUIRED
>

<!--
    SessionStatusResponse

    Returned in Response to a SessionStatusRequest only when
    operation="ping" in the Request and the Response Status code is 200.

    idleInterval
        Number of seconds since the user last performed some action at the
        remote site.  (This attribute does not contain the time that action
        was initiated to avoid problems synchronizing clocks between the
        originating application and remote site.)
-->

<!ELEMENT SessionStatusResponse EMPTY>
<!ATTLIST SessionStatusResponse
    idleInterval %uint; #REQUIRED
>

<!-- ====
    OrderStatus* transaction is used to visually integrate an application
    with an order routing service provider to display detailed order
    status.
==== -->

<!--
    OrderStatusSetupRequest - Request (dynamic) location for new session
        within remote application.

    Contains information about one or more orders (the DocumentReference
    list), optional information about the requistion containing the orders
    of interest (the ReqReference element) and a way to tie the later
    interactive session to this particular request (the OriginatorCookie
    element).

    The originating application would provide the BrowserFormPost location
    only if it wished the provider site to display a "Done" button or
    would like information (at least Status) returned at the end of the
    interactive session.  Inclusion should lead to a ProviderDoneMessage
    from the provider at the end of a session.

    The originating application would provide a SelectedService if it
    were asking the target application to display status information
    about a particular service tied to the order.  Examples uses of this
    are for checking payment status, and package tracking.  These are both
    services of an order.

    operation
        inspect - Provider should create a session allowing the user to
            view details about the order(s).  Changes should not be allowed
            within this session.  This is the default operation.
        edit - Provider should create a session allowing the user to update
            details about the order(s).  Allowed changes may vary depending
            upon the user's organization (identified in the From
            credential).
-->

<!ELEMENT OrderStatusSetupRequest (OriginatorCookie, BrowserFormPost?,
                                   SelectedService?, Extrinsic*,
                                   ReqReference?, DocumentReference+)>
<!ATTLIST OrderStatusSetupRequest
    operation  (inspect | edit)  #IMPLIED
>

<!--
    Additional information used to summarise a requisition when multiple
    DocumentReference elements appear in the OrderStatusSetupRequest.  None
    of this data corresponds to information maintained outside of the
    procurement application.  One exception: requisitionID may optionally
    appear in the original order at the header or line item level.

    requisitionID
        The buyers system requisition id for the order(s) listed in the
        OrderStatusSetupRequest.

    creationDate
        The date this requisition was created in the procurement
        application.
-->
<!ELEMENT ReqReference (Name)>
<!ATTLIST ReqReference
    requisitionID %string;      #REQUIRED
    creationDate  %datetime.tz; #REQUIRED
>

<!--
     OrderStatusSetupResponse
-->

<!ELEMENT OrderStatusSetupResponse (StartPage)>

<!--
     OrderStatusDoneMessage
-->

<!ELEMENT OrderStatusDoneMessage (OriginatorCookie, ReturnData*)>

<!--
    Information of a QuoteData.  This is the supplier specific quote data information that is sent to the buyer. 
    type
        supplier action type.
    quoteID
        unique identifier for a quote. 
    quoteDate
        The date when the quote is submitted.
-->
<!ELEMENT QuoteDataInfo (OrganizationID, Total, ShipTo?, Contact*, Comments?, Extrinsic*)>
<!ATTLIST QuoteDataInfo
    type  (accept | reject | update | final | award)	#REQUIRED
    quoteID    %string;          #REQUIRED
    quoteDate  %datetime.tz;     #REQUIRED
    currency  %isoCurrencyCode;	 #REQUIRED
    xml:lang  %xmlLangCode;      #REQUIRED
>

<!--
    Definition for a quote data object. This contains quote data from one supplier.
-->
<!ELEMENT QuoteData (QuoteDataInfo, QuoteItemIn+)>

<!--
    Header for the quote data message. This contains the header information for the quote data message.
-->
<!ELEMENT QuoteDataMessageHeader (QuoteRequestReference)>


<!ELEMENT QuoteDataMessage (QuoteDataMessageHeader, QuoteData+)>

<!-- ====
    Invoice* transaction allows a supplier to transmit a request for
    payment to a buyer.
==== -->

<!--
    InvoiceRequest

    Transmits a request for payment to a buyer.  Directly references an
    earlier OrderRequest document and provides finalized total, shipping
    and tax information.  (An Invoice may not request payment for anything
    other than a single order.)

    This document must be sent to the Followup location specified in an
    earlier OrderRequest document.  That OrderRequest document must be
    identified in the DocumentReference element contained here.               

    The Total amount must include all line item amounts, Shipping and Tax.
    It is the single amount the buyer will pay.  Exact Shipping and Tax
    amounts must be provided if they apply to this order.

    The requisitionID attribute and BillTo element echo data provided in
    the original OrderRequest document, if any.  While identical elements
    are available in an OrderRequest document, the Contact, Comments and
    Extrinsic elements in this request should not duplicate anything in the
    original OrderRequest document.  These elements provide additional
    detail the supplier wishes to transmit.

    invoiceDate
        Date and time this Invoice was created (should be earlier than the
        document's timestamp).

    invoiceID
        A supplier-generated identifier for this Invoice.  Identical to the
        Invoice Number which appears at the top of a physical Invoice.

    requestedAction
        Action the buyer should take as a result of this document.  May be:
        none
            This document is provided as a receipt for payment the supplier
            has already initiated.
        payment
            The buyer should initiate payment of the Total amount.

    orderID
        The buyer system orderID for this request.  Basically, what the PO
        number is today.  Copied directly from the OrderRequestHeader of
        the original purchase order document.

    requisitionID
        The buyers system requisition id for this entire order.  Copied
        directly from the OrderRequestHeader of the original document.
-->

<!ELEMENT InvoiceRequest (DocumentReference, InvoiceRequestHeader)>

<!ELEMENT InvoiceRequestHeader (Total, Shipping?, Tax?, PayTo?, BillTo?,
                                Contact*, Comments?, Extrinsic*)>
<!ATTLIST InvoiceRequestHeader
    invoiceDate     %datetime.tz;    #REQUIRED
    invoiceID       %string;         #REQUIRED
    requestedAction (none | payment) #REQUIRED
    orderID         %string;         #REQUIRED
    requisitionID   %string;         #IMPLIED
>

<!--
    An address where payment (if done by physical means) should be
    sent.
-->
<!ELEMENT PayTo (Address)>

<!-- ====
    PrivateOrganization* transaction is used by marketplaces to create a
    supplier or buyer within their Private Labelled Ariba Network (PLAN).
==== -->

<!--
    PrivateOrganizationRequest - Operate on a member organization.

    operation
        create - Create a new member organization with this Name and in the
            given Organization Role.
        update - Update the given member organization with new Name and/or
            Organization Role.
        query - Return a previously-generated Credential for the given
            member organization.  Server must return Status code 204 (No
            Content) without a PrivateOrganizationResponse if this member
            organization does not yet exist.
        delete - Delete the given member organization.

    Note: The header-level From credential identifies the marketplace in
    case of 'create' or 'query' and the member organization in case of
    'delete'.

    Name - Company name of interest.
    OrganizationRole - Role of this company within the marketplace or
        exchange.
-->

<!ELEMENT PrivateOrganizationRequest
         (Name, OrganizationRole+)>
<!ATTLIST PrivateOrganizationRequest
    operation (create | update | query | delete) #REQUIRED
>



<!--
     PrivateOrganizationResponse - Return data for successful 'create' and
     'query' PrivateOrganizationRequest attempts.

     The response includes the Credential for the created or queried
     organization.  The PrivateOrganizationResponse would not be returned
     in the 'delete' case.
-->

<!ELEMENT PrivateOrganizationResponse (Credential)>


<!-- ====
    NotificationRequest - send a notification.
    	This request is also posted to add notes or additional information 
	to any earlier document.

	DocumentReference
		This element is used to identify the document using payloadId
		for which notes are added.
	DocumentInfo
		This element is used if DocumentReference is omitted.
		This element identifies a document using documentId, documentTye,
		documentDate. Either DocumentReference or DocumentInfo should 
		be provided.
    	Attachment
    		This is an optional element used to provide any number of 
    		attachments.	
	category
            could be used for routing notifications to those responsible for
            an area.
        type
            indicates the nature and severity of the notification.            
==== -->

<!ELEMENT NotificationRequest (Subject, Body?, (DocumentReference|DocumentInfo)?, Attachment*)>

<!ATTLIST NotificationRequest
    category %string;  #IMPLIED
    type  (info | warning | error)  "info"
>

<!ELEMENT Subject (#PCDATA)> <!-- string -->
<!ATTLIST Subject
    xml:lang  %xmlLangCode;  #REQUIRED
>

<!ELEMENT Body (#PCDATA)> <!-- string -->
<!ATTLIST Body
    xml:lang  %xmlLangCode;  #REQUIRED
>

<!--
    CatalogChangeRequest

    This request is posted to the catalog server whenever the content or
    the subscriber list (or both) associated with a particular catalog
    changes.  Note that the From credential in the request indicates the
    supplier from whom the catalog comes.

    This request is also posted to AN from the catalog server to
    indicate that a catalog's location has been toggled between network and
    local. For a network catalog enabled buyer, AN will not put the
    new version of the catalog in the queue where buyer used to be
    able to sync the catalog from. Instead the catalog server will
    sync the catalog from AN. By default, the catalog is considered to
    be on the network. The buyer has a choice to change the location
    from network to local, and vice versa. When this toggle happens,
    we will use CatalogChangeRequest to notify AN. AN will act
    correspondingly. Specifically, if the catalog is changed from
    network to local, AN has to put the catalog in the queue again.

    In this case, the From element will be used to represent the
    supplier. The buyer will be represented in the SubscriberList,
    which contains only one element.

    type
        Indicates the type of change

    isPublic
        Indicates whether the catalog changed is a public catalog or not.

    location
        Indicates the location of the catalog, when the request is
        sent from the catalog server to AN. To be extensible, it's
        defined as a string, not an enumeration or boolean.
-->

<!ELEMENT CatalogChangeRequest (CatalogID, SubscriberList)>
<!ATTLIST CatalogChangeRequest
    type     (new | update | delete) #REQUIRED
    isPublic (yes)                   #IMPLIED
    location %string;                #IMPLIED
>

<!ELEMENT CatalogID (Identity)>
<!ELEMENT SubscriberList (OrganizationID*)>

<!--
      SourcingUpdateRequest  - A request from Sourcing to Buyer application, can be sent in three flavors.
      1.    SourcingUpdateRequest - SourcingReference information in the form of Extrinsics with no item information. This is more for confirmation of creation of a Sourcing transaction on Sourcing. This reference will be used in Subsequent Messaging Transactions.
      2.    SourcingUpdateRequest - quoteStatus="pending", the request will have a set of MasterAgreements that are a partial completion of the corresponding SourcingTransaction, Buyer application will be expecting subsequent SourcingUpdateRequests from Sourcing.

      3.    SourcingUpdateRequest - quoteStatus="final", the request will have MasterAgreements, Items or nothing. This will cause Buyer to close the SourcingRequest within Buyer and not wait for  more documents.
-->
<!ELEMENT SourcingUpdateRequest (SourcingUpdateRequestHeader, (PurchaseRequisition | MasterAgreement*))>

<!--
   SourcingUpdateRequestHeader
    - Header Level Sourcing/Buyer handshake information
    and also header level information for spot purchases.
    This is via Extrinsics for this release
                quoteStatus - defines the status of the Sourcing
    transaction on Sourcing.
    "pending" - Sourcing is partially completed process
    all the items and agreements in the request but wait
     for more.
    "final" - process is complete so no need to wait for
     more results.
-->
<!ELEMENT SourcingUpdateRequestHeader (SourcingStatus?, Extrinsic*)>
<!ATTLIST SourcingUpdateRequestHeader
          quoteStatus       (pending | final)          "final"
          sourcingType      (spot | contract)          "spot"
>


<!--
    MasterAgreementHeader  - header level information for a Master
    Agreement. Contains Header level terms and identifies the
    contract type.

    SupplierID -  identifies the header level supplier for the
    MasterAgreement.
    MaxAmount - If the MasterAgreement "type" is "value " then
    this represents maximum amount limit on the MA
    MinAmount - If the MasterAgreement "type" is "value", then
    this represents minimum amount limit on the MA
         MinReleaseAmount -This represents the release terms for the
    Minimum release amount per MA release
    Extrinsic - Extended attribute for the MA  terms at the header
    level
         Comments - Attachments  with Description at the header level
    agreementDate - Date of agreement
    effectiveDate - Date the MA is effective.
         expirationDate - Date for expiration.
-->
<!ELEMENT MasterAgreement (MasterAgreementHeader, AgreementItemIn*)>
<!ELEMENT MasterAgreementHeader (SupplierID+, MaxAmount?, MinAmount?,  MinReleaseAmount?, Comments?, Extrinsic*)>
<!ATTLIST    MasterAgreementHeader
                       agreementDate    %datetime.tz;      #REQUIRED
                       effectiveDate     %datetime.tz;     #REQUIRED
                       expirationDate    %datetime.tz;     #REQUIRED
                       type      (value | quantity)    "value"

>
<!--
   AgreementItemIn, enhanced ItemIn to contain agreement specific
   information.
-->
<!ELEMENT AgreementItemIn (ItemIn, MaxAmount?, MinAmount?, PricingTerm?, Comments?)>
<!ATTLIST AgreementItemIn
                 maxQuantity        %r8;      #IMPLIED
     minQuantity        %r8;      #IMPLIED>

<!--
        PricingTerm information, these are pricing terms for either
   the header or the items in a contract.

        DiscountPercent - Percentage Discount for the Amount.
        DiscountedPrice - DiscountedPrice, supported at item level only.
        AmountTierPrice - Tier Pricing Based on Amount.
    - MinTierAmount - Lower  amount limit for a given tier.
        QuantityTierPrice - Quantity Based Tier Pricing.
    - MinTierQuantity - Lower quantity limit for a given tier.
-->
<!ELEMENT PricingTerm ((DiscountPercent | DiscountedPrice | TieredPrice), Extrinsic*)>
<!ELEMENT DiscountedPrice (Money)>

<!ELEMENT TieredPrice (AmountTierPrice+ | QuantityTierPrice+)>
<!ATTLIST TieredPrice
         cumulative     (yes)   #IMPLIED
>
<!ELEMENT AmountTierPrice (MinTierAmount, (DiscountPercent | DiscountedPrice))>
<!ELEMENT QuantityTierPrice (DiscountPercent | DiscountedPrice)>
<!ATTLIST QuantityTierPrice
          minTierQuantity   %r8;  #REQUIRED
>
<!ELEMENT MinTierAmount (Money)>

<!--
   Used to create a relationship between two organizations
   Create is used to create a relationship. Delete is used to remove
   the relationship between the organizations.
-->
<!ELEMENT RelationshipRequest (Relationship+)>
<!ATTLIST RelationshipRequest
    action (create | delete) #REQUIRED
>

<!ELEMENT Relationship (OrganizationID)>
<!ATTLIST Relationship
    type (buyer | orgDataSubscription | sourcing) #REQUIRED
>

<!ELEMENT RelationshipResponse (RelationshipStatus+)>

<!ELEMENT RelationshipStatus (SubStatus, Relationship)>
<!--
   The code is similar to cXML status codes.
-->

<!--
   used for statuses inside document. Not at the document level
-->
<!ELEMENT SubStatus (Description)>
<!ATTLIST SubStatus
    code     %uint;        #REQUIRED
>

<!--
   Request to track a RFx
-->
<!ELEMENT RFxEventRequest (OrganizationID+)>

<!--
   The type can be one of
   periodic, continuous, dutch, english, exchange, japanese, sealedBid, schedSealedBid,
   openRFQ, openRFB, openRFI, sealedRFQ, sealedRFB, sealedRFI, negotiationSequential,
   negotiationParallel, negotiationParallelCollective or any other type added later.
   The type of RFx is not enumerated since these keep changing.
   In the launch phase a list of participants is sent. In the winner stage a
   list of winners is sent.
-->
<!ATTLIST RFxEventRequest
    rfxType    NMTOKEN  #REQUIRED
    phase  (launch | winner)  #REQUIRED
>



<!--
    Used to exchange information between two cooperating applications.
-->
<!ELEMENT ProviderDataRequest (SelectedService, Extrinsic*)>
<!ELEMENT ProviderDataResponse (Extrinsic*)>

<!--
Collaboration Request
   Request for a generic collaboration. For updates we use the
   collaborationID to reference the collaboration being updated.
   The CollaborationInfo piece is not sent during a statusUpdate operation.

   status
    the status of the request. Some recommended ones are
    buyerSubmitted | buyerEditing | supplierDeclined |
    buyerWithdrawn | expired |deleted |completed | inProgress for
    type = requisition

        collaborationID
    the id of the collaboration request in the buyer system.
    This needs to unique within just the buyer system, not globally.

        operation
    what operation is this request . defaults to "new"

        type
    the type of collaboration request recommended ones are
    "requisition"
-->
<!ELEMENT CollaborationRequest ( CollaborationInfo?)>
<!ATTLIST CollaborationRequest
        collaborationID     NMTOKEN #REQUIRED
   status           %string;        #REQUIRED
   operation        (new | update |statusUpdate)  "new"
   type             %string;        #REQUIRED
>

<!---
   Information about the collaboration. Any information specify to
   the collaboration like estimated amount etc. should be included
   in the extrinsics

   expirationDate
    the time when the request expires. This is just for
    informational purpose.

-->
<!ELEMENT CollaborationInfo (Name, Description?, Extrinsic*)>
<!ATTLIST CollaborationInfo
    expirationDate %datetime.tz; #IMPLIED
>


<!--
    This request is used to send information about a RFX.

    operation
        The operation being performed with this message.
        "new" indicates that this is the first time that the RFx is
        being published.
        "update" is used to send new header information when the
        public RFx information is changed.
        "updateState" is used to send changes in the RFx status.
        "updateParticipant" is used to send information about the
        RFx participant list only. This could be to send the list
        of winners or whenever the RFx participants are changed.
    rfxID
        The identifier of the RFX within the Sourcing instance.
    status
        The current status of the RFX and can be one of the
        following: New, Open, Suspended, Closed, Failed Recovery,
        Killed, Pending Selection, Scheduled, Preview,
        Pending Launch.
    type
        The type of RFX. Can be one of english, sealedBid,
        openRFQ, openRFB, openRFI, sealedRFQ, sealedRFB,
        sealedRFI, sealedRFP, negotiationSequential,
        negotiationParallel, negotiationParallelCollective
        or any other type added later.
        Note: type is not enumerated since the list is subject
        to change.
-->
<!ELEMENT RFxPublishRequest ( PublicRFxInfo?, RFxParticipantInfo* )>
<!ATTLIST RFxPublishRequest
    operation  (new | update | updateState | updateParticipant) #REQUIRED
    rfxID  NMTOKEN                     #REQUIRED
    status %string;                    #REQUIRED
    type   %string;                    #REQUIRED
>

<!--
    Provides summary information about a RFx.

    Note: Extrinsics are used to pass additional information
    about the RFx.
-->
<!ELEMENT PublicRFxInfo (Name, Description?,
                         Contact?, TimeRange?, Country?,
                         Classification*, Extrinsic*)>

<!--
    Provides information about a supplier's particpation in a RFx.

    status
        The current status of the supplier in the RFx.
        "participant" indicates the supplier is invited to the RFx.
        "winner" indicates the supplier has been selected as a winner.
        "nominated" indicates that the supplier would like to
        participate in a RFx pending approval by the RFx initiator.
        "approved" indicates that the RFx initiator has accepted the
        supplier's nomination request.
        "denied" indicates that the RFx initiator has rejected the
        supplier's nomination request.
        "deleted" indicates that the supplier has been removed from the
        list of participants.
-->
<!ELEMENT RFxParticipantInfo (#PCDATA)>
<!ATTLIST RFxParticipantInfo
    status (participant | winner | nominated | approved | denied | deleted) #REQUIRED
>

<!--
    Money element to indicate Available Amount on a Blanket Purchase Order
    or a Contract.
-->
<!ELEMENT AvailableAmount (Money)>

<!--
  Status update for an existing purchase order of type "blanket".
  open
   open the blanket purchase order, blanket orders can be invoiced or
   released against once they are opened
  close
   close the blanket purchase order, release type blanket order cannot
   release against once they are closed. But no release type blanket order
   still can be invoiced as long as there is an available amount.
  update
    update available amount with the amount specified in the AvailableAmount element.
-->
<!ELEMENT BlanketOrderStatus (AvailableAmount?, Comments?)>
<!ATTLIST BlanketOrderStatus
      action    (open | close | update)  #REQUIRED>

<!--
   BlanketOrderStatusUpdateRequest
   A request to update the status of a PurchaseOrder of type BPO.
   This request is used to update the blanket purchase order about any
   status update("open/close") and the available amount("update").

   OrderReference
      Reference to the blanket  purchase order that is being updated.
   BlanketOrderStatus
      Element representing the status updates to the blanket order.
-->
<!ELEMENT BlanketOrderStatusUpdateRequest (OrderReference, BlanketOrderStatus)>



<!-- ====
     DataSync* requests support the AOD Data Synchronization service.
==== -->

<!--
    DataSyncChangeListRequest

    Used to query AN for the list of objects requiring synchronization.
    The parameters indicate the type of data the client is interested, and
    a sequence number indicating the last time the client synced.

    scn
    rowNum
        scn and rowNum values should be the values the client received from
            the last successfully-synchronized change list request.
            They are used by the server to determine which objects need to
            be synced to the client.

    syncType
        Indicates the type of data this client is interested in. For example,
            S4 may require a different shape of data from SSP. A given client
            should always use the same value for this parameter.

    limit
        The maximum number of syncObjs to return. If there are more changes than the limit,
        subsequent invocations will be required.
-->
<!ELEMENT DataSyncChangeListRequest EMPTY>
<!ATTLIST DataSyncChangeListRequest
    scn                     %int;       #REQUIRED
    rowNum                  %int;       #IMPLIED
    syncType                %string;    #REQUIRED
    limit                   %uint;      #IMPLIED
>

<!--
    DataSyncChangeListResponse

    Returned in response to a DataSyncChangeListRequest.
    Contains a list of objects requiring synchronization.

    scn
        System change number.
    rowNum
         The client should save the scn and rowNum values and pass them to the next DataSyncChangeListRequest invocation

    Consumers
         0 or more lists of orgs concerned with the returned data; e.g. buyer orgs with relationships to returned supplier orgs.
    SyncObj
        Indicate object that need to be synced to the client.
-->

<!ELEMENT DataSyncChangeListResponse (Consumers*, SyncObj*)>
<!ATTLIST DataSyncChangeListResponse
    scn    %string; #REQUIRED
    rowNum %string; #IMPLIED
    morePending (yes) #IMPLIED
>

<!--
    Consumers

    Contains a list of ID's of 'consumer' objects.
    (In the case of s4 data sync, a "consumer" is a buyer with a sourcing relationship to the supplier org,
    and this element would contain a list of buyer ANId's.)

    id
        An ID unique within the scope of the xml document
-->
<!ELEMENT Consumers (#PCDATA)>
<!ATTLIST Consumers
    id ID #REQUIRED
>

<!--
    DataSyncDataRequest

    Used to fetch synchronization data for one or more objects.

    SyncObj
        Identifies the objects to synchronize

-->

<!ELEMENT DataSyncDataRequest (SyncObj+)>


<!--
    DataSyncDataResponse

    Returned in response to a DataSyncDataRequest.
    Contains the object snapshot(s) for synchronizing the client.

-->

<!ELEMENT DataSyncDataResponse (DataSyncSnapshot*)>


<!--
    DataSyncSnapshot

    Wraps an object snapshot containing latest data

    objectId
        Uniquely identifies the object
    scn
        The scn of the transaction of most recent update to the object
-->

<!ELEMENT DataSyncSnapshot ANY>
<!ATTLIST DataSyncSnapshot
    objectId %string;        #REQUIRED
    type     (Org | User | Certification) #REQUIRED
    scn      %string;        #IMPLIED
    isDelete (yes)           #IMPLIED
>

<!--
    SyncObj
        Identifies an object requiring data synchronization. Elements of this type
        are returned to the data sync client in DataSyncChangeListResponse to indicate
        to the client what needs to be synced, and sent to the server in
        DataSyncDataRequest to indicate which object snapshots to return.

        objId
            The ID of the object to fetch
        type
            the object domain specifier
        scn
            scn (transaction) of the change
        parentId
            the id of the object that has an ownership relationship to the object represented by objId, if any.
        consumers
            If present, refers to a <buyers> element identifying the buyers for the supplier org related to the object
        isDelete
            If present, indicates that the identified object has been deleted.
-->
<!ELEMENT SyncObj EMPTY>
<!ATTLIST SyncObj
    objId     %string;                   #REQUIRED
    type      (Org | User | Certification) #REQUIRED
    scn       %string;                   #IMPLIED
    parentId  %string;                   #IMPLIED
    consumers IDREF                     #IMPLIED
    isDelete (yes)                         #IMPLIED
>

<!--
    Certification
        Certification info for a supplier organization. Used in data sync org snapshot.
-->
<!ELEMENT Certification (CertificationAttachment*)>
<!ATTLIST Certification
    id                  %string;                #REQUIRED
    type                %string;                #REQUIRED
    expirationDate      %datetime.tz;           #IMPLIED
    issueDate           %datetime.tz;           #IMPLIED
    certificationNumber %string;                #IMPLIED
    authorityInfo       %string;                #IMPLIED
    certificationName   %string;                #IMPLIED
    certificationLocation %string;              #IMPLIED
    yearValid           %int;                #IMPLIED 
>

<!ELEMENT CertificationAttachment (Attachment)>
<!ATTLIST CertificationAttachment
    fileName            %string;                #IMPLIED
    fileSize            %int;                   #IMPLIED
    fileDescription     %string;                #IMPLIED
>

<!ELEMENT ContactData (Contact, ContactAssignment*)>
<!ATTLIST ContactData
    businessTitle       %string;                #IMPLIED
>

<!ELEMENT ContactAssignment EMPTY>
<!ATTLIST ContactAssignment
    org     %string;    #IMPLIED
    role    %string;    #REQUIRED
>

<!--
    BusinessType
        For representing org business types, which come from the table org_business_type and the master
        table business_type.

        name
            The name of the business type. This is either an AN-defined name ("Government/Public Agency", "Retailer",
            "Utilities", "Broker", "Contractor/Consultant", "Transportation/Logistics", "Distributor",
            "Distributor/Wholesaler", "Energy Service Provider", "Generator", "Manufacturer", "Manufacturer(OEM),
            "Sales Agent/Manufacturer's Representative", "Printer", "Producer", "Service Provider", "Mining Provider",
            "Value Added Reseller", "System Integrator", "Wholesaler"), or "Other".
        value
            Not present unless the name is "Other", in which case this attribute contains the user-entered string.
-->
<!ELEMENT BusinessType EMPTY>
<!ATTLIST BusinessType
    name    %string;    #REQUIRED
    value   %string;    #IMPLIED
>

<!--
    SupplierMigrationInfo
        The info stores the organization id and user id that requests for AOD migration
-->
<!ELEMENT SupplierMigrationInfo (Extrinsic*)>
<!ATTLIST SupplierMigrationInfo
    orgId %string;                         #REQUIRED
    userId %string;                        #REQUIRED
>


<!--
    SupplierMirgationResult
        The results stores the migration status, the ANID of organization, and the new AOD user id
        The first credential is to specify the Supplier ANID.  The domain is NetworkId
        The second credential is to specify the user AN login id. The domain is NetworkUserId
-->
<!ELEMENT SupplierMigrationResult (Credential, Credential, Extrinsic*)>
<!ATTLIST SupplierMigrationResult
    status (migrated | linked)             #REQUIRED
>


<!--
    UpdateMigratedSupplierRequest
        The request sends an s4 suppplier migration status to S4.  The request contains
        a new supplier id, and identity of the user.
-->
<!ELEMENT UpdateMigratedSupplierRequest (SupplierMigrationInfo, SupplierMigrationResult)>



<!--
   Certificate
        It specifies the certificate for S4.  TimeRange specifies the certificate valid time.
        Name specifies the name of the attachment.  Attachment is the actual certificate file.
-->
<!ELEMENT Certificate (TimeRange, Name, Attachment, Extrinsic*)>
<!ATTLIST Certificate
    name %string;             #REQUIRED
>

<!--
    S4DataPushRequest
-->
<!ELEMENT S4DataPushRequest (Organization)>

<!--
    S4DataPushResponse
    Returned in response to a S4DataPuhsRequest processed by S4DataPushRequestHandler.
-->
<!ELEMENT S4DataPushResponse (User*)>
<!ATTLIST S4DataPushResponse
    s4orgprivateid %string; #REQUIRED
    organid %string; #IMPLIED
>
<!ELEMENT User (#PCDATA)>
<!ATTLIST User
    s4userprivateid  CDATA #REQUIRED
    useranguid  CDATA #REQUIRED
    useranid CDATA #REQUIRED
>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Transport.mod#3 $
-->

<!--
    For better definitions of these Elements/Entities, refer to the cXML
    Protocol Specification documents.
-->

<!--
    Defines the set of known valid cXML digital signature versions
-->
<!ENTITY % cxml.signatureVersions "(1.0)">

<!--
    cXML envelope

    version
        Version of this cXML transmission.  Should be less than or equal
    to the version portion of the SYSTEM identifier for this document.

    payloadID
        A unique identifier for this document.

    timestamp
        The date and time at which this document was originally created.

    signatureVersion
        If present, specifies the cXML digital signature version to
        which this document conforms.  This implies that the
        ds:Signature element must be present.  It is an error if this
        attribute is present and the document does not conform to the
        specified signature version.  If absent, the document is not
        signed.

    xml:lang
        The default locale for all strings (not formatted items such as
    dates, times and numbers) in this document.  This attribute will be
    required in a future version of cXML.  (Leaving it out is
    deprecated.)
-->
<!ELEMENT cXML (((Header, (Message | Request)) | Response), ds:Signature*)>
<!ATTLIST cXML
    version    %string;       "&cxml.version;"
    payloadID  %string;       #REQUIRED
    timestamp  %datetime.tz;  #REQUIRED
    signatureVersion %cxml.signatureVersions; #IMPLIED
    xml:lang   %xmlLangCode;  #IMPLIED
>

<!-- header -->
<!ELEMENT Header (From, To, Sender, (Path, OriginalDocument)?)>

<!ELEMENT From (Credential+, Correspondent?)>
<!ELEMENT To (Credential+, Correspondent?)>
<!ELEMENT Sender (Credential+, UserAgent)>

<!--
    Path. A list of nodes that records the path taken by a user through 
    a punchout chaining scenario.

    If no route node is included then punchout chaining scenario is not executed and only copies are processed. 
-->
<!ELEMENT Path (Node+)>

<!--
    A Node is any entity connected to a Network.
    
    type
        A node can define itself as a router node or a copy node.  Routers
    assume responsibility for the transaction.  Copy Nodes request to only
    be aware of the transaction.
    
    itemDetailsRequired
        Intermediary Nodes may want to support special operations without
    having to store specific information required to fulfill that operation.
    This attribute tells the previous node to send ItemDetail information
    when performing a PunchOutSetupRequest edit/inspect operation.
-->
<!ELEMENT Node (Credential+)>
<!ATTLIST Node
    type (copy | route) #REQUIRED
    itemDetailsRequired (yes) #IMPLIED
>


<!--
    Identifies the previous document in the situation that a router node
    forwards a message or request on to a more distant node.
    
    payloadID
        The payloadId of the original document.
-->
<!ELEMENT OriginalDocument EMPTY>
<!ATTLIST OriginalDocument
    payloadID %string; #REQUIRED
>

<!--
    A textual string representing who the UserAgent is conducting the cXML
    conversation. Analogous to UserAgent for HTTP conversations.
-->
<!ELEMENT UserAgent (#PCDATA)>

<!--
    DEPRECATED 
    Do not use this element.
-->
<!ELEMENT DigitalSignature ANY>
<!ATTLIST DigitalSignature
    type      %string;  "PK7 self-contained"
    encoding  %string;  "Base64"
>

<!--
    A shared secret. Typically, this is a username/password type of secret
    exchanged through a secure transport before communication takes place.
-->
<!ELEMENT SharedSecret ANY>

<!--
    Represents an identity for a credential.

    lastChangedTimestamp
       When the underlying object last changed in the originating system.
       This is used in cases where the same object (e.g. a buyer
       organization) is replicated, and kept synchronized, across two
       systems.
-->
<!ELEMENT Identity ANY>
<!ATTLIST Identity
    lastChangedTimestamp  %datetime.tz;  #IMPLIED
>

<!--
    A Credential Message Authentication Code (MAC).  This is used in
    situations where one party (the sender) must prove to another (the
    receiver) that it is authenticated by a shared secret with a third
    party trusted by both.

    The MAC should be computed by the trusted third party and
    transferred to the sender.  The MAC should be opaque to the sender
    (i.e., it should be secure and non-reversible).  The MAC should
    use as its inputs enough information to accomplish the following
    goals:

    (1) The MAC must prove to the receiver that it really originated
    with the trusted third party.  E.g., the MAC could use a shared
    secret between the receiver and the trusted third party as its
    secret key.

    (2) The MAC should be usable only by a certain sender.  E.g., the
    MAC could authenticate an identifier for the sending organization.

    (3) The MAC should prove that the sender is authorized to send on
    behalf of the From organization.  E.g., the MAC could authenticate
    an identifier for the From organization.

    (4) The MAC should limit the risk of the MAC being compromised and
    used to impersonate the sender by another party communicating with
    the receiver.  E.g., the MAC could authenticate an expiration date
    or sequence number.

    type
        An implementation-dependent identifier for the exact data
        being authenticated and the method in which it is formatted
        for authentication.  Currently the only supported value is
        "FromSenderCredentials".

    algorithm
        An implementation-dependent identifier for the exact MAC
        algorithm used on the data.  Currently the only supported
        value is "HMAC-SHA1-96".

    creationDate
        The time at which this MAC was issued.  The receiver must not
        accept the MAC before this time.

    expirationDate
        The time at which this MAC expires.  The receiver must not
        accept the MAC after this time.
-->
<!ELEMENT CredentialMac (#PCDATA)>
<!ATTLIST CredentialMac
    type           %string;      #REQUIRED
    algorithm      %string;      #REQUIRED
    creationDate   %datetime.tz; #REQUIRED
    expirationDate %datetime.tz; #REQUIRED
>

<!--
    A combination of an Identity and authentication element. If the
    authentication element is present, it strongly authenticates who/what
    someone is.  The authentication element should not be sent within Message
    documents transported via an end user's browser.  One-way communication
    must be authenticated in the transport layer.

    domain
        In what domain is this Credential represented?
    type
        Does this Credential identify a marketplace or one of its member
        companies?  A Credential without this attribute describes a member
        company or unaffiliated buying organization.
-->
<!ENTITY % cxml.authentication  "SharedSecret |
                                 DigitalSignature |
                                 CredentialMac"
>
<!ELEMENT Credential (Identity, (%cxml.authentication;)?)>
<!ATTLIST Credential
    domain  %string;      #REQUIRED
    type    (marketplace) #IMPLIED
>

<!--
    Status of a Response or Message.  If present, the element content
    describes specifics of a problem.

    code
        HTTP or cXML-specific status code.

    text
        Textual version of the status code (not specific issue).

    xml:lang
        The language in which the text attribute and element content are
    written.  This attribute will be required in a future version of
    cXML.  (Leaving it out is deprecated.)
-->
<!ELEMENT Status (#PCDATA)>
<!ATTLIST Status
    code     %uint;        #REQUIRED
    text     %string;      #REQUIRED
    xml:lang %xmlLangCode; #IMPLIED
>

<!--
    Message

    When Status not present, '<Status code="200" text="OK" />' is implied.
-->
<!ELEMENT Message (Status? %cxml.messages;)>
<!ATTLIST Message
    deploymentMode  (production | test)  "production"
    inReplyTo       %string;  #IMPLIED
    Id              ID        #IMPLIED
>

<!-- request -->
<!ELEMENT Request (%cxml.requests;)>
<!ATTLIST Request
    deploymentMode  (production | test)  "production"
    Id              ID        #IMPLIED
>

<!-- response -->
<!ELEMENT Response (Status %cxml.responses;)>
<!ATTLIST Response
    Id              ID        #IMPLIED
>

<!--
    This element includes signed cXML-specific details about the
    document being signed.  When a cXML document is signed, this
    element must appear inside the first ds:Object element in the
    ds:Signature element.

    signatureVersion
        This specifies the cXML signature version to which this
        document conforms.  It is an error if this attribute value
        does not exactly match the value of the signatureVersion
        attribute from the top-level cXML element.  It is an error if
        the document does not conform to the specified cXML signature
        version.

    payloadID
        Specifies the payloadID of the document.  It is an error if
        the value of this attribute does not exactly match the value
        of the payloadID attribute from the top-level cXML element.

    Id
        This identifies this cXMLSignedInfo element for purposes of
        the signature.  This attribute must always be present and
        should always have the value "cXMLSignedInfo"

-->
<!ELEMENT cXMLSignedInfo EMPTY>
<!ATTLIST cXMLSignedInfo
    signatureVersion    %cxml.signatureVersions;        #REQUIRED
    payloadID           %string;                        #REQUIRED
    Id                  ID                              #REQUIRED
>

<!--
    This element includes the contact information of the organisation
    to/from whom the document is sent/received.

    preferredLanguage
        optional language which the organisation, identified by this 
        element, would prefer to use. Refer to the definition of 
        xmlLangCode entity.
-->
<!ELEMENT Correspondent (Contact+, Extrinsic*)>
<!ATTLIST Correspondent
    preferredLanguage     %xmlLangCode;        #IMPLIED
><!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/schema/Modules/OrganizationID.mod#1 $
-->
<!--
     OrganizationID

     Credentials listed here describe the same organization.  May include
     type="marketplace" Credential elements if that context is necessary.
-->
<!ELEMENT OrganizationID (Credential+)>


<!--
    The representation of a line item as it needs to be for sending to a
    supplier.

    quantity
        How many items are desired. 
    lineNumber
        Position (counting from 1) of this item in a QuoteRequest.  Used to
        maintain a reference between items in create and update
        documents.
    requestedDeliveryDate
        The date this item was requested for delivery.
    agreementItemNumber 
        The corresponding Item Number of the Item in the Master Agreement if this is a 'release' order item.
-->
<!ELEMENT QuoteItemOut (ItemID?, ItemDetail, ShipTo?, Shipping?,
                   Tax?, SpendDetail?, Total?, Contact*, Comments?)>
<!ATTLIST QuoteItemOut
    quantity               %r8;      #REQUIRED
    lineNumber             %uint;    #IMPLIED
    requestedDeliveryDate  %datetime.tz;    #IMPLIED
>

<!--
    The representation of a line item in a quote.

    type
        supplier action type.
    quantity
        How many items are quoted. 
    lineNumber
        Position (counting from 1) of this item in a QuoteRequest.  Used to maintain a reference between items in create and update documents 
    requestedDeliveryDate
        The date this item was requested for delivery.
    rank 
        The rank of the bid
-->
<!ELEMENT QuoteItemIn (ItemID?, ItemDetail, ShipTo?, Shipping?,
                   Tax?, SpendDetail?, Total?, Contact*, Comments?)>
<!ATTLIST QuoteItemIn
    type  (accept | reject | update | final | award) #REQUIRED
    quantity               %r8;      #REQUIRED
    lineNumber             %uint;    #IMPLIED
    requestedDeliveryDate  %datetime.tz;    #IMPLIED
    rank                   %r8;      #IMPLIED
>

<!--
    Header of an QuoteMessage.  This is the quote data that is sent to the buyer. 
    type
        supplier action type.
    quoteID
        unique identifier for a quote. 
    quoteDate
        The date when the quote is submitted.
-->
<!ELEMENT QuoteMessageHeader (OrganizationID, Total, ShipTo?, Contact*, QuoteRequestReference?, Comments?, Extrinsic*)>
<!ATTLIST QuoteMessageHeader
    type  (accept | reject | update | final | award)	#REQUIRED
    quoteID    %string;          #REQUIRED
    quoteDate  %datetime.tz;     #REQUIRED
    currency  %isoCurrencyCode;	 #REQUIRED
    xml:lang  %xmlLangCode;      #REQUIRED
>


<!ELEMENT QuoteRequestReference (DocumentReference?)>
<!ATTLIST QuoteRequestReference
    requestID		%number;		#REQUIRED
    requestDate	%datetime.tz;	#REQUIRED
>

<!--
    Definition for a quote. This is the data that is sent to the buyer.
-->
<!ELEMENT QuoteMessage (QuoteMessageHeader, QuoteItemIn+)>

<!-- QuoteRequest* Elements -->
<!--
    Definition of an request for quote.  This is the data that is sent to the supplier
    to have them submit a quote.
-->
<!ELEMENT QuoteRequest (QuoteRequestHeader, QuoteItemOut*)>

<!--
    Header of an QuoteRequest.  This is the data that is sent to the supplier
    to have them submit a quote. Total
    represents the total amount of this QuoteRequest.

    requestID
        The buyer system id for this request.  This is an internal
        Buyer unique number.

    requestDate
        The date and time the QuoteRequest request was created.

    type
        The type of the QuoteRequest request. Defaults to "new".

    openDate
        The date when a QuoteRequest is open for supplier responses.
    closeDate
        The date when a QuoteRequest is closed for supplier responses.
    previewDate
        The date when a QuoteRequest is viewable by suppliers.

    quoteReceivingPreference is used by the buyer system to identify the preference for
        receiving QuoteMessage back from the sourcing system
        winningOnly - should result in only the winning supplier quotes being sent to the buyer
        finalBidsFromAll - should result in  quotes from suppliers being sent after event closes
        all - quotes are sent to the buyer system as soon as supplier submits the bid. It does not wait for event closing     
-->


<!ELEMENT QuoteRequestHeader (Name?, SupplierSelector?, Total?, Description?, ShipTo?, Contact*, Comments?, Extrinsic*)>

<!ATTLIST QuoteRequestHeader
    requestID    %string;        #REQUIRED
    requestDate  %datetime.tz;   #REQUIRED
    type       (new | update | delete)  "new"
    openDate  %datetime.tz;      #REQUIRED
    closeDate %datetime.tz;      #REQUIRED
    previewDate %datetime.tz;    #IMPLIED
    templateName %string;        #IMPLIED
    currency  %isoCurrencyCode;  #REQUIRED
    xml:lang  %xmlLangCode;      #REQUIRED
    quoteReceivingPreference   (winningOnly | finalBidsFromAll | all)   #IMPLIED
>

<!--
    SupplierSelector is used to define the way suppliers are selected for responding to
    RFQ.
    The field is optional. Administrator can configure the default matching type for a given category of commodity. Hence, If no value is provided here, the matching type will be picked up from administrator's configuration. If the value is provided here, then administrator configuration will be ignored. To know more talk to your administrator.

    OrganizationID is used to select explicit suppliers to be invited for bidding

    matchingType:invitationOnly means invite suppliers listed in OrganizationID element(s)
    matchingType:approvedVendorOnly means any supplier from vendor-master can bid on RFQ. However,
    the RFQ engine may narrow the suppliers that can bid based on factors such as commodity and territory match.
    invitationOnly:public means any public supplier can bid on the RFQ. The supplier may already exist in vendor-master.
    However, the RFQ engine may narrow the suppliers that can bid based on factors such as commodity and territory match.
-->
<!ELEMENT SupplierSelector (SupplierInvitation*)>

<!ATTLIST SupplierSelector
    matchingType (invitationOnly|approvedVendorOnly|public) #IMPLIED
>

<!--
  Supplier invitation represents explicit invitation for a supplier.
  Supplier can have two different status in buyer system:
     approved - supplier exists in buyer system and is approved
     contracted - supplier exists in buyer system and is contracted (and is also approved). Buyer system may give
                  MasterAgreementIDInfo as well in that case

  Correspondent is used to supplier's contact information from ERP to network or sourcing system. If the supplier does not
  already exists in the receiving system this information can be used to create the supplier and contact the supplier.

  OrganizationID will have credential information that can uniquely identify the supplier in the ERP.
-->
<!ELEMENT SupplierInvitation (OrganizationID, Correspondent?, MasterAgreementIDInfo?, Extrinsic*)>

<!ATTLIST SupplierInvitation
    supplierStatus       (approved | contracted )  "approved"
>

<!--
    For better definitions of these Elements/Entities, refer to the cXML
    User's Guide and related documents.
-->

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/schema/Modules/QuoteEntities.mod#3 $
-->

<!--
     Top-level entities used in Transport.mod.  Defined here to allow easy
     extention of the cXML specification (using additional DTDs) without
     redefining these entities.
-->

<!ENTITY % cxml.requests "(QuoteRequest)">

<!ENTITY % cxml.messages ",(QuoteMessage)">

<!ENTITY % cxml.responses "">
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    Please note that all amounts at receipt line level should add up
    to the Total specified in ReceiptRequest.
-->

<!--
    Request representing details about a receipt against Purchase Order or Master Agreement
    sent from a buyer to supplier. Provides purchase order references, line item references, 
    quantities and amounts received and, optionally, reference to related ship notices from supplier.

    This request can be used to send receipt information for any portion of all or 
    selected line items from single or multiple purchase orders.

    ReceiptRequestHeader
         The header information of this receipt.

    ReceiptOrder
         Details about purchase order or master agreement against which this receipt is generated.

    Total 
        Summary total amount of all receipt line item amounts.        
-->
<!ELEMENT ReceiptRequest (ReceiptRequestHeader,ReceiptOrder+,Total)>

<!-- 
    Defines header information of an ReceiptRequest

    Comments
        Textual comments for this receipt

    Extrinsic
        Additional information related to this receipt. Should not duplicate
        anything in ReceiptRequestHeader or ReceiptRequest.

    receiptID
        A buyer-generated identitfier for this receipt. A unique identifier for 
        this receipt document.

    receiptDate
        Date and time this receipt was deemed fully received in the Buying Organization. 
	  Should be earlier than the document's timestamp.
	
    operation
        Type of operation described by this receipt document. Currently only supported operation 
        is "new". This can be furthur enhanced to support "update" or "delete" operations.
-->
<!ELEMENT ReceiptRequestHeader (Comments?,Extrinsic*)>
<!ATTLIST ReceiptRequestHeader
	receiptID %string; #REQUIRED
	receiptDate %datetime.tz; #REQUIRED
      operation (new) #REQUIRED
>

<!-- 
    Defines the receipt information of a purchase order or master agreement with item details.
    In this case, an receipt line is an ReceiptItem and its receipt line number is 
    ReceiptItem@receiptLineNumber.

    ReceiptOrderInfo
        The reference information of the purchase order or master agreement.

    ReceiptItem
        The information of an item in the purchase order or master agreement.

    closeForReceiving
        Flag indicating if the underlying order or master agreement needs to be 
        closed for furthur receiving on approval of this receipt. 
        It is false(no), by default.

        If this receipt is against a purchase order or release order against a
        master agreement, this flag indicates corresponding order being closed for
        receiving. If this receipt is against a no release master agreement, this 
	  flag indicates closing the master agreement for receiving.
-->
<!ELEMENT ReceiptOrder (ReceiptOrderInfo, ReceiptItem+)>
<!ATTLIST ReceiptOrder
	closeForReceiving (yes) #IMPLIED
>

<!-- 
    Defines information related to a purchase order, including purchase order
    reference and related master agreement reference, if any.

    The various content options of ReceiptOrderInfo are in order
    of preference, i.e., OrderReference is strongly recommended.  If
    that is not possible, MasterAgreementReference, MasterAgreementIDInfo,
    OrderIDInfo should be used, in that order.

    If this receipt is against a release order, reference to both order as well
    as the master agreement should be specified. If the receipt is against a 
    no-release master agreement, only the master agreement reference is required.
    If the receipt is against a puschase order, reference to the purchase order
    should be specified.

    OrderReference
        The reference to the purchase order being received.

    MasterAgreementReference
        The reference to the master agreement being received.

    OrderIDInfo
        The buyer system order ID of the order.

    MasterAgreementIDInfo
        The buyer system ID of the corresponding master agreement if receiving
	  against master agreement.
-->
<!ELEMENT ReceiptOrderInfo
    ( (OrderReference, (MasterAgreementReference | MasterAgreementIDInfo)?) |
      (MasterAgreementReference, OrderIDInfo?) |
      (MasterAgreementIDInfo, OrderIDInfo?) |
      (OrderIDInfo))>

<!-- 
    Defines line item in the ReceiptRequest

    ReceiptItemReference
        The references related to this line item.

    UnitRate
        The amount(s) to be paid per unit (of specified measure).

    ReceivedAmount
        Amount of received goods or services for this line item. The total received amount for the rate.  
        The total received amount must equal to quantity x UnitRate.

    AssetInfo
        Optional asset information for this line item. Specified for each quantity of the line item.
        
    DeliveryAddress
             Address where goods are received.

    Comments
        Textual comments for this line item.

    receiptLineNumber
        Buyer defined ID for the current line item. It should be unique across
        all receipt line items of the same ReceiptRequest.

    quantity
        The quantity being actually received or returned for the current line.
        A negative quantity indicates reversal of the previous receipt quantity for this line.
    
    type 
	Indicates whether the items are "received" or "returned".

    parentReceiptLineNumber
        lineNumber of the parent line item in the receipt request.

    itemType
        specify whether the line item contains child line items or acts as a child item

	compositeItemType
		specify type of parent line item(lot/box)

    completedIndicator
        An attribute specifying whether a component ship notice item is considered closed. This would mean that no more component receipts are expected for this item.
-->
<!ELEMENT ReceiptItem (ReceiptItemReference, UnitRate, ReceivedAmount, AssetInfo*, DeliveryAddress?, Comments?, Extrinsic*)>
<!ATTLIST ReceiptItem
	receiptLineNumber             %uint;                #REQUIRED
	quantity                      %r8;                  #REQUIRED
	type                      (received|returned)       #IMPLIED
    parentReceiptLineNumber       %uint;                #IMPLIED
    itemType                      %lineItemType;        #IMPLIED
    compositeItemType			  %compositeItemType;	#IMPLIED
    completedIndicator        (yes)                     #IMPLIED
>

<!-- 
    Defines all references related to a line item in this receipt.

    ItemID
        The supplier part number of current line item, copied from
        OrderRequest.

    Description
        The line item description, copied from OrderRequest.

    ManufacturerPartID
        The manufacturer part number.

    ManufacturerName
        The name of the manufacturer.

    ShipNoticeReference
        Reference to the ShipNoticeRequest document sent from the supplier 
        when this item was shipped.

    ShipNoticeIDInfo
       ID of the ShipNoticeRequest known to the Buyer system. This ID is used when ShipNoticeReference is omitted.

    lineNumber
        The line number of current line item, copied from OrderRequest.In the scenario where the OrderRequest is blank, the line number will refer to that of the Component Ship Notice i.e. the ASN referenced in the ShipNoticeReference .
-->
<!ELEMENT ReceiptItemReference (ItemID?, Description?, (ManufacturerPartID, ManufacturerName)?, (ShipNoticeReference | ShipNoticeIDInfo)?)>
<!ATTLIST ReceiptItemReference
	lineNumber %uint; #REQUIRED
>


<!-- 
    Amount of goods or services received by the buying organization.
-->
<!ELEMENT ReceivedAmount (Money)>

<!--
    The delivered address for an item.
-->
<!ELEMENT DeliveryAddress (Address)>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!-- ====
   This module defines several elements used to construct Type definitions
   describing parametric catalog item data.  These elements are intended
   to replace the deprecated SearchGroup and SearchGroupAttribute element
   definitions.  These elements provide a richer and more general framework
   for defining parametric Types, and they allow the definition/standardization
   of parametric Types from a TypeProvider organization independent of the
   Index data in which the current SearchGroup elements are.

   Note that the SearchGroupData and SearchDataElement element definitions
   are used to specify the actual parametric data for a given catalog item.
   The SearchGroupData element must reference a known, defined Type, and
   the SearchDataElement elements are used to specific data for each
   TypeAttribute within that Type.
==== -->

<!ELEMENT TypeDefinition (TypeProvider, Comments?, (PrimitiveType | Type)+)>

<!-- ====
   The provider of these type definitions, identified by a name and one
   or more ID's, e.g., NetworkID AN001001001, or DUNS 444455556.

   Note the required name attribute and the optional list of Name
   children.  The optional list is for localized display purposes,
   allowing different names to be provided per locale.  The name
   attribute is the "canonical" name used to reference the type
   provider when fully qualifying the name of a type (e.g., in a
   SearchGroupData element reference).  See a word below on
   Type naming.
==== -->

<!ELEMENT TypeProvider (Name*, OrganizationID)>
<!ATTLIST TypeProvider
    name    %string; #REQUIRED
>

<!--
   =====================================================
   A Type is a named element containing one or more TypeAttributes.  A
   Type may "extend" (or "derive from") another Type, thus inheriting
   its parents TypeAttributes.  There is one important distinction
   between Type inheritance and a normal OO inheritance model: child
   TypeAttributes may *not* override parent TypeAttributes.  It is
   considered illegal to define a TypeAttribute of the same name as
   a parent TypeAttribute.

   Type descriptions may be provided in multiple locales through the
   optional Description child element list.  The ShortName element
   within that Description should be used to provide an alternative
   locale specific name for the Type.  The required name attribute
   should be used within the SearchGroupData element to reference
   a given Type.

   A Type name is always scoped by a TypeProvider name, allowing for
   the existence of multiple Type taxonomies.  Applications should
   respect a short-hand notation for a fully-qualified type name
   outside a defined TypeProvider scope of the form:

            "TypeProviderName:TypeName"

   E.g., if an organization named "UNSPSC" provides a type definition
   called "Pipe" which defines the parametric attributes of a Pipe,
   that Pipe Type would be referenced as "UNSPSC:Pipe" when referenced
   in a SearchGroupData name.
   =====================================================
-->
<!ELEMENT Type (Name*, Description*, TypeAttribute*)>
<!ATTLIST Type
    name    %string; #REQUIRED
    extends %string; #IMPLIED
>

<!--
   =====================================================
    An attribute within a Type.  The name attribute is required and is the name
    used in the SearchDataElement element.  The optional Name element children
    may be used to provide locale-specific alternative names for this attribute.

    TypeAttributes themselves are of a named type, as indicated by the "type"
    attribute.  The name may be another Type, or a PrimitiveType, defined below.

    shortTag        Alias for attribute, reserved for future use.

    mappedFrom      For fields that are defined implicitly from other objects in
                    the system specify location.

    isRequired      Indicates whether a (non-empty) value for the given attribute
                    is required.

    isRefinable     Indicates whether the given attribute is refinable in search
                    queries. All refinable attributes are currently indexed.

    isRequiredForOrdering Indicates that the value for an attribute must be 
                    provided as part of an order sent to the supplier

    isSearchable    Indicates whether the given attribute is searchable in search
                    queries. All searchable Attributes are currently indexed.

    isCollection    Indicates whether repeating values are allowed for the given
                    attribute

    isCaseSensitive Indicates whether case should be preserved for the given
                    attribute. This property only applies to attributes of type string
                    or literal. It has no effect on numeric, boolean, or date
                    attributes, nor does it apply to attributes of complex type.

    isInKey         Indicates whether the given attribute should be considered part
                    of the unique key for the type.

    isInFreeTextSearch Indicates whether the given attribute value should be indexed
                       to be a candidate in a free-text (All) query.

    isHidden        Indicates whether or not this attribute is displayable to a user.

    isSortable      Indicates if this attribute can be sorted.

    isReadOnly      Indicates if the value is frozen and can't be changed by the
                    receiving application.

    unit            Optional string indicating the unit of the given attribute, if
                    applicable.  E.g., if the TypeAttribute is of a PrimitiveType
                    with a scalar type of "integer", this unit might be "IN" to
                    indicate inches.
   =====================================================
-->
<!ELEMENT TypeAttribute (Name*, Description*, (EnumerationValue+ | Range)?, Extrinsic*)>
<!ATTLIST TypeAttribute
    name                  %string;        #REQUIRED
    type                  %string;        #REQUIRED
    shortTag              %string;        #IMPLIED
    mappedFrom            %string;        #IMPLIED
    isRequired            (yes)           #IMPLIED
    isRequiredForOrdering (yes)           #IMPLIED
    isRefinable           (yes)           #IMPLIED
    isSearchable          (yes)           #IMPLIED
    isCollection          (yes)           #IMPLIED
    isCaseSensitive       (yes)           #IMPLIED
    isInKey               (yes)           #IMPLIED
    isInFreeTextSearch    (yes)           #IMPLIED
    isHidden              (yes)           #IMPLIED
    isSortable            (yes)           #IMPLIED
    isReadOnly            (yes)           #IMPLIED
    unit                  %string;        #IMPLIED
>

<!--
   EnumerationValue allows one to specify a set of one or more
   valid data values for the given TypeAttribute
-->
<!ELEMENT EnumerationValue ANY>

<!--
   Range allows one to specify a range of valid data values for a
   given TypeAttribute
-->
<!ELEMENT Range (RangeBegin, RangeEnd)>
<!ELEMENT RangeBegin ANY>
<!ATTLIST RangeBegin
    inclusive           (yes)          #IMPLIED
>
<!ELEMENT RangeEnd ANY>
<!ATTLIST RangeEnd
    inclusive           (yes)          #IMPLIED
>

<!ENTITY % scalarType "(integer | string | literal | double | date | boolean)">

<!--
   =====================================================
   PrimitiveType is a named scalar type, where the list of recognized
   scalar types is given above.  These types can be thought of as
   re-usable building blocks for defining simple TypeAttributes, e.g.,
   a string of length 255, etc.

   min          Optional attribute indicating the minimum length for
                a TypeAttribute of scalarType "string" or "literal"

   max          Optional attribute indicating the maximum length for
                a TypeAttribute of scalarType "string" or "literal"

   maxPrecision Optional attribute indicating the maximum precision for
                a TypeAttribute of scalarType "double"

   maxScale     Optional attribute indicating the maximum scale for
                a TypeAttribute of scalarType "double"

   =====================================================
-->
<!ELEMENT PrimitiveType (Description?)>
<!ATTLIST PrimitiveType
    name            %string;        #REQUIRED
    type            %scalarType;    #REQUIRED
    min             %string;        #IMPLIED
    max             %string;        #IMPLIED
    maxPrecision    %string;        #IMPLIED
    maxScale        %string;        #IMPLIED
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Query.mod#1 $
-->

<!-- 
    ==================================================
     Request - Search Request
    ================================================== 
-->

<!-- 
    Terminal operation elements are used to specify leaf-level query
    actually to do with the fields.
-->
<!ENTITY % terminalOp '
      IsEqual | IsNotEqual | IsGreaterThan | IsLessThan  
    | IsIn | IsNull | IsNotNull | IsGreaterOrEq | IsLessOrEq
    '>

<!-- 
    Non-terminal, or boolean, operation elements are used to combine
    child operation elements to build an expression tree for the
    SearchConditions element
-->
<!ENTITY % boolOp '
      AndCondition | OrCondition | NotCondition
    '>

<!-- SearchRequest* Elements -->
<!--
    Request to search for catalog items or types.  This request
    defines what to search for, and the query condition of the
    search. It is sent to the ACSN catalog server, which performs a
    search and returns the items satisfying the query conditions.

    The TypeIdentiifer element is used to indicate what to search for,
    it may be:

    Ariba:CatalogItem
        This includes all the catalog items, both normal catalog items
        and items with parametric data.

    Type
        This indicates that the search should return type definitions.

    <Parametric Type Identifer>
        Only the items that belong to this parametric type will be
        searched.

-->
<!ELEMENT SearchRequest (TypeIdentifier, SearchField+, SearchConditions?, 
	SearchOptions)>

<!-- 
	TypeIdentifier is used to identify a Type.  The name attribute
	for this Element should be set to a fully qualified Type,
	e.g. "TypeProvider:TypeName".   SearchRequest is currently the
  	only transaction using this element; if we reintroduce a
	TypeRequest/TypeResponse transaction, we should move this
	definition into Type.mod (currently public)
-->
<!ELEMENT TypeIdentifier EMPTY>
<!ATTLIST TypeIdentifier
	name	%string;    #REQUIRED
>

<!--
    Field(s) to return. This element indicates to the catalog server
    what fields to return.  One search request may contain multiple
    search fields, in which case all the requested fields will be
    returned for each item.  Note that for performance reasons, the
    catalog server may return more fields than those requested.

    Each search field corresponds to one field/search term/attribute
    on the type being searched. It may be in dotted notation. For
    example, we can have:

         <SearchField>UnitOfMeasure.Domain</SearchField>
-->

<!ELEMENT SearchField (#PCDATA)> <!-- string -->

<!--
    Query conditions of the search.  Search results will satisfy these
    conditions.  The conditions must not be empty, it must be specified
    in one of following three forms:

    FreeText only
        Only valid when searching for catalog items.  Items with the
        freetext terms in any of its refineable fields will be
        returned.  The results will come back in order of relevance.

    Boolean condition tree only
        Items that match the conditions specified by the query
        condition tree will be returned. The Relevance element in the
        results will be undefined

    FreeText and Boolean condition

        Only valid when searching for catalog items.  Search will
        return items satisfying the query condition tree, as well as
        containing the free text terms.  Results will be in order of
        relevance
-->

<!ELEMENT SearchConditions ((FreeText, (%terminalOp; | %boolOp;)?) |
                              (%terminalOp; | %boolOp;))>

<!--
    Freetext terms for the search.  Multiple terms may be specified,
    in which case they are seperated by spaces.  Results matching one
    or more of the terms will be returned.  Results that match the
    most terms will have the highest relevance.
-->
<!ELEMENT FreeText (#PCDATA)>


<!-- 

    The Field element is the name of the field (aka "attribute" or
    "search term"). It may be expressed in dotted notation.

    The Literal element is the string form of the value used for the
    comparison with the Field.

 -->
<!ELEMENT Field (#PCDATA)> <!-- string -->
<!ELEMENT Literal (#PCDATA)> <!-- string -->

<!--
    IsEqual evaluates to true when the value of the field is equal to
    the literal. The field may be one of the the following scalar
    types:

       - integer
       - string
       - literal
       - double
       - date
       - boolean
       - money

    IsNotEqual is equivalent to the inverse of IsEqual.

    These elements have SQL like semantics insofar as they cannot
    be used to test for the presence or absence of NULL.  IsNull
    and IsNotNull must be used for this test.
-->
<!ELEMENT IsEqual (Field, (Literal | Money))>
<!ELEMENT IsNotEqual (Field, (Literal | Money))>

<!--
    IsGreaterThan evaluates to true when the value of the field is
    greater than that of the literal. 

    IsGreaterOrEq evaluates to true when the value of the field is
    greater than or equal to that of the literal. 

    IsLessThan evaluates to true when the value of the field is less
    than that of the literal.

    IsLessOrEq evaluates to true when the value of the field is less
    than or equal to that of the literal.

    The field may be one of the the following scalar types:

       - integer
       - double
       - date
       - money

    These elements have SQL like semantics insofar as they cannot
    be used to test for the presence or absence of NULL.  IsNull
    and IsNotNull must be used for this test.
-->
<!ELEMENT IsGreaterThan (Field, (Literal | Money))>
<!ELEMENT IsLessThan (Field, (Literal | Money))>
<!ELEMENT IsGreaterOrEq (Field, (Literal | Money))>
<!ELEMENT IsLessOrEq (Field, (Literal | Money))>

<!--
    IsIn evaluates to true when the field is equal to one of the
    literal values.  The field may be one of the the following scalar
    types:

       - integer
       - string
       - literal
       - double
       - date
       - money

    The meaning of the operation is undefined if the list is empty.
    Also, this element has SQL like semantics insofar as NULL may not be
    a member of the IN list.
-->
<!ELEMENT IsIn (Field, (Literal* | Money*))>

<!--
    IsNull evaluates to true when the field has a null value.  The
    field may be one of the the following scalar types:

       - integer
       - string
       - literal
       - double
       - date
       - boolean
       - money

    IsNotNull is equivalent to the inverse of IsNull.
-->

<!ELEMENT IsNull (Field)>
<!ELEMENT IsNotNull (Field)>

<!--
     AndCondition evaluates to true if all of the children operations
     evaluates to true.
-->
<!ELEMENT AndCondition (%terminalOp; | %boolOp;)+>

<!--
     OrCondition evaluates to true if at least one of the children
     operations evaluates to true.
-->
<!ELEMENT OrCondition (%terminalOp; | %boolOp;)+>

<!--
     NotCondition evaluates to true if the child operation evaluates
     to true; and vice versa.
-->
<!ELEMENT NotCondition (%terminalOp; | %boolOp;)>


<!-- SearchOptions element -->
<!-- 
    This element specifies options that control the behaviour of the
    search.  Some options can be used to control the result set: for
    example, they effect the number of results to return, what results
    to return, the order of results to return etc. Some options effect
    other parts of the search response.

    batchSize
        A query produces a certain number of rows in a result set, yet
        not all rows need necessarily be returned to the client in a 
        single "SearchResponse."  The batchSize is an integer indicating
        the maximum number of rows to return to the client for this 
        interaction.  To retrieve more results after this, issue the 
        same query again and use the "firstRowNum" option.

    distinct
        A Distinct Search returns results that have exactly one value
        for a particular field. For example, a distinct search with
        field SupplierId will return results in such a way that the
        same SupplierId will appear at most once in the result set.

        Generalized Distinct Search generalizes the concept so that
        multiple number of results with the same SupplierId will be
        returned. However, it is still the case that not all the
        results are returned. Generalized Distinct Search is enabled
        when the distinctSize option has a value greater than 1.

        If the distinct option value is not an empty string, the
        search becomes a distinct or generalized distinct search
        (depending on the value of the "distinctSize" option). This
        value is the name of the field that should be distinct in the
        search results.

    distinctSize
        This option specifies the total number of results that should
        be returned for a distinct search. For example, if the value
        is 20, this means at least 20 generalized distinct results
        will come back. The number will go over 20 only when the total
        number of distinct groups is more than 20, in which case one
        result for each group is returned. In the case when the value
        is 1, exactly one result is returned for each distinct
        group. This option is ignored unless distinct search is
        turned on with the Distinct option.

    firstRowNum
        This option specifies the nth row to be the first returned
        result. For example, if the value is 20, and "MaxRowsToReturn
        is 30", this means result #20 to #49 are to be returned. This
        achieves the effects of "next set of results" when client
        issues the same query with a non-zero FirstRowNum. The default
        value is 0 (result #0).

    isSourcing
        This Boolean option specifies the scope of the search. When it
        is false, the search only searches the catalogs the client
        normally accesses for procurement purposes. For example, an
        procurement client would only search the catalogs that the 
        procurement subscribes to.  When this value is true, the search 
        searches across all public catalogs on the catalog server for the
        purpose of "sourcing" - locating the supplier that provides
        the best deals on the item being searched. This search option
        is currently not implemented.
 
    maxRowsToReturn
        This option specifies the maximum number of results that the
        catalog server should attempt to fetch for the search.  This
        option is different from the batchSize option.  The batchSize
        option controls the number of rows returned in the response, 
        allowing additional rows resulting from the same query to be 
        fetched by adjusting "firstRowNum".  "maxRowsToReturn" limits 
        the total number of rows that will be considered regardless of
        how many "batches" the client divides the result into.  So, if 
        "maxRowsToReturn" is set to N, "firstRowNum" cannot fetch any
        results beyond result N.  In addition, "batchSize" too cannot
        fetch any results beyond N.

    orderBy
        This option specifies the field that the results should be
        sorted on.  The sorting is performed on all the search
        results, regardless of batchSize.  For example, if you have
        500 rows that match your query, and you specify then the first
        10 you fetch will be the first 10 over all 500 rows, no matter
        what you specify the batchSize to be. This option only works
        on fields of the following scalar types:

            - integer
            - double
            - date
            - money

    showInfo
        This is a boolean flag, when true, this turns on the Info
        elements in the response.  The Info elements may be used by
        the client for debugging purposes.

        By Default the value is false.

    version
        This indicates the client version generating the cXML.  The
        Catalog Server is capable of "backward compatibility", in that
        a new catalog server can take requests from the new as well as
        the old client.  An old catalog server cannot take a request
        from a new client: this probably won't happen in production,
        but it can happen during development

 -->
<!ELEMENT SearchOptions (Extrinsic*)>
<!ATTLIST SearchOptions
    batchSize            %uint;      #IMPLIED
    distinct             %string;    #IMPLIED
    distinctSize         %uint;      #IMPLIED
    firstRowNum          %uint;      #IMPLIED
    isSourcing           (yes)       #IMPLIED
    maxRowsToReturn      %uint;      #IMPLIED
    orderBy              %string;    #IMPLIED
    showInfo             (yes)       #IMPLIED
    version              %string;    #REQUIRED
>

<!-- SearchResponse* Elements -->
<!-- 
    Response contains the search results if the search was successful,
    or error status if not. Note that when the Response is okay, most
    elements in the response don't have any attribute.  The reason for
    this design is to performance: element-only parser tends to run a
    lot faster.

    The Comments element serves informational purposes.  For example,
    the catalog server may return performance statistics, debugging
    information etc in this element. These info messages only get
    returned when the search option ShowInfo has a 'true' value in the
    SearchRequest.

    The Status element inside the SearchResponse is used to indicate
    line-specific errors / warnings. This allows for the return of
    partial results.

    Note that this is the only element in a SearchResponse that can
    potentially contain attribute.  The rationale behind this: if
    there were ever an error / warning, it's acceptable to switch to a
    slower parser to deal with it.
-->

<!ELEMENT SearchResponse (NumReturnedResults,
                          NumTotalResults,
                          TypeIdentifier, SearchField+, 
                          Comments?,
                          Status*, 
                          ((Type, (Type | Status)*) | 
                           (CatalogItem, Relevance, ((CatalogItem, Relevance) | Status)*))?)>

<!--
    The number of results returned in this response.  This number is
    limited by the batchSize option in the request.
-->
<!ELEMENT NumReturnedResults (#PCDATA)> <!-- integer -->

<!--
    The number of total possible results for the search.  This number
    is always greater than or equal to NumReturnedResults.  This
    number is limited by the MaxRowsToReturn option in the request.

    The "firstRowNum" and "batchSize" options may be combined to fetch
    more search results for the same query, with this as the upper
    limit.
-->
<!ELEMENT NumTotalResults (#PCDATA)> <!-- integer -->

<!--
    The relevance of the preceding CatalogItem with respect to the
    query.  This is a positive integer. This value is meaningful only
    when a FreeText condition was specified in the SearchConditions of
    the SearchRequest.
-->
<!ELEMENT Relevance (#PCDATA)>

<!-- 
    Display/Presentation cXML

    The CatalogItem element here is specified as "ANY" because it is
    the "Display cXML" which format has not been finalized.  The idea
    is to represent a catalog item in an efficient way, which means:

    - no element contains any attribute
    - element tags are short (1 - 4 characters) for commonly-used
      fields

-->
<!ELEMENT CatalogItem ANY>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/MapSync.mod#1 $
-->

<!-- 
    ==================================================
     MapSyncRequest - Map synchronization request
    ================================================== 
-->


<!ELEMENT MapSyncRequest (MapType, SubOrganizationID?, (ListItem+|MapItem+))>

<!-- 
    Currently implemented map types are:  
        Currency, ProductCode, SubOrgSupplier and UnitOfMeasure
-->
<!ELEMENT MapType (#PCDATA)>
<!ELEMENT SubOrganizationID (#PCDATA)>
<!ATTLIST SubOrganizationID 
          domain      %string;      #REQUIRED
>

<!-- 
    MapItem is used to define an item that performs a map function (such as
    a Commodity Code of UNSPSC to a canonical form).  In this model you have
    the item[s] your mapping from (Source) to the item[s] your mapping too. 
-->
<!ELEMENT MapItem (Source, Target)>
<!ELEMENT Source (ListItem+)>
<!ELEMENT Target (ListItem+)>

<!-- 
    Either we want to sync supplier info and optionally extra data, or you must
    have a bunch of mapfields.
-->
<!ELEMENT ListItem ((SupplierID+, MapField*) | MapField+)>

<!ELEMENT MapField (#PCDATA)>
<!ATTLIST MapField
          name        %string;      #REQUIRED
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/Modules/Profile.mod#6 $
-->

<!--
    AuthRequest

    An AuthRequest is used when one party (the "receiver") receives
    credentials from another party (the "principal") and the receiver
    needs a trusted third party to validate the credentials.  The
    receiver should enclose the credentials in an AuthRequest and send
    them to the trusted third party for validation.

    If the principal attempts to authenticate by revealing the shared
    secret between itself and the trusted third party (not
    recommended), the receiver should forward the credentials as they
    were received, including the shared secret.

    If the principal attempts to authenticate through a client
    certificate (recommended), the receiver should forward the
    credentials as well as an X509Data element containing an
    X509IssuerSerial element describing the certificate used by the
    principal (the receiver normally obtains this information from its
    webserver or SSL/TLS implementation).

    If the supplied credential is invalid, the trusted third party
    should respond with an empty cXML response of status 403
    (Forbidden).  If the supplied credential is valid, the trusted
    third party should respond with an AuthResponse that contains the
    valid credentials.
-->
<!ELEMENT AuthRequest (Credential+, X509Data?)>

<!--
    X509Data

    An X509Data element is constructed to describe an X.509 client
    certificate being used for authentication.  This element (and its
    children) are derived from the XML Digital Signature standard ().
-->
<!ELEMENT X509Data ((X509IssuerSerial |
                     X509SKI |
                     X509SubjectName |
                     X509Certificate)+ |
                     X509CRL)>

<!--
    X509IssuerSerial

    This element is a container for the serial number and issuer name
    of the X.509 certificate.
-->
<!ELEMENT X509IssuerSerial (X509IssuerName, X509SerialNumber) >

<!--
    X509IssuerName

    This element contains the distinguished name of the issuer of the
    X.509 certificate.  The distinguished name should be a string 
    representation of an LDAP Distinguished Name, as described in RFC 
    2253.  For example,

    C=US, O="John Doe Data Security, Inc.", OU=Secure Server
    Certification Authority

-->
<!ELEMENT X509IssuerName (#PCDATA)> <!-- string -->

<!--
    X509 SubjectName

    This element contains the distinguished name of the subject of the
    X.509 certificate.  This should be a string representation of an 
    LDAP distinguished name, as described in RFC 2253.
-->
<!ELEMENT X509SubjectName (#PCDATA)> <!-- string -->

<!--
    X509SerialNumber

    This element contains the serial number of the X.509 certificate.
-->
<!ELEMENT X509SerialNumber (#PCDATA)> <!-- string -->

<!--
    X509SKI

    This element contains the Subject Key Identifier of the X.509
    certificate.
 -->
<!ELEMENT X509SKI (#PCDATA)> <!-- string -->

<!--
    X509Certificate

    This element contains a Base 64-encoded X.509v3 certificate.
-->
<!ELEMENT X509Certificate (#PCDATA)> <!-- string -->

<!--
    X509CRL

    This element contains a Base 64-encoded X.509v3 Certificate
    Revocation List.
-->
<!ELEMENT X509CRL (#PCDATA)> <!-- string -->

<!--
    AuthResponse

    This response returns a list of valid credentials of the person
    entity in the AuthRequest.  An AuthResponse is returned only for a
    successful authentication; for failed authentications, an empty
    response with status 403 (Forbidden) will be returned.

    expirationDate
        Specifies the time beyond which the information contained in
        the AuthResponse must be discarded.  In other words, the
        inclusion of the expirationDate attribute specifies that the
        receiver of the AuthResponse may cache the information therein
        until the expirationDate.

        The absence of an expirationDate should be interpreted to
        forbid caching.
-->
<!ELEMENT AuthResponse (Credential)+>
<!ATTLIST AuthResponse
    expirationDate %datetime.tz; #IMPLIED
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    L3Charge mod file
-->

<!--
    cXML request wrapper from level 3 charge file.  Each request is
    guranteed to be for one realm customer from one bank account.  Hence
    the request would be able to uniquely identify the realm customer
    that the charge belongs to.  Each request may contain activities
    from multiple charge card accounts.

    AccountActivity
        This element contains a list of charge transactions belonging
        to one charge card account.
-->
<!ELEMENT L3ChargeFileRequest (ChargeVersion, AccountActivity*, Extrinsic*)>

<!--
    Defines version information for this charge file.  Because each
    charge file can  contain both new ChargeTransactions and updates to  
    existing ChargeTransactions, the changes in the files have to be
    applied only if the incoming file is a newer version than the existing
    version.

    domain
        Identifies  the domain for processorNumber
        and sequenceNumber
    processorNumber
        Identifies the card processor that sent this file. The
        processor is a standard industry party in the pcard world.     
    sequenceNumber
        The sequence number of the file, among the files send by  
        the designated processor.
-->
<!ELEMENT ChargeVersion EMPTY>

<!ATTLIST ChargeVersion
    domain                    %string;    #REQUIRED
    processorNumber           %string;    #IMPLIED 
    sequenceNumber            %string;    #REQUIRED
> 

<!--
    Defines a list of charge transactions for a charge card.  The charge 
    transaction may contain information such as product, amount, tax,
    merchant and detailed itemized items of a transaction.
    
    AccountingInfo
        Account details including the costcenter under which this purchase
        was made.

    ChargeTransaction
        This contains detailed information about charge transactions for
        the given charge card.  An AccountActivity may not contain any 
        ChargeTransaction element.  Empty ChargeTransaction is allowed
        because credit card companies may send us empty content for an
        AcccountActivity.
        

    accountNumber
        Charge card number.  This should be used as a unique identification
        key to look up the user in Ariba application as each pcard would 
        have an assigned user to it.
        
-->
<!ELEMENT AccountActivity (AccountingInfo?,
                           ChargeTransaction*)>
<!ATTLIST AccountActivity
    accountNumber   %string;     #REQUIRED
>

<!--
    Defines an Accounting element
    
    id
        The unique key defining the costcenter of the purchase
-->
<!ELEMENT AccountingInfo ( Name?, Description? )>
<!ATTLIST AccountingInfo
    id           %string;  #REQUIRED
>


<!--
    Defines information pertaining to a charge transaction that comes from
    credit card company.  A charge transactions happens whenever a card
    holder makes a purchase using the credit card.

    ChargeSummary
        Summary of the charge transaction.  It typically includes level 2
        charge information such as total amount, tax amount, transaction date
        and so on.

    AddendumItem
        Associated addenda information.  This element typically contains
        very detailed specific information related to the actual transaction.
        For example, a Airfare purchase would include detailed information
        unique to the flight; a hotel purchase would include detailed
        information unique to hotel reservations.

    Merchant
        Detailed Merchant information. The merchant is the party by which
        the transaction is charged.  This element contains merchant id, 
        tax id, vat number, and contact information.

    transactionID
        Transaction identifier.  This is a unique identifer to the charge
        transaction.
-->
<!ELEMENT ChargeTransaction (ChargeSummary,
                             AddendumItem*,
                             Merchant)>
<!ATTLIST ChargeTransaction
    transactionID   %string;     #REQUIRED
>

<!--
    Defines summary of a charge transaction.  It typically includes level 2
    charge information such as total amount, tax amount, transaction date
    and so on.

    TotalAmountInPostedCurrency
        Gross amount charged in posted currency.  This is the currency in
        which the merchant charged the purchase to the credit card company.
        Typically posted currency and billing currency are the same.  An
        example where billing currency and posted currency are different is
        as follow:
        Commodity was purchased in Argentina Pesos (TotalAmountInOriginalCurrency)
        on a Brazilian issued card so it could be posted in US dollars 
        (Total in posted currency), and then billed to the company on their
        statement in Reasis (TotalAmountInBillingCurrency)

        Both Total and TotalAmountInOriginalCurrency are needed for
        the application.  This is because the actual purchase receipt is
        typically in the orignal currency.  However, the amount that the
        company or individual is responsible for is the amount in posted
        currency.  Although only two values out of the three fields: 
        Total, TotalAmountInOriginalCurrency and
        TotalAmountInBillingCurrency are needed to obtain values for all
        three. However, rounding issues may cause some inaccuracy.  It is
        better to keep all three to mitigate any roudning issues.

    Total
        Gross amount in original currency.  This represents the actual
        transaction at the point of the sale.  This is the currency in which
        merchant charged the buyer.  An example is that an US
        travels to France, and makes a purchase there using the US credit
        card.  The original currency would be EUR, and the posted currency
        and billing currency would be in USD.
        TotalAmountInOriginalCurrency and TotalAmount are related by the
        conversionRate attribute.

    TotalAmountInBillingCurrency
        Gross amount in billing currency. This is the currency to which
        credit card bills the buyer.  If specified, customer needs
        to pay this amount.  If not, customer needs to pay the amount
        described in Total.

    TaxAmount
        Total tax amount related to this charge transaction in
        original currency.  Tax amount in posted currency can be obtained
        via the conversionRate attribute. 

    TaxDetail
        All detailed tax information related to this charge transaction in
        original currency.  This includes detailed breakdown
        of all taxes such as sales tax, duty tax, VAT tax and so on.

    ShippingAmount
        Shipping amount on total purchases in original currency.  Freight
        amount in posted currency can be otained via the conversionRate
        attribute.

    DiscountAmount
        Discount amount applied to the transaction in original currency.
        Discount amount in posted currency can be otained via the
        conversionRate attribute.

    OrderIDInfo
        The PO Number used to make this purchase.

    MasterAgreementIDInfo
        The ID of the contract under which this purchase falls.
    
    transactionDate
        Actual date transaction took place.

    conversionRate
        Conversion rate from original to posted currency.

    merchantInvoiceNumber
        Unique number associated with an card acceptors invoice.  This
        number may be used to link to an existing Invoice.

    buyerVATID
        Buyer customer corporate VAT number.

    bankReferenceNumber
        Assigned reference number for buyer customer.  This is a unique
        reference number per transaction assigned by banks as reference
        identification number.
        
    taxAccruedIndicator
        Indicates whether the Merchant has collected the taxes or not.
        Possible values include Yes/No/Unknown.

    paymentDueDate
        The date on which the payment for the charge is due
-->
<!ELEMENT ChargeSummary (TotalAmountInPostedCurrency,
                         Total?,
                         TotalAmountInBillingCurrency?,
                         TaxAmount?,
                         TaxDetail*,
                         ShippingAmount?,
                         DiscountAmount?,
                         OrderIDInfo?,
                         MasterAgreementIDInfo?,
                         ChargeShippingInfo?)>
<!ATTLIST ChargeSummary
    transactionDate        %date;          #REQUIRED
    conversionRate         %r8;            #IMPLIED
    merchantInvoiceNumber  %string;        #IMPLIED
    buyerVATID             %string;        #IMPLIED
    bankReferenceNumber    %string;        #IMPLIED
    taxAccruedIndicator    %string;        #IMPLIED
    paymentDueDate         %date;          #IMPLIED
>

<!--
    Defines the shipping information related to this Charge

    Contact
        The ship from and ship to addresses. Only one ShipFrom and
        one shipTo can be specified.  Allowed contact roles are shipFrom and shipTo

-->
<!ELEMENT ChargeShippingInfo (Contact,
                              Contact?)>
<!ATTLIST ChargeShippingInfo
    shippingDate             %datetime.tz;          #IMPLIED
>

<!--
    Contains detailed merchant information.  The merchant is the party by
    which the transaction is charge.

    Contact
        This contains merchant contact personnel and address information.
        
    SupplierID
        This contains the ID of the supplier(merchant) in various domains.

        dunNum can be included as one SupplierID with "duns" being the 
        domain value.

        merchantId can be included as one SupplierID with "merchantID" being
        the domain value.

        merchantVATNumber can be included as one SupplierID with "vatID"
        being the domain value.
            Supplier merchant VAT number.  This is usually for countries that
            have VAT.  It is possible for a merchant to have both VAT number
            and tax id if the merchant operates in both US and other countries.

        merchantTaxId can be included as one SupplierID with "taxID" being
        the domain value
            Supplier merchant tax id.  This is usually US centric tax
            identification number.  It is possible for a merchant to have both
            VAT number and tax id if the merchant operates in both US and other
            countries.
-->

<!ELEMENT Merchant (Contact, SupplierID*)>

<!--
    Defines detailed information about one addendum item.  It includes
    total amount, tax amount and other miscellaneous information about an
    the item.

    Total
        Gross amount associated with this addendum in original currency.
        This is optional because card companies may not provide separate
        amount per addendum.  Most of the times, each charge transaction
        would contain only one addendum.  In that case, the Total for the
        addendum is likely the same as the total for the entire charge
        transaction.

    TaxAmount
        Gross amount of tax in original currency.
        This is optional because card companies may not provide separate
        tax amount per addendum.  Most of the times, each charge transaction
        would contain only one addendum.  In that case, the TaxAmount for the
        addendum is likely the same as the TaxAmount for the entire charge
        transaction.

    TaxDetail
        All detailed tax information related to this charge transaction in
        original currency.  This includes detailed breakdown
        of all taxes such as sales tax, duty tax, VAT tax and so on.

    DetailAddendum
        Defines other miscellaneous information specific to a type of
        addendum.
-->
<!ELEMENT AddendumItem (Total?,
                        TaxAmount?,
                        TaxDetail*,
                        DetailAddendum)>

<!--
    Defines associated addendum information in a charge transaction.  This
    is supplemental information that would provide valuable information that
    would be helpful to better data analysis and more automation of any
    reconciliation process.

    BasicAddendum
        Basic information on the charge transaction. This exsits only
        if addendum for the specific expense type is not necessary.

    CarRentalAddendum
        Addendum information for car rental charge.  This contains detailed
        information about different terms of the rental, and the various
        fees charged for the rental.

    LodgingAddendum
        Addendum information for lodging charge.  This contains detailed
        spend on at a hotel, such as room rates, taxes, meals, gifts etc.

    TelecommunicationServicesAddendum
        Addendum information for telecommunication service charge such as
        telephone, cellphone bills.  This contains detailed
        information about telephone usage including telephone numbers,
        time called, call locations etc.

    TransportAddendum
        Addendum information for transportion charge.  Transport charges
        usually refer to Airfare purchases and rail purchases.  It contains
        detailed information about carrier provider, travel segments etc.
-->

<!ELEMENT DetailAddendum (BasicAddendum | CarRentalAddendum |
                          LodgingAddendum |TelecommunicationServicesAddendum |
                          TransportAddendum)>

<!--
    Defines basic information on the charge transaction. This exsits only
    if addendum for the specific expense type is not necessary.

    DetailLineItem
        Basic line item details information.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.

-->
<!ELEMENT BasicAddendum (DetailLineItem*,
                         Extrinsic*)>

<!--
    Defines itemized line item details information of a charge transaction.

    Rate
        This defines the rate information for this itemized line item.
        It specifies the unit price, quantity, unit of measure, item
        description, and item extend amount (unit price * quantity)

    ProductCode
        Product Code of the individual item purchased.  In expense, this
        code may be mapped to the ExpenseType

    Classification
        Classification provides the Identifier assigned by the card acceptor
        that best categorizes the items being purchased in a standardized
        commodity group.

    DiscountAmount
        Gross amount of discount in original currency.

    TaxAmount
        Total amount of all taxes calculated for this item in original currency.

    TaxDetail
        Additional tax related detail information.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.

    lineItemNumber
        Line item number.

    subLineItemNumber
        If none zero, this is a sub line Item number for the line Item detail.

    purchaseDate
        Date of item purchase transaction.

    customerCode
        Code used by the merchant to identify the buyer customer.
        This is proprietary number that each merchant uses in house.

    poLineNumber
        Line number, for reference, on Purchase Order.  This can be used
        during PO reconcilation process to better identify the actual
        charge versus original amount on the purchase order.

    vatInvoiceReferenceNumber
        Value-added Tax(VAT) Invoice or tax receipt number.
-->
<!ELEMENT DetailLineItem (Rate,
                          ProductCode,
                          Classification?,
                          DiscountAmount?,
                          TaxAmount?,
                          TaxDetail*,
                          Extrinsic*)>
<!ATTLIST DetailLineItem
    lineItemNumber             %uint;          #IMPLIED
    subLineItemNumber          %uint;          #IMPLIED
    purchaseDate               %date;          #IMPLIED
    customerCode               %string;        #IMPLIED
    poLineNumber               %uint;          #IMPLIED
    vatInvoiceReferenceNumber  %string;        #IMPLIED
>

<!--
    Defines product Code of the individual item purchased, this
    indicates the type of expense.  The values of product codes come
    from vendors.  For MasterCard, if the identifier is CC, and it is
    for a lodging expense, then the code value is restricted by a list
    of values.

    #PCDATA
        The value of the product code of the item purchased.  The code
        convention is based on the identifier.

    identifier
        Qualifier or domain for the product code.  This identifier should
        also be used to identify the credit card company so that the right
        mapping table can be selected on the application side.
        MasterCard provides three values:
              MCBP = Buyer's part number
              MCVP = Vendor's part number
              MCCC = Industry Commodity Code
-->
<!ELEMENT ProductCode (#PCDATA)>
<!ATTLIST ProductCode
    domain        %string;    #IMPLIED
>

<!--
    Defines line item addendem information for transport expenses.  Transport
    expenses typically are typically used for air or rail travel.

    TripType
        Type of trip. This may be one roundtrip, one way or multi leg.
        Default to round trip.

    FeeAmount
        Gross amount of the fee associated with this transprot in original
        currency.  This is optional because card companies may not provide
        total fee amount.  Typically, the sum of Total from all TransportLeg
        should equal to the Total here.

    TransportLeg
        Leg information for transport type.  Air or rail travel may have
        multiple segments in one trip such as a stop over.  Each leg
        represents one segment of the trip.

    MiscellaneousCharge
        Miscellaneous charges related to transport.
        The types of the charges can be ExchangeFee and so on.

    Classification
        Classification provides the Identifier assigned by the card acceptor
        that best categorizes the items being purchased in a standardized
        commodity group.

    DetailLineItem
        Basic line item details information.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.

    ticketNumber
        Ticket number.

    passengerName
        Passenger name.

    numberOfLegs
        Total number of legs for this trip.

    travelAgency
        Travel agency name.

    exchangeTicketNumber
        New Ticket Number issued when a ticket is exchanged.

    issueDate
        The date the ticket was issued to the customer.

    issueCarrierCode
        IATA Code for the carrier issuing the ticket.  On each transport
        leg segment, there is a separate carrierCode which may or may not
        be the same as the issueCarrierCode.  Since this code value comes
        from IATA standard, there is a mapping table that maps the code
        to a more user-friendly display name.

    refundIndicator
        Boolean value to indicate whether this is a ticket refund.
-->
<!ELEMENT TransportAddendum (TripType?,
                             FeeAmount?,
                             TransportLeg*,
                             MiscellaneousCharge*,
                             Classification?,
                             DetailLineItem*,
                             Extrinsic*)>
<!ATTLIST TransportAddendum
    ticketNumber           %string;      #IMPLIED
    passengerName          %string;      #IMPLIED
    numberOfLegs           %number;      #IMPLIED
    travelAgency           %string;      #IMPLIED
    exchangeTicketNumber   %string;      #IMPLIED
    issueDate              %date;        #IMPLIED
    issueCarrierCode       %string;      #IMPLIED
    refundIndicator        (yes)         #IMPLIED
>

<!--
    Defines leg information for transport type.

    LegOrigin
        City, airport or railway code where trip or leg originated.

    LegDestination
        City, airport or railway code wgere trip or leg ends.

    BookingClassCode
        Airline or Rail booking class code.  For airline, this is
        the de-facto airline standard.  For example,

        F, FN, P, R, A      - first class
        C, CN, D, J, I, Z   - business class.
        Y, YN, B, BN, M, H, V, VN, O, Q, QN, S, 
            K, KN, L, U, T, W - coach class.

    Total
        Gross amount of the ticket (per trip leg) in original currency.

    FeeAmount
        Gross amount of the fee associated with the ticket (per trip leg) in original currency.

    TaxAmount
        Gross amount of Tax associated with the transaction in original currency.

    legNumber
        Indication of which trip leg a detail an addendum represents.

    carrierCode
        IATA Code that identifies the airline servicing this leg.
        Since this comes from IATA standard, there is a mapping table
        that maps the code to a more user-friendly display name.

    travelDate
        The date of the travel.  This field is needed because the departureTime
        and arrivalTime only have time information.

    departureTime
        Time of departure HH:MM:SS (HH = 00-23, MM = 00-59, SS = 00-59)
        This is stored as string because there is no timezone information
        supplied.

    arrivalTime
        Time of arrival HH:MM:SS (HH = 00-23, MM = 00-59, SS = 00-59)
        This is stored as string because there is no timezone information
        supplied.

    exchangeTicketNumber
        New Ticket Number issued when a ticket is exchanged.

    flightNumber
        Flight number.

    fareBaseCode
        The code that carriers assign to the particular ticket type.
-->
<!ELEMENT TransportLeg (LegOrigin?,
                        LegDestination?,
                        BookingClassCode?,
                        Total?,
                        FeeAmount?,
                        TaxAmount?)>
<!ATTLIST TransportLeg
    legNumber              %number;        #REQUIRED
    carrierCode            %string;        #IMPLIED
    travelDate             %date;          #IMPLIED
    departureTime          %string;        #IMPLIED
    arrivalTime            %string;        #IMPLIED
    exchangeTicketNumber   %string;        #IMPLIED
    flightNumber           %string;        #IMPLIED
    fareBaseCode           %string;        #IMPLIED
>

<!--
    Defines line item addendem information for lodging expenses.

    UnitRate
        Daily room rate in original currency

    RoomTaxAmount
        Total tax amount applied to the entire room stay in original currency

    MiscellaneousCharge
        A list of miscellaneous charges in original currency incurred during
        hotel stay.  These charges are all charges other than room charges.
        Type of non-room charge in original currency. For example, AudioVisual,
        Banquet, BusinessCenter, ConferenceRoom, EarlyDeparture, GiftShop,
        Gratituity, HealthClub, InternetAccess, LaundryDryClean, MiniBar,
        Movie, Restaurant, RoomService, Telephone, Transportation, Valet, etc.
        If it's not specified, default to "other"

    TotalMiscAmount
        The gross amount of miscellaneous charges occurred during hotel
        stay.

    MiscTaxAmount
        Total tax amount on all miscellaneous charges occurred during hotel
        stay.

    Classification
        Commodity code provides the Identifier assigned by the card acceptor
        that best categorizes the items being purchased in a standardized
        commodity group.

    DetailLineItem
        Basic line item details information.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.

    checkinDate
        Date of arrival for lodging stay.

    checkoutDate
        Date of departure.

    carrierCode
        IATA code of the ledging provider.
        Since this comes from IATA standard, there is a mapping table
        that maps the code to a more user-friendly display name.

    numberOfNights
        Total number of nights a room was contracted during a lodging stay.
-->
<!ELEMENT LodgingAddendum (UnitRate?,
                           RoomTaxAmount?,
                           MiscellaneousCharge*,
                           TotalMiscAmount?,
                           MiscTaxAmount?,
                           Classification?,
                           DetailLineItem*,
                           Extrinsic*)>
<!ATTLIST LodgingAddendum
    checkinDate          %date;         #IMPLIED
    checkoutDate         %date;         #IMPLIED
    carrierCode          %string;       #IMPLIED
    numberOfNights       %uint;         #IMPLIED
>

<!--
    Defines room rate in original currency.
-->
<!ELEMENT RoomRateAmount (Money)>

<!--
    Defines total gross amount of tax on room related charges
    in original currency.
-->
<!ELEMENT RoomTaxAmount (Money)>

<!--
    Defines total gross amount on all non-room related charges
    in original currency.
-->
<!ELEMENT TotalMiscAmount (Money)>

<!--
    Defines total gross amount on taxes on non-room related charges
    in original currency.
-->
<!ELEMENT MiscTaxAmount (Money)>

<!--
    Defines line item addendum information for car rental expenses.

    CarRentalPickup
        City or airport where the vehicle was rented.

    CarRentalDropoff
        City or airport where car is scheduled to be returned.

    CarRentalRateInfo
        Information on rate of car rental.

    MiscellaneousCharge
        Miscellaneous charges related to car rental.
        Types of fees typically contains the following:
          extraMileage - Vehicle Rental charge for miles in excess of
                         those provided free of charge
          fuel - Gasoline charges
          insurance - Car insurance
          lateFee - Penalty if the car is returned late
          dropOffCharge - Drop off charges, usually due to one-way
          regularMileage - Mileage based rental
          telephone - For usage of telephone installed in the car
          towing - Towing fee
          other - Other charges

    DetailLineItem
        Basic line item details information.

    Classification
        Classification provides the Identifier assigned by the card acceptor
        that best categorizes the items being purchased in a standardized
        commodity group.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.

    pickupDate
        Date of Vehicle rental.

    dropoffDate
        Date Vehicle is scheduled to be returned.

    daysRented
        Indicates the total number of days the vehicle was rented.

    carClass
        Class of Vehicle Rental.  The values for this field are not
        restricted by a pre-defined set of list as it doesn't follow
        any standard, and the values could very well change over time.

    renterName
        Name of Person Renting the Vehicle.

    rentalAgreementNumber
        Vehicle Rental Agreement Number.

    reservationNumber
        Number assigned to reservation.
-->
<!ELEMENT CarRentalAddendum (CarRentalPickup?,
                             CarRentalDropoff?,
                             CarRentalRateInfo?,
                             MiscellaneousCharge*,
                             Classification?,
                             DetailLineItem*,
                             Extrinsic*)>
<!ATTLIST CarRentalAddendum
    pickupDate             %date;          #IMPLIED
    dropoffDate            %date;          #IMPLIED
    daysRented             %uint;          #IMPLIED
    carClass               %string;        #IMPLIED
    renterName             %string;        #IMPLIED
    rentalAgreementNumber  %string;        #IMPLIED
    reservationNumber      %string;        #IMPLIED
>

<!--
    Defines information on rate of car rental.

    UnitRate
        Rate for Car Rental per period specified in day, week, or month
        in original currency.  The likely rate type would have the following
        mapping to UnitRate.UnitOfMeasure:
        D: DAY
        W: WEE
        M: MON

    DistanceRate
        Rate per distance applied to rental charges in original currency and
        the distance traveled
-->
<!ELEMENT CarRentalRateInfo (UnitRate?,
                             DistanceRate?)>

<!--
    Defines car rental rate based on per unit distance rate and the distance
    traveled.  The per unit distance rate is in original currency.
-->
<!ELEMENT DistanceRate (UnitRate)>
<!ATTLIST DistanceRate
    distance    %r8;    #REQUIRED
>

<!--
    Defines line item addendem information for telecommunication services
    expenses such as telephone and cellular phone.

    StatementPeriod
        Defines time period that this addendum is for.

    BillingItem
        Telecommunication service call details.

    DetailLineItem
        Basic line item details information.

    Extrinsic
        Additional information related to this addendum.  Should not
        duplicate anything in DetailLineItem.
-->
<!ELEMENT TelecommunicationServicesAddendum (StatementPeriod?,
                                             BillingItem*,
                                             DetailLineItem*,
                                             Extrinsic*)>

<!--
    Defines time period that this charge transaction is for.

    startDate
        The start date this charge transaction is for.

    endDate
        The end date this charge transaction is for.
-->
<!ELEMENT StatementPeriod EMPTY>
<!ATTLIST StatementPeriod
    startDate    %date;     #REQUIRED
    endDate      %date;     #REQUIRED
>

<!--
    Defines a connection details.  This usually applies to some sort of 
    phone call services.

    CallFromPhoneInfo
        Information on where the call is placed and on what number.

    CallToPhoneInfo
        Information on where the call is made to and to what number.

    ConnectionDetail
        Information on connection details.
-->
<!ELEMENT BillingItem (CallFromPhoneInfo?,
                       CallToPhoneInfo?,
                       ConnectionDetail?)>

<!--
    Defines information on where the call is placed and on what number.

    PhoneInfo
        Phone information.
-->
<!ELEMENT CallFromPhoneInfo (PhoneInfo)>

<!--
    Defines information on where the call is made to and to what number.

    PhoneInfo
        Phone information.
-->
<!ELEMENT CallToPhoneInfo (PhoneInfo)>

<!--
    Defines phone information.

    Number
        Telephone number.

    City
        City for the phone number.

    StateOrProvince
        State or provice for the phone number.

    Country
        Country for the phone number.
-->
<!ELEMENT PhoneInfo (Number, City?, State?, Country?)>

<!--
    Defines information on connection details.

    Description
        Call description.

    Total
        Call charge gross amount in original currency.

    MiscellaneousCharge
        Miscellaneous expense related to call charge.

    duration
        Length of time billed for call in seconds.
-->
<!ELEMENT ConnectionDetail (Description?,
                            Total?,
                            MiscellaneousCharge*)>
<!ATTLIST ConnectionDetail
    duration        %duration;      #IMPLIED
>

<!--
    Defines miscellaneous charges and fees.

    type
        Type of charge and fees in original currency.  If it's not specified,
        default to "other".
        Depending on the elements that use MiscellaneousCharge, the most likely
        values would chnage.

        A list of miscellaneous charges in original currency incurred during
        hotel stay.  These charges are all charges other than room charges.
        Type of non-room charge in original currency. For example, AudioVisual,
        Banquet, BusinessCenter, ConferenceRoom, EarlyDeparture, GiftShop,
        Gratituity, HealthClub, InternetAccess, LaundryDryClean, MiniBar,
        Movie, Restaurant, RoomService, Telephone, Transportation, Valet, etc.
        If it's not specified, default to "other"

        Miscellaneous charges related to car rental.
        Types of fees typically contains the following:
          extraMileage - Vehicle Rental charge for miles in excess of
                         those provided free of charge
          fuel - Gasoline charges
          insurance - Car insurance
          lateFee - Penalty if the car is returned late
          dropOffCharge - Drop off charges, usually due to one-way
          regularMileage - Mileage based rental
          telephone - For usage of telephone installed in the car
          towing - Towing fee
          other - Other charges
-->
<!ELEMENT MiscellaneousCharge (Money)>
<!ATTLIST MiscellaneousCharge
    type      %string;    "other"
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/release/schema/1.2.29.1+/Modules/Organization.mod#1 $
-->
<!--
     Organization
-->

<!ELEMENT Organization (Name, Credential+, OrganizationRole*, Address, CorporateInformation?, TaxInformation?, RelationshipInformation?, Description*,  Person*, Industry*, Commodity*, Territory*, PaymentInformation*, Extrinsic*)>



<!-- ====
    OrganizationDataRequest - Get data about an organization (or multiple
    organizations).

    The OrganizationID wrapper is used to distinguish between requests
    about multiple organizations and requests including alias Credentials
    for the same organization.
==== -->

<!ELEMENT OrganizationDataRequest
         (OrganizationID+)>

<!--
    OrganizationDataResponse

    Extrinsic elements will be used to pass data about an Org that is not
    already represented by the Organization element.
-->

<!ELEMENT OrganizationDataResponse (Organization+)>

<!--
	Used to push organization information to another system.
-->

<!ELEMENT OrganizationChangeMessage (Organization+)>
<!ATTLIST OrganizationChangeMessage
    type  (new | update | delete)  #REQUIRED
>



<!ELEMENT CorporateInformation (AnnualRevenue?, StateOfIncorporation?, OwnershipType*)>
<!ATTLIST CorporateInformation
    yearFounded        %uint; #IMPLIED
    numberOfEmployees  %uint; #IMPLIED
    organizationType  NMTOKEN #IMPLIED
>
<!ELEMENT StateOfIncorporation (State)>
<!ELEMENT AnnualRevenue (MinAmount, MaxAmount?)>
<!ELEMENT OwnershipType (Extrinsic*)>

<!--
	name can be either minorityOwned, womanOwned, veteranOwned, disabledVeteranOwned,
	vietnamVeteranOwned for US companies.
	The list is not enumerated since it can be different for different countries.
-->
<!ATTLIST OwnershipType
    name  NMTOKEN #REQUIRED
>



<!--
        TaxInformation

        Used to list the associated tax information that for example can be
        used for 1099 purposes.
-->	
<!ELEMENT TaxInformation (LegalName?, TaxID*)>
<!ATTLIST TaxInformation
    isExemptFromBackupWithholding  (yes | no) #IMPLIED
>

<!--
        Owner of ssn or tin
-->
<!ELEMENT LegalName (#PCDATA)>
<!ATTLIST LegalName
    xml:lang  %xmlLangCode;  #REQUIRED
>

<!--
        This contains the actual tin or ssn number. Domain specifies
        whether it is us social security number or us tax identification
        number.
-->
<!ELEMENT TaxID (#PCDATA)>
<!ATTLIST  TaxID
    domain  (usSSN | usTIN | stateTIN | regionalTIN | vatID)  #REQUIRED
>



<!--
        This section contains anything that is specific between the
        requester and requestee
--> 
<!ELEMENT RelationshipInformation (PaymentRelationshipInformation?)>
		
<!--
       This section contains payment information between requester and 
       requestee. 
-->
<!ELEMENT PaymentRelationshipInformation (PaymentProviderInformation+, Extrinsic*)>
                      
<!--
       This section contains information about the payment provider who is 
       going to execute payment between the requester and the requestee. 
       It has the id of the payment provider payment service as well as 
       the payment methods that the payment provider supports. 
-->
<!ELEMENT PaymentProviderInformation (Description?, PaymentMethod+, Extrinsic*)>
<!ATTLIST PaymentProviderInformation
     paymentProviderID %string; #REQUIRED
>



<!--
    Person associates a particular individual with the (many) roles they may
    play on behalf of an organization.

    Note: The Contact element in this context would not include a role
    attribute since this does not describe a person acting in any particular
    fashion.
-->
<!ELEMENT Person (Contact, PersonRole+, IdReference*, Extrinsic*)>

<!--
    PersonRole

    Used to list the possible values the Contact@role attribute may take
    when the associated Contact appears in a cXML Request (such as
    ProviderSetupRequest).
-->
<!ELEMENT PersonRole EMPTY>
<!ATTLIST PersonRole
    name NMTOKEN #REQUIRED
>


<!ELEMENT Industry (Classification)>
<!ELEMENT Commodity (Classification)>
<!ELEMENT Territory (Classification)>



<!ELEMENT PaymentInformation (PaymentMethodRemittanceInformation+)>

<!ELEMENT PaymentMethodRemittanceInformation (Contact, PaymentMethod*, PaymentMethodPartner*)>
<!ATTLIST PaymentMethodRemittanceInformation
    isDefault (yes) #IMPLIED
    preferredPaymentMethod %cxml.paymentMethod; #IMPLIED
>

<!--
	This new tag helps to include the financial information of an organization into the 
        PaymentMethodRemittance tag.
	Also, for IdReference tag, we add a new domain receivingCorrspondent.  This new role 
        behaves as the payee for receiving correspondent bank.  We need this new role because 
        in the wire transfer case, the receiving party could have up to two banks: beneficiary 
        and corresponding banks.  Hence,  payee role is needed to contain the information about 
        beneficiary bank account and receivingBank role is needed to contain the information 
        about the beneficiary bank.  Similary, for the receiving correspondent bank, we have the 
        roles receivingCorresondent and receivingCorrespondentBank

-->

<!ELEMENT PaymentMethodPartner (PaymentMethod, PaymentPartner+) >

 
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/schema/Modules/OrganizationPrivate.mod#1 $
-->


<!--
    OrganizationRole - Identifies one of the roles this (new) organization
    is playing.

    name
        Name of the role played by the organization.  Common values
        include "supplier" and "buyer".
-->
<!ELEMENT OrganizationRole EMPTY>
<!ATTLIST OrganizationRole
    name NMTOKEN #REQUIRED
>
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id$
-->

<!--
    Sales Order mod file
-->

<!-- ====
    SalesOrderRequest transaction forwards shopping basket data in the Request.
    No specific Response document is required for this transaction.
    Servers must respond to a SalesOrderRequest with a generic Response
    document.
==== -->

<!--
    Definition of a Sales Order Request.  This is the shopping basket data 
    that is sent to the procurement application from the supplier.   
-->
<!ELEMENT SalesOrderRequest (SalesOrderHeader, ItemIn*)>

<!--
    Header of a Sales Order Request.

    The contained DocumentReference element may appear in a document only
    when the operation is "update".  In that case, the DocumentReference is
    required and it must reference the most recent SalesOrderRequest
    document for this particular sales order (usually also indicated by a
    common salesOrderID).  For example when a sale order is created, updated
    and then updated again, the final document must contain a
    DocumentReference referring to the previous Sales Order with
    operation="update".  That document must, in turn, refer to the original
    (operation="new") SalesOrderRequest document.

    Contact information should uniquely identify the requester in the 
    procurement application. There must a contact with the role as 
    "requester" along with the details of the requester.

    The Comments element list may contain additional information about the
    status of the overall order. This data must be intended for human use.

    Elements in the Comments list may appear in any order.  The xml:lang
    attribute may have the same value in multiple Comments elements in the
    list.  The set of Comments with a particular xml:lang value should
    contain similar content to that for any other xml:lang value present in
    the list.

    On the other hand, the Extrinsic element list may be used to insert
    additional data about the order for application consumption.  These
    elements may include pre-defined keywords and values affecting workflow
    in the receiving system.

    Elements in the Extrinsic list may appear in any order.  An extrinsic
    type (Extrinsic@name attribute value) must not appear more than once
    within a SalesOrderHeader element. (The SalesOrderHeader must not 
    contain a default extrinsic value  overridden at the lower level.)

    SupplierOrderInfo of PunchOutOrderMessage should have the orderID
    same as salesOrderID. Procurement application would use the orderID of
    PunchOutOrderMessage and salesOrderID of SalesOrderRequest to identify
    the document within the procurement application.
    
    salesOrderID
        An identifier for this particular sale order assigned
        by the supplier. This attribute provides an unambiguous and direct
        connection between all versions of the sale order.  A user-visible 
        and secondary (to the payloadID attribute of the cXML element) 
        identifier for this document.  This value should remain same for all
        SalesOrderRequests corresponding to the same order.
        
        salesOrderID may be used in the procurement application for 
        processing this request.  Links between these documents must be
        deduced using the DocumentReference element contained in the
        update's SalesOrderHeader and the payloadID attribute of the
        original or previous update.

    operation
        The (optional) operational mode of the sales order document.
        Defaults to "new". This specifies the type of operation made 
        on the sales order by the supplier.

        An "update" operation allows a supplier to correct an error in a
        sale order or to add additional information learned later.  In
        either case, an "update" document must be complete: All data from
        the original sale order or a previous update should be discarded
        by the recipient.
        
        A "cancel" operation allows a supplier to cancel a sale order sent
        earlier.
        
        An operation="update" SalesOrderRequest must also include a
        DocumentReference element in the SalesOrderHeader.  (See above
        for more information on this element.)  This effectively sequences
        multiple versions of a confirmation and may provide the only link
        between those versions.

    operationAllowed
        Highest operation allowed on the shopping basket in the procurement
        application.  "create" allows only later OrderRequest operations on 
        these items.  "inspect" adds a PunchOutSetupRequest with 
        operation="inspect".  And, "edit" allows operation="edit" in the 
        later punchout setup request.


    noticeDate
        The date and time this sale order was created.
-->
<!ELEMENT SalesOrderHeader (DocumentReference?, Total?, Contact+, Comments*,
                            Extrinsic*)>
<!ATTLIST SalesOrderHeader
    salesOrderID          %string;                       #REQUIRED
    operation            (new | update | cancel)         "new"
    operationAllowed     (create | inspect | edit)       #REQUIRED
    noticeDate           %datetime.tz;                   #REQUIRED
><!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/schema/Modules/PriceAvailability.mod#1 $
-->

<!--
    Definition of Price Availability Request.  This is the data sent to 
    external catalog source(e.g. supplier) containing the items for price
    and availability updates.
-->
<!ELEMENT PriceAvailabilityRequest (PriceAvailabilityRequestItem+)>

<!--
    Definition of a Price Availability Response.  This is the data sent 
    back in response to Price Availability Request.
-->
<!ELEMENT PriceAvailabilityResponse (PriceAvailabilityResponseItem+)>


<!--
    The representation of a line item as it needs to   
    be for price availability request.
-->
<!ELEMENT PriceAvailabilityRequestItem (ItemOut, Extrinsic*)>


<!--
    The representation of a line item as it needs to be
    be for price availability response. 

    available 
        the requested item is available and
        the latest price and lead time is the ItemIn.
    unavailable
        the requested item is unavailable.
    temporarilyUnavailable         
        the requested item is temporarily unavailable, the latest price 
        and lead time are in the ItemIn.
    unknown
        the availability status of the requested item is unknown
    unrecognized 
        the requested item is an invalid item and not recognized by the
        supplier
    excluded        
        the requested item is part of the external catalog
        but is being filtered on the punchout site for the sender 
        (e.g. procurement system), so it’s not being shown to this sender.
-->
<!ELEMENT PriceAvailabilityResponseItem (ItemIn, Extrinsic*)>
<!ATTLIST PriceAvailabilityResponseItem
    type (available | unavailable | temporarilyUnavailable | unknown | unrecognized | excluded ) #IMPLIED
>

<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/Modules/Profile.mod#6 $
-->

<!--
    For more information about W3C XML signatures, refer to the
    following URL.  Portions of this DTD are derived from information
    contained therein.
    http://www.w3.org/TR/xmldsig-core/
-->

<!-- DTD for XML Signatures
    http://www.w3.org/2000/09/xmldsig#
    Joseph Reagle $last changed 20001215$

    http://www.w3.org/2000/09/xmldsig#
    $Revision: 1.1 $ on $Date: 2002/02/08 20:32:26 $ by $Author: reagle $

    Copyright 2001 The Internet Society and W3C (Massachusetts Institute
    of Technology, Institut National de Recherche en Informatique et en
    Automatique, Keio University). All Rights Reserved.
    http://www.w3.org/Consortium/Legal/

    This document is governed by the W3C Software License [1] as described
    in the FAQ [2].

    [1] http://www.w3.org/Consortium/Legal/copyright-software-19980720
    [2] http://www.w3.org/Consortium/Legal/IPR-FAQ-20000620.html#DTD
-->

<!--

The following entity declarations enable external/flexible content in
the Signature content model.

#PCDATA emulates schema string; when combined with element types it
emulates schema's mixed content type.

%foo.ANY permits the user to include their own element types from
other namespaces, for example:
 <!ENTITY % KeyValue.ANY '| ecds:ECDSAKeyValue'>
 ...
 <!ELEMENT ecds:ECDSAKeyValue (#PCDATA)  >

-->

<!ENTITY % Object.ANY '|xades:QualifyingProperties|cXMLSignedInfo|Extrinsic'>
<!ENTITY % Method.ANY ''>
<!ENTITY % Transform.ANY ''>
<!ENTITY % SignatureProperty.ANY ''>
<!ENTITY % KeyInfo.ANY ''>
<!ENTITY % KeyValue.ANY ''>
<!ENTITY % PGPData.ANY ''>
<!ENTITY % X509Data.ANY ''>
<!ENTITY % SPKIData.ANY ''>



<!-- Start Core Signature declarations, these should NOT be altered -->

<!ELEMENT ds:Signature (ds:SignedInfo, ds:SignatureValue, ds:KeyInfo?, ds:Object*)  >
<!ATTLIST ds:Signature  
	xmlns:ds	CDATA	#FIXED 'http://www.w3.org/2000/09/xmldsig#'
	xmlns:xades	CDATA	#FIXED 'http://uri.etsi.org/01903/v1.3.2#'
	Id  		ID	#IMPLIED >

<!ELEMENT ds:SignatureValue (#PCDATA) >
<!ATTLIST ds:SignatureValue  
         Id  ID      #IMPLIED>

<!ELEMENT ds:SignedInfo (ds:CanonicalizationMethod, 
	ds:SignatureMethod,  ds:Reference+)  >
<!ATTLIST ds:SignedInfo  
	Id	 ID 	 #IMPLIED 
>

<!ELEMENT ds:CanonicalizationMethod (#PCDATA %Method.ANY;)* > 
<!ATTLIST ds:CanonicalizationMethod 
	Algorithm CDATA #REQUIRED > 

<!ELEMENT ds:SignatureMethod (#PCDATA|ds:HMACOutputLength %Method.ANY;)* >
<!ATTLIST ds:SignatureMethod 
	Algorithm CDATA #REQUIRED > 

<!ELEMENT ds:Reference (ds:Transforms?, ds:DigestMethod, ds:DigestValue)  >
<!ATTLIST ds:Reference
	Id	ID	#IMPLIED
	URI	CDATA	#IMPLIED
	Type	CDATA	#IMPLIED>


<!ELEMENT ds:Transforms (ds:Transform+)>

<!ELEMENT ds:Transform (#PCDATA|ds:XPath %Transform.ANY;)* >
<!ATTLIST ds:Transform 
	Algorithm    CDATA    #REQUIRED >

<!ELEMENT ds:XPath (#PCDATA) >

<!ELEMENT ds:DigestMethod (#PCDATA %Method.ANY;)* >
<!ATTLIST ds:DigestMethod  
	Algorithm		CDATA	#REQUIRED >

<!ELEMENT ds:DigestValue  (#PCDATA)  >

<!ELEMENT ds:KeyInfo	(#PCDATA|ds:KeyName|ds:KeyValue|ds:RetrievalMethod|
           ds:X509Data|ds:PGPData|ds:SPKIData|ds:MgmtData %KeyInfo.ANY;)* >
<!ATTLIST ds:KeyInfo
	Id	ID	 #IMPLIED >

<!-- Key Information -->

<!ELEMENT ds:KeyName (#PCDATA) >
<!ELEMENT ds:KeyValue (#PCDATA|ds:DSAKeyValue|ds:RSAKeyValue %KeyValue.ANY;)* >
<!ELEMENT ds:MgmtData (#PCDATA) >

<!ELEMENT ds:RetrievalMethod (ds:Transforms?) >
<!ATTLIST ds:RetrievalMethod
  URI	CDATA #REQUIRED 
  Type	CDATA #IMPLIED > 

<!-- X.509 Data -->

<!ELEMENT ds:X509Data ((ds:X509IssuerSerial | ds:X509SKI | ds:X509SubjectName |
                    ds:X509Certificate | ds:X509CRL )+ %X509Data.ANY;)>
<!ELEMENT ds:X509IssuerSerial (ds:X509IssuerName, ds:X509SerialNumber) >
<!ELEMENT ds:X509IssuerName (#PCDATA) >
<!ELEMENT ds:X509SubjectName (#PCDATA) >
<!ELEMENT ds:X509SerialNumber (#PCDATA) >
<!ELEMENT ds:X509SKI (#PCDATA) >
<!ELEMENT ds:X509Certificate (#PCDATA) >
<!ELEMENT ds:X509CRL (#PCDATA) >

<!-- PGPData -->

<!ELEMENT ds:PGPData ((ds:PGPKeyID, ds:PGPKeyPacket?) | (ds:PGPKeyPacket) %PGPData.ANY;) >
<!ELEMENT ds:PGPKeyPacket  (#PCDATA)  >
<!ELEMENT ds:PGPKeyID  (#PCDATA)  >

<!-- SPKI Data -->

<!ELEMENT ds:SPKIData (ds:SPKISexp %SPKIData.ANY;)  >
<!ELEMENT ds:SPKISexp  (#PCDATA)  >

<!-- Extensible Content -->

<!ELEMENT ds:Object (#PCDATA|ds:Signature|ds:SignatureProperties|ds:Manifest %Object.ANY;)* >
<!ATTLIST ds:Object  
	Id	ID	#IMPLIED
	MimeType	CDATA	#IMPLIED
	Encoding	CDATA	#IMPLIED >

<!ELEMENT ds:Manifest (ds:Reference+)  >
<!ATTLIST ds:Manifest  
	Id	ID	#IMPLIED >

<!ELEMENT ds:SignatureProperties (ds:SignatureProperty+)  >
<!ATTLIST ds:SignatureProperties  
	Id	ID	 #IMPLIED  >

<!ELEMENT ds:SignatureProperty (#PCDATA %SignatureProperty.ANY;)* >
<!ATTLIST ds:SignatureProperty  
	Target 	CDATA	 #REQUIRED
	Id	ID	 #IMPLIED  >

<!-- Algorithm Parameters -->

<!ELEMENT ds:HMACOutputLength (#PCDATA) >

<!ELEMENT ds:DSAKeyValue ((ds:P, ds:Q)?, ds:G?, ds:Y, ds:J?, (ds:Seed, ds:PgenCounter)?) >
<!ELEMENT ds:P (#PCDATA) >
<!ELEMENT ds:Q (#PCDATA) >
<!ELEMENT ds:G (#PCDATA) >
<!ELEMENT ds:Y (#PCDATA) >
<!ELEMENT ds:J (#PCDATA) >
<!ELEMENT ds:Seed (#PCDATA) >
<!ELEMENT ds:PgenCounter (#PCDATA) >

<!ELEMENT ds:RSAKeyValue (ds:Modulus, ds:Exponent) > 
<!ELEMENT ds:Modulus (#PCDATA) >
<!ELEMENT ds:Exponent (#PCDATA) >
<!--
    For cXML license agreement information, please see
    http://www.cxml.org/home/license.asp

    $Id: //ariba/cxml/Modules/Profile.mod#6 $
-->

<!--
    For more information about XAdES, refer to the following URL.
    Portions of this DTD are derived from information contained therein.
    http://uri.etsi.org/01903/v1.3.2#
-->

<!ENTITY % Any.ANY ''>
<!ENTITY % XMLTimeStamp.ANY ''>

<!-- Start Any -->

<!ELEMENT xades:Any (#PCDATA   %Any.ANY;)*>

<!-- End Any -->

<!-- Start ObjectIdentifier -->

<!ELEMENT xades:ObjectIdentifier (xades:Identifier, xades:Description?, 
xades:DocumentationReferences?)>
<!ELEMENT xades:Identifier (#PCDATA)>
<!ATTLIST xades:Identifier
	Qualifier (OIDAsURI | OIDAsURN) #IMPLIED
>
<!ELEMENT xades:Description (#PCDATA)>
<!ELEMENT xades:DocumentationReferences (xades:DocumentationReference)+>
<!ELEMENT xades:DocumentationReference (#PCDATA)>

<!-- End ObjectIdentifier -->

<!-- Start EncapsulatedPKIData -->

<!ELEMENT xades:EncapsulatedPKIData (#PCDATA)>
<!ATTLIST xades:EncapsulatedPKIData
	Id ID #IMPLIED
	Encoding CDATA #IMPLIED
>

<!-- End EncapsulatedPKIData -->

<!-- Start time-stamp container types -->

<!ELEMENT xades:Include EMPTY>
<!ATTLIST xades:Include
	URI CDATA #REQUIRED
	referencedData CDATA #IMPLIED
>

<!ELEMENT xades:ReferenceInfo (ds:DigestMethod, ds:DigestValue)>
<!ATTLIST xades:ReferenceInfo
	Id ID #IMPLIED
	URI CDATA #IMPLIED
>
<!ELEMENT xades:XAdESTimeStamp (xades:Include*, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:XAdESTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:OtherTimeStamp (xades:ReferenceInfo+, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp))>
<!ATTLIST xades:OtherTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:EncapsulatedTimeStamp (#PCDATA)>
<!ATTLIST xades:EncapsulatedTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:XMLTimeStamp (#PCDATA  %XMLTimeStamp.ANY; )*>

<!-- End time-stamp tokens container  -->

<!-- Start container types -->

<!-- Start QualifyingProperties -->

<!ELEMENT xades:QualifyingProperties (xades:SignedProperties?, xades:UnsignedProperties?)>
<!ATTLIST xades:QualifyingProperties
	Target CDATA #REQUIRED
	Id ID #IMPLIED
	xmlns:xades	CDATA	#FIXED 'http://uri.etsi.org/01903/v1.3.2#'
>

<!ELEMENT xades:SignedProperties (xades:SignedSignatureProperties, 
xades:SignedDataObjectProperties?)>
<!ATTLIST xades:SignedProperties
	Id ID #IMPLIED
>

<!ELEMENT xades:UnsignedProperties (xades:UnsignedSignatureProperties?, 
xades:UnsignedDataObjectProperties?)>
<!ATTLIST xades:UnsignedProperties
	Id ID #IMPLIED
>

<!-- End QualifyingProperties -->

<!-- Start SignedSignatureProperties, SignedDataObjectProperties, 
UnsignedSignatureProperties, UnsignedDataObjectProperties -->

<!ELEMENT xades:SignedSignatureProperties (xades:SigningTime?, xades:SigningCertificate?, 
xades:SignaturePolicyIdentifier?, xades:SignatureProductionPlace?, xades:SignerRole?)>
<!ATTLIST xades:SignedSignatureProperties
	Id ID #IMPLIED
>

<!ELEMENT xades:SignedDataObjectProperties (xades:DataObjectFormat*, 
xades:CommitmentTypeIndication*, xades:AllDataObjectsTimeStamp*, 
xades:IndividualDataObjectsTimeStamp*)>
<!ATTLIST xades:SignedDataObjectProperties
	Id ID #IMPLIED
>

<!ELEMENT xades:UnsignedSignatureProperties (xades:CounterSignature | xades:SignatureTimeStamp 
| xades:CompleteCertificateRefs | xades:CompleteRevocationRefs | xades:AttributeCertificateRefs
 | xades:AttributeRevocationRefs | (xades:SigAndRefsTimeStamp | xades:RefsOnlyTimeStamp) | 
xades:CertificateValues | xades:RevocationValues | xades:AttrAuthoritiesCertValues 
| xades:AttributeRevocationValues | xades:ArchiveTimeStamp)+>
<!ATTLIST xades:UnsignedSignatureProperties
	Id ID #IMPLIED
>

<!ELEMENT xades:UnsignedDataObjectProperties (xades:UnsignedDataObjectProperty*)>
<!ATTLIST xades:UnsignedDataObjectProperties
	Id ID #IMPLIED
>

<!ELEMENT xades:UnsignedDataObjectProperty (#PCDATA   %Any.ANY;)*>

<!-- End SignedSignatureProperties, SignedDataObjectProperties, 
UnsignedSignatureProperties, UnsignedDataObjectProperties -->

<!-- Start QualifyingPropertiesReference -->

<!ELEMENT xades:QualifyingPropertiesReference EMPTY>
<!ATTLIST xades:QualifyingPropertiesReference
	URI CDATA #REQUIRED
	Id ID #IMPLIED
>

<!-- End QualifyingPropertiesReference -->

<!-- End container types -->

<!-- Start SigningTime -->

<!ELEMENT xades:SigningTime (#PCDATA)>

<!-- End SigningTime -->

<!-- Start SigningCertificate -->

<!ELEMENT xades:SigningCertificate (xades:Cert+)>
<!ELEMENT xades:Cert (xades:CertDigest, xades:IssuerSerial)>
<!ATTLIST xades:Cert
	URI CDATA #IMPLIED
>
<!ELEMENT xades:CertDigest (ds:DigestMethod, ds:DigestValue)>
<!ELEMENT xades:IssuerSerial (ds:X509IssuerName, ds:X509SerialNumber)>
<!ELEMENT xades:X509IssuerName (#PCDATA)>
<!ELEMENT xades:X509SerialNumber (#PCDATA)>

<!-- End SigningCertificate -->

<!-- Start SignaturePolicyIdentifier -->

<!ELEMENT xades:SignaturePolicyIdentifier (xades:SignaturePolicyId | 
xades:SignaturePolicyImplied)>
<!ELEMENT xades:SignaturePolicyImplied ANY>
<!ELEMENT xades:SignaturePolicyId (xades:SigPolicyId, ds:Transforms?, xades:SigPolicyHash, 
xades:SigPolicyQualifiers?)>
<!ELEMENT xades:SigPolicyId (xades:Identifier, xades:Description?, xades:DocumentationReferences?)>
<!ELEMENT xades:SigPolicyHash (ds:DigestMethod, ds:DigestValue)>
<!ELEMENT xades:SigPolicyQualifiers (xades:SigPolicyQualifier+)>
<!ELEMENT xades:SigPolicyQualifier (#PCDATA|xades:SPURI %Any.ANY; )*>

<!-- End SignaturePolicyIdentifier -->

<!-- Start SPURI and SPUserNotice -->

<!ELEMENT xades:SPURI (#PCDATA)>
<!ELEMENT xades:SPUserNotice (xades:NoticeRef?, xades:ExplicitText?)>
<!ELEMENT xades:NoticeRef (xades:Organization, xades:NoticeNumbers)>
<!ELEMENT xades:ExplicitText (#PCDATA)>
<!ELEMENT xades:Organization (#PCDATA)>
<!ELEMENT xades:NoticeNumbers (xades:int*)>
<!ELEMENT xades:int (#PCDATA)>

<!-- End SPURI and SPUserNotice -->

<!-- Start CounterSignature -->

<!ELEMENT xades:CounterSignature (ds:Signature)>

<!-- End CounterSignature -->

<!-- Start DataObjectFormat -->

<!ELEMENT xades:DataObjectFormat (xades:Description?, xades:ObjectIdentifier?, xades:MimeType?, 
xades:Encoding?)>
<!ATTLIST xades:DataObjectFormat
	ObjectReference CDATA #REQUIRED
>
<!ELEMENT xades:MimeType (#PCDATA)>
<!ELEMENT xades:Encoding (#PCDATA)>

<!-- End DataObjectFormat -->

<!-- Start CommitmentTypeIndication -->

<!ELEMENT xades:CommitmentTypeIndication (xades:CommitmentTypeId, (xades:ObjectReference+ | 
xades:AllSignedDataObjects), xades:CommitmentTypeQualifiers?)>
<!ELEMENT xades:CommitmentTypeId (xades:Identifier, xades:Description?, 
xades:DocumentationReferences?)>
<!ELEMENT xades:ObjectReference (#PCDATA)>
<!ELEMENT xades:AllSignedDataObjects ANY>
<!ELEMENT xades:CommitmentTypeQualifiers (xades:CommitmentTypeQualifier*)>
<!ELEMENT xades:CommitmentTypeQualifier (#PCDATA %Any.ANY; )*>

<!-- End CommitmentTypeIndication -->

<!-- Start SignatureProductionPlace -->

<!ELEMENT xades:SignatureProductionPlace (xades:City?, xades:StateOrProvince?, xades:PostalCode?, 
xades:CountryName?)>
<!ELEMENT xades:City (#PCDATA)>
<!ELEMENT xades:StateOrProvince (#PCDATA)>
<!ELEMENT xades:PostalCode (#PCDATA)>
<!ELEMENT xades:CountryName (#PCDATA)>

<!-- End SignatureProductionPlace -->

<!-- Start SignerRole -->

<!ELEMENT xades:SignerRole (xades:ClaimedRoles?, xades:CertifiedRoles?)>
<!ELEMENT xades:ClaimedRoles (xades:ClaimedRole+)>
<!ELEMENT xades:CertifiedRoles (xades:CertifiedRole+)>
<!ELEMENT xades:ClaimedRole (#PCDATA %Any.ANY; )*>
<!ELEMENT xades:CertifiedRole (#PCDATA)>
<!ATTLIST xades:CertifiedRole
	Id ID #IMPLIED
	Encoding CDATA #IMPLIED
>

<!-- End SignerRole -->

<!-- Start AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, 
SignatureTimeStamp -->

<!ELEMENT xades:AllDataObjectsTimeStamp (ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:AllDataObjectsTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:IndividualDataObjectsTimeStamp (xades:Include+, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:IndividualDataObjectsTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:SignatureTimeStamp (ds:CanonicalizationMethod?, (xades:EncapsulatedTimeStamp 
| xades:XMLTimeStamp)+)>
<!ATTLIST xades:SignatureTimeStamp
	Id ID #IMPLIED
>

<!-- End AllDataObjectsTimeStamp, IndividualDataObjectsTimeStamp, 
SignatureTimeStamp -->

<!-- Start CompleteCertificateRefs -->

<!ELEMENT xades:CompleteCertificateRefs (xades:CertRefs)>
<!ATTLIST xades:CompleteCertificateRefs
	Id ID #IMPLIED
>
<!ELEMENT xades:CertRefs (xades:Cert+)>

<!-- End CompleteCertificateRefs -->

<!-- Start AttributeCertificateRefs -->

<!ELEMENT xades:AttributeCertificateRefs (xades:CertRefs)>
<!ATTLIST xades:AttributeCertificateRefs
	Id ID #IMPLIED
>

<!-- End AttributeCertificateRefs -->

<!-- Start CompleteRevocationRefs -->

<!ELEMENT xades:CompleteRevocationRefs (xades:CRLRefs?, xades:OCSPRefs?, xades:OtherRefs?)>
<!ATTLIST xades:CompleteRevocationRefs
	Id ID #IMPLIED
>
<!ELEMENT xades:CRLRefs (xades:CRLRef+)>
<!ELEMENT xades:OCSPRefs (xades:OCSPRef+)>
<!ELEMENT xades:OtherRefs (xades:OtherRef+)>

<!ELEMENT xades:CRLRef (xades:DigestAlgAndValue, xades:CRLIdentifier?)>
<!ELEMENT xades:OCSPRef (xades:OCSPIdentifier, xades:DigestAlgAndValue?)>
<!ELEMENT xades:OtherRef (#PCDATA %Any.ANY; )*>

<!ELEMENT xades:DigestAlgAndValue (ds:DigestMethod, ds:DigestValue)>
<!ELEMENT xades:CRLIdentifier (xades:Issuer, xades:IssueTime, xades:Number?)>
<!ATTLIST xades:CRLIdentifier
	URI CDATA #IMPLIED
>
<!ELEMENT xades:OCSPIdentifier (xades:ResponderID, xades:ProducedAt)>
<!ATTLIST xades:OCSPIdentifier
	URI CDATA #IMPLIED
>

<!ELEMENT xades:Issuer (#PCDATA)>
<!ELEMENT xades:IssueTime (#PCDATA)>
<!ELEMENT xades:Number (#PCDATA)>

<!ELEMENT xades:ResponderID (xades:ByName | xades:ByKey)>
<!ELEMENT xades:ByName  (#PCDATA)>
<!ELEMENT xades:ByKey  (#PCDATA)>
<!ELEMENT xades:ProducedAt (#PCDATA)>

<!-- End CompleteRevocationRefs -->

<!-- Start AttributeRevocationRefs -->

<!ELEMENT xades:AttributeRevocationRefs (xades:CRLRefs?, xades:OCSPRefs?, xades:OtherRefs?)>
<!ATTLIST xades:AttributeRevocationRefs
	Id ID #IMPLIED
>

<!-- End AttributeRevocationRefs -->

<!-- Start SigAndRefsTimeStamp, RefsOnlyTimeStamp  -->

<!ELEMENT xades:SigAndRefsTimeStamp (xades:Include*, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:SigAndRefsTimeStamp
	Id ID #IMPLIED
>

<!ELEMENT xades:RefsOnlyTimeStamp (xades:Include*, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:RefsOnlyTimeStamp
	Id ID #IMPLIED
>

<!-- End SigAndRefsTimeStamp, RefsOnlyTimeStamp  -->

<!-- Start CertificateValues -->

<!ELEMENT xades:CertificateValues (xades:EncapsulatedX509Certificate | 
xades:OtherCertificate)*>
<!ATTLIST xades:CertificateValues
	Id ID #IMPLIED
>

<!ELEMENT xades:EncapsulatedX509Certificate (#PCDATA)>
<!ATTLIST xades:EncapsulatedX509Certificate
	Id ID #IMPLIED
	Encoding CDATA #IMPLIED
>
<!ELEMENT xades:OtherCertificate (#PCDATA %Any.ANY;)*>

<!ELEMENT xades:AttrAuthoritiesCertValues (xades:EncapsulatedX509Certificate | 
xades:OtherCertificate)*>
<!ATTLIST xades:AttrAuthoritiesCertValues
	Id ID #IMPLIED
>

<!-- Start RevocationValues -->

<!ELEMENT xades:RevocationValues (xades:CRLValues?, xades:OCSPValues?, xades:OtherValues?)>
<!ATTLIST xades:RevocationValues
	Id ID #IMPLIED
>

<!ELEMENT xades:CRLValues (xades:EncapsulatedCRLValue+)>
<!ELEMENT xades:OCSPValues (xades:EncapsulatedOCSPValue+)>
<!ELEMENT xades:OtherValues (xades:OtherValue+)>

<!ELEMENT xades:EncapsulatedCRLValue (#PCDATA)>
<!ATTLIST xades:EncapsulatedCRLValue
	Id ID #IMPLIED
	Encoding CDATA #IMPLIED
>
<!ELEMENT xades:EncapsulatedOCSPValue (#PCDATA)>
<!ATTLIST xades:EncapsulatedOCSPValue
	Id ID #IMPLIED
	Encoding CDATA #IMPLIED
>
<!ELEMENT xades:OtherValue (#PCDATA %Any.ANY;  )*>

<!-- End RevocationValues -->

<!ELEMENT xades:AttributeRevocationValues (xades:CRLValues?, xades:OCSPValues?, xades:OtherValues?)>
<!ATTLIST xades:AttributeRevocationValues
	Id ID #IMPLIED
>
<!-- Start ArchiveTimeStamp -->

<!ELEMENT xades:ArchiveTimeStamp (xades:Include*, ds:CanonicalizationMethod?, 
(xades:EncapsulatedTimeStamp | xades:XMLTimeStamp)+)>
<!ATTLIST xades:ArchiveTimeStamp
	Id ID #IMPLIED
>


<!-- End ArchiveTimeStamp -->
